<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Linux相关命令</title>
      <link href="/2024/04/19/Linux%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"/>
      <url>/2024/04/19/Linux%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux相关命令"><a href="#Linux相关命令" class="headerlink" title="Linux相关命令"></a>Linux相关命令</h1><p><img src="/2024/04/19/Linux%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/image-20240419101122068.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 查阅用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2024/04/12/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/"/>
      <url>/2024/04/12/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/</url>
      
        <content type="html"><![CDATA[<p>用VQ-VAE做生成式隐写<br>从码本变量中抽取若干作为代表隐写比特的特征<br>仔细一想又行不通，因为一个码本变量会解码为音频的一帧</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>生成相关</title>
      <link href="/2024/04/08/%E7%94%9F%E6%88%90%E7%9B%B8%E5%85%B3/"/>
      <url>/2024/04/08/%E7%94%9F%E6%88%90%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<h1 id="生成相关"><a href="#生成相关" class="headerlink" title="生成相关"></a>生成相关</h1><h2 id="Audiogen"><a href="#Audiogen" class="headerlink" title="Audiogen"></a>Audiogen</h2><p>ICLR 2023<br>Meta AI<br>包括两个主要的阶段<br>第一阶段将原始音频编码成离散的token序列，通过一个压缩模型进行<br>该模型以端到端的方式进行训练，使用压缩表示重建输入音频，并以一组鉴别器的形式添加感知损失。<br>第二阶段使用一个自回归的Transformer-decoder language-model，在文本条件的基础上重建音频序列</p><p>主要贡献：</p><ol><li>sota方法</li><li>提高TTA生成性能的两个方法：classifier free guidance，动态文本和音频混合来提高组合性</li><li>可以做条件和非条件的音频延续</li><li>探索了音频保真度和采样时间之间的关系<h3 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h3><img src="/2024/04/08/%E7%94%9F%E6%88%90%E7%9B%B8%E5%85%B3/image-20240411103419341.png" alt=""><h4 id="Audio-representation"><a href="#Audio-representation" class="headerlink" title="Audio representation"></a>Audio representation</h4>一个时长为d的音频信号可以表示为一个序列 $x\in[-1,1]^{C_a \times T}$ ，$C_a$ 是通道数，$T=d\cdot f_{sr}$ 是采样点数，至于为什么是 $[-1,1]$ ，是因为py库读取wav文件会自动归一化<br>Audio representation model 包含三个部分</li></ol><ul><li>encoder network E：将音频片段作为输入，输出一个latent representation $z$ </li><li>quantization layer Q：使用Vector Quantizaiton将 $z$ 压缩为 $z_q$</li><li>decoder net work G：从压缩表示 $z_q$ 中重建时域信号 $\hat x$<br>整个系统端到端进行训练，损失包括时域和频域上的重建损失，以及不同时间分辨率的感知损失，这一部分通过多个鉴别器来实现。</li></ul><p>训练目标：<br>时域重建损失：$\ell_t(x,\hat x)=\Vert x-\hat x\Vert_1$<br>频域重建损失：</p><script type="math/tex; mode=display">\ell_f(x,\hat x)=\frac{1}{|\alpha|\cdot|s|}\sum_{\alpha_i\in \alpha}\sum_{i\in e}\Vert S_i(x)-S_i(\hat x) \Vert_1 +\alpha_i\Vert S_i(x)-S_i(\hat x) \Vert_2</script><p>其中 $S_i$ 是根据 $i$ 改变的不同窗长和步长的64-bins梅尔谱图，系数 $\alpha_i$ 用于平衡两项损失，但是这里设置的是1<br>感知损失：<br>使用一个multi-scale STFT-based discriminator来捕获声音信号中的不同结构。<br>判别器的结构是一样的，但是时间分辨率不同，对抗损失如下</p><script type="math/tex; mode=display">\ell_g(\hat x)=\frac{1}{K}\sum_k \max(0,1-D_k(\hat x))</script><p>根据公式，这个 $D_k(\hat x)$ 输出的应该是为真实样本的概率<br>还有特征匹配损失（这个在VITS中也出现了），L是判别器的层数</p><script type="math/tex; mode=display">\ell_{feat}(x,\hat x)=\frac{1}{KL}\sum^K_{k=1}\sum^L_{l=1}\Vert D^l_k(x)-D^l_k(\hat x) \Vert_1</script><p>判别器的总损失还加了一个部分，总的如下</p><script type="math/tex; mode=display">L_d(x, \hat x)=\frac{1}{K}\sum^K_{k=1}\max(0,1-D_k(x))+\max(0,1+D_k(\hat x))</script><p>对抗损失的两部分，对真样本 $x$ 输出要大，假的输出要小，因为是损失，所以二者都取负，得到的就是上面这种形式。<br><strong>Audio language modeling</strong><br>看不懂，什么卵<br>给定一个文本输入 $C$ ，Audio Language Model（ALM）组件输出一个音频token序列 $\hat z_q$ 然后在其上面做音频重建<br>给定如下：<br>一个文本编码器F，将原始文本输出投射成一个语义稠密表示（semantic dense representation）$F(c)=u$<br>一个查阅表（Look-Up-Table, LUT）将音频token $\hat z_q$ 嵌入一个连续的空间，$LUT(\hat z_q)=v$<br>然后将 $u,v$ 连接，得到 $Z=u_1,\dots,u_{T_u},v_1,\dots,v_{T_v}$<br>然后使用上面这个表示 $Z$ ，训练一个Transformer-decoder language-model，使用如下损失函数</p><script type="math/tex; mode=display">L_{LM}=-\sum^N_{i=1}\sum^{T_v}_{j=1}\log p_{\theta}(v^i_j|u_1^1,\dots,u^i_{T_u},v_1^1,\dots,v^i_{j-1})</script><p>两个连乘，N是样本数吗？然后下标是音频嵌入连续空间序列<br>突然懂了<br>首先这是一个Transformer序列预测器，目标是给定文本，得到音频token序列，上面损失函数是一个条件熵的形式，对于一条样本，最开始的条件是文本表示 $u$ ，然后依次预测下一个音频token，每次预测计算一次条件熵。<br><strong>长序列预测问题</strong><br>本方法对原始音频下采样32倍，让每个audiotoken关联2ms，这会导致很长的序列，因为每秒就需要500个token。<br>使用Multi-stream audio inputs的方法缓解这个问题<br>看不懂，看代码的时候再研究研究</p><h4 id="Experiments"><a href="#Experiments" class="headerlink" title="Experiments"></a>Experiments</h4><p>一些评估指标<br>Frechet Audio Distance：FAD，是一种与人类感知密切相关的无参考评估指标<br>还评估了KL散度和主观的标准<br>做了音频续写的实验，使用的条件包括音频片段，音频相关文本，音频无关文本</p><h4 id="Limitations"><a href="#Limitations" class="headerlink" title="Limitations"></a>Limitations</h4><p>缺乏理解时间顺序的能力，经常生成莫名其妙的语音</p><h2 id="Diffsound"><a href="#Diffsound" class="headerlink" title="Diffsound"></a>Diffsound</h2><p>TASLP2023<br>北大, Tencent AI lab<br>Dongchao Yang, Jianwei Yu<br>传统的自回归token解码器，有两个问题</p><ul><li>梅尔谱token总是按顺序预测，这会限制模型的生成能力，因为有些声音的事件位置可能来自文本的两端</li><li>预测阶段，来自之前的错误的预测token会导致累计的预测错误<br>主要贡献：</li><li>第一次在音频生成任务中使用Diffusion</li><li>提出了一种基于掩码的文本生成策略（mask-based text generation strategy, MBTG），有助于在AudioSet数据集上构建大规模文本-音频数据集</li><li>提出了三个客观的评价指标 <h3 id="Proposed-text-to-sound-framework"><a href="#Proposed-text-to-sound-framework" class="headerlink" title="Proposed text-to-sound framework"></a>Proposed text-to-sound framework</h3><img src="/2024/04/08/%E7%94%9F%E6%88%90%E7%9B%B8%E5%85%B3/image-20240412150427637.png" alt=""><br><strong>Text Encoder</strong><br>有点搞，用的是BERT和CLIP的text encoder，但是效果更好，说明和图片的对比学习会让textencoder携带更多的语义信息<br><strong>Learning Discrete Latent Space of Mel-Spectrograms via VQ-VAE</strong><br><img src="/2024/04/08/%E7%94%9F%E6%88%90%E7%9B%B8%E5%85%B3/image-20240412152710502.png" alt=""><br>和TTS任务不同，TTA任务生成的音频与文本没有直接的对应关系<br>使用VQ-VAE来生成梅尔谱，问题就被转换成生成token序列<br>这里就是普通的VQ-VAE，不再详细记录<br><strong>Token-Decoder</strong><br>用于将文本特征变换到离散的梅尔谱图token序列，本文首先提出采用自回归的token-decoder<br>啥意思，前面说不用自回归，这里又用的自回归<br>说后面给了一个不同自回归的方法，等下看看<br>这里是用自回归预测前面VQ-VAE的encoder生成的梅尔token序列<br>在训练的时候，因为累计错误问题，使用<code>"teacher-forcing" strategy</code>，使用ground truth作为预测第 $i$ 个token时前 $i-1$ 个token条件<br><strong>Vocoder</strong><br>用的MelGAN，不懂<br>这还是自己训练的，在AS上训练的<h3 id="Diffusion-based-decoder"><a href="#Diffusion-based-decoder" class="headerlink" title="Diffusion-based decoder"></a>Diffusion-based decoder</h3>就是经典Diffusion，参考<a href="../_posts/AudioLDM.md">AudioLDM</a>中关于Diffusion的部分<br>这里给了一个好高大上的loss，叫负对数似然变分上界（variational upper bound on the negative log-likelihood）<script type="math/tex; mode=display">\mathcal{L}_{vb}=\mathbb{E}_{q(\boldsymbol{x}_0)}\left[D_{KL}[q(\boldsymbol{x}_t|\boldsymbol{x}_0)\Vert p(\boldsymbol{x}_t)] + \sum^T_{t=1}\mathbb{E}_{q(\boldsymbol{x}_t|\boldsymbol{x}_0)}\left[D_{KL}[q(\boldsymbol{x}_{t-1}|\boldsymbol{x}_t,\boldsymbol{x}_0)\Vertp_{\theta}(\boldsymbol{x}_{t-1}|\boldsymbol{x}_t)]\right]\right]</script>这一大坨狗屎是什么<br>首先，$q$ 是前向过程的分布，是加噪过程，$p$ 是不变的高斯分布，$p_\theta$ 是反向过程去噪的分布<br>第一个KL散度是加噪过程的损失，第二个是T步去噪过程的损失，这下懂了</li></ul><p><strong>Discrete Diffuison Model</strong><br>因为送入Decoder的是离散的整数，不能在这上面加噪声，引入一个转移概率矩阵，用于知道前向过程中 $\boldsymbol{x}_0$ 如何一步一步转换为 $\boldsymbol{x}_t$<br>定义为：</p><script type="math/tex; mode=display">[\boldsymbol{Q}_t]_{ij}=q(x_t=i|x_{t-1}=j) \in \mathbb{R}^{P\times P}</script><p>对整个序列的前向过程可以写为：</p><script type="math/tex; mode=display">q(X_t|X_{t-1})=\boldsymbol{c}^T(x_t)\boldsymbol{Q}_t \boldsymbol{c}(x_{t-1})</script><p>其中 $\boldsymbol{c}(\cdot)$ 是一个将标量元素转换成one-hot向量的函数<br>沟槽的后面好多，这里暂时解释不清，继续往后看<br>然后说按照马尔可夫链和贝叶斯公式，可以计算出 $q(x_t|x_0)$ 和 $q(x_{t-1}|x_t,x_0)$<br><strong>Non-Autoregressive Mel-Spectrograms Generation via Diffsound</strong><br>作者希望预测的结果可以同时获得，并利用扩散模型T步的迭代优化预测结果<br>但是这里的特征是离散的，这里提到，离散扩散模型训练的关键是设计一种合适的策略来预定义马尔可夫转移矩阵 $Q_t$<br>注意到上面用的是离散标签在这搞扩散，我直接一个问号<br>这是将离散标签one-hot之后类似一个分类过程？<br>发现one-hot之后就是一个单位向量啊，然后左乘右乘就是选择 $Q_t$ 中的一个元素嘛<br>定义了三种转移矩阵</p><ul><li>Uniform transition matrix</li><li>mask transition matrix</li><li>mask and uniform transition matrix<br>这个就是传统diffusion的扩展，不想看了<br><strong>Pre-Training Diffsound on AudioSet Dataset</strong><br>对于文本描述，采用的做法是在标签两边随机插入一到两个mask标记，以使模型主要关注于声音事件而不是文本（感觉不太靠谱<br>采用渐进式训练，从单标签开始训练，然后再多标签<h3 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h3>相比之前的文章，引入了一个Audio Caption Loss，是将生成的音频送入Audio caption模型，执行caption任务</li></ul><h2 id="Make-an-Audio"><a href="#Make-an-Audio" class="headerlink" title="Make an Audio"></a>Make an Audio</h2><p>ICML2023<br>浙大，北大，字节跳动<br>Rongjie Huang, Jiawei Huang, Dongchao Yang<br>引入了一种数据增强方法，解决音频文本对数据稀缺的问题<br>使用频谱自编码器预测自监督音频表示而不是波形<br>支持多模态输入生成音频<br><img src="/2024/04/08/%E7%94%9F%E6%88%90%E7%9B%B8%E5%85%B3/image-20240419092228304.png" alt=""></p><h3 id="Pseudo-Prompt-Enhancement-Distill-then-Reprogram"><a href="#Pseudo-Prompt-Enhancement-Distill-then-Reprogram" class="headerlink" title="Pseudo Prompt Enhancement: Distill-then-Reprogram"></a>Pseudo Prompt Enhancement: Distill-then-Reprogram</h3><p>这个方法包含两个阶段，一个expert distillation approach，使用audio caption方法，从无标签音频中得到文本描述，一个dynamic reprogramming procedure来构建不同的音频文本组合<br><img src="/2024/04/08/%E7%94%9F%E6%88%90%E7%9B%B8%E5%85%B3/image-20240419092220640.png" alt=""></p><p><strong>Expert Distillation</strong><br>使用两个预训练模型来做这个事情，分别是audio caption的工作和audio-text retrieval的工作，我记得两个都是DCASE的task<br>没看懂，这个audio-text retrieval的模型是拿来干嘛的？<br><strong>Dynamic reprogramming</strong><br>根据几个模板，把 $N\in \{0,1,2\}$ 个音频文本对使用预设的几个方法连接</p><h3 id="Textual-Representation"><a href="#Textual-Representation" class="headerlink" title="Textual Representation"></a>Textual Representation</h3><p>就说用了CLAP和T5-Large(一个大语言模型)，实验表明二者的结果相近，但是CLAP更高效，因为不需要offline computation</p><h3 id="Audio-Representation"><a href="#Audio-Representation" class="headerlink" title="Audio Representation"></a>Audio Representation</h3><p>经典的梅尔自编码器带判别器提高重建质量<br>这个除了重建损失和对抗损失还有一个KL散度惩罚损失</p><p>后面还有经典的介绍Diffusion和CLassifier-Free Guidance</p><h3 id="X-To-Audio-No-Modality-Left-Behind"><a href="#X-To-Audio-No-Modality-Left-Behind" class="headerlink" title="X-To-Audio: No Modality Left Behind"></a>X-To-Audio: No Modality Left Behind</h3><p>包括三个部分，text to audio, audio inpainting visual to audio(video or image)<br><img src="/2024/04/08/%E7%94%9F%E6%88%90%E7%9B%B8%E5%85%B3/image-20240419092200720.png" alt=""></p><h4 id="Personalized-Text-To-Audio-Generation"><a href="#Personalized-Text-To-Audio-Generation" class="headerlink" title="Personalized Text-To-Audio Generation"></a>Personalized Text-To-Audio Generation</h4><p>没搞懂他想干嘛<br>这里给了个例子，在给定打雷的声音时，让模型生成babycrying的音频，就会生成<code>a baby crying in the thunder day</code><br>大概就是通过文本描述修改音频，添加背景声，或者插入说话的主体之类的<br>做法是对给定的音频片段，选取一个特定的时间段$t_0$然后对其进行Diffuision的加噪去噪过程<br>这里提到音频的文本对其度和真实度之间随着T的变大有一个trade-off</p><h4 id="Audio-Inpainting"><a href="#Audio-Inpainting" class="headerlink" title="Audio Inpainting"></a>Audio Inpainting</h4><p>通过mask来实现Inpainting的训练，采用了两种mask方法<br>一个是<a href="Suvorov, R., Logacheva, E., Mashikhin, A., Remizova, A., Ashukha, A., Silvestrov, A., Kong, N., Goka, H., Park, K., and Lempitsky, V. Resolution-robust large mask inpainting with fourier convolutions. In Proceedings of the IEEE/CVF Winter Conference on Applications of Computer Vision, pp. 2149–2159, 2022">LaMa</a>中的什么polygonal chains和任意宽高比的矩形mask（听起来像是在mel谱上做mask，因为原来的工作是图像上的<br><img src="/2024/04/08/%E7%94%9F%E6%88%90%E7%9B%B8%E5%85%B3/image-20240419092131181.png" alt=""><br>大概长这样<br>另一个是在语音相关文献中常用的帧级掩蔽策略</p><h4 id="Visual-To-Audio-Generation"><a href="#Visual-To-Audio-Generation" class="headerlink" title="Visual-To-Audio Generation"></a>Visual-To-Audio Generation</h4><p>用CLIP来抽取图像特征，用文本表示来弥合视觉和音频世界之间的模态差距，用一个或多个Flow模型将CLIP的特征向量空间映射到CLAP的特征向量空间<br>对于视频，抽取固定的4帧，池化得到4帧的平均表示，退化为图片转音频</p><h3 id="Training-and-Evaluation"><a href="#Training-and-Evaluation" class="headerlink" title="Training and Evaluation"></a>Training and Evaluation</h3><p>笑死用了18块V100<br>在常用的评估方法FID和KL散度之上，添加了CLAP分数来评估audio-text alignment<br>对比了Diffsound，AudioLDM和AudioGen<br><img src="/2024/04/08/%E7%94%9F%E6%88%90%E7%9B%B8%E5%85%B3/image-20240419170509432.png" alt=""></p><p>IS: inception score，在AudioLDM中，对他的解释是</p><blockquote><p>IS is effective in evaluating both sample quality and diversity.</p></blockquote><p>网上找的都说什么是用谷歌一个分类模型计算的，对于音频，需要专门的分类器 $C$<br>可以自己训练，计算公式如下</p><script type="math/tex; mode=display">IS(G)=\exp(\mathbb{E}_{z\sim P_g} D_{KL}(p(y|x)\Vert p(y)))</script><p>在AudioLDM中有讲，是用的PANNs分类器做的评估</p><p>消融实验中提到，对于文本特征提取，CLAP和T5表现差不多，但是CLAP性能高</p><h3 id="与AudioLDM2的对比"><a href="#与AudioLDM2的对比" class="headerlink" title="与AudioLDM2的对比"></a>与AudioLDM2的对比</h3><p>二者同为多模态内容生成音频的工作，从结构、特征工程、结果三个角度来看<br><strong>结构</strong><br>AudioLDM2</p><ul><li>使用AudioMAE编码音频特征</li><li>使用GPT-2生成其他模态特征</li><li>使用含Transformer块的U-net<br>Make-an-Audio</li><li>使用自己训练的梅尔自编码器结构网络编码音频特征</li><li>使用CLIP和CLAP编码其他模态特征</li><li>使用的普通的卷积U-net</li></ul><p><strong>特征工程</strong><br>AudioLDM2</p><ul><li>使用各模态的专家模型抽取模态特征 </li><li>使用GPT2生成音频大一统特征<br>Make-an-Audio</li><li>也是用的专家模型抽取模态特征</li><li>使用Flow映射分布到自编码器特征空间</li></ul><p><strong>结果</strong><br><img src="file:///C:/Users/89492/Desktop/%E5%91%A8%E6%8A%A5/2024-4-22%E9%84%A2%E6%B9%A7%E6%A3%9A%E5%91%A8%E6%8A%A5/image-20240422100319446.png?lastModify=1713926396" alt="image-20240422100319446"><br>AudioLDM使用的训练数据少很多，主观评价相对也更好<br>OVL：Overall quality<br>REL：relevance t the input text</p><h2 id="Retrieval-Augmented-text-to-audio-generation"><a href="#Retrieval-Augmented-text-to-audio-generation" class="headerlink" title="Retrieval-Augmented text to audio generation"></a>Retrieval-Augmented text to audio generation</h2><p>ICASSP 2024<br>University of Surrey<br>Yi Yuan, Haohe Liu<br>提出的问题：由于TTA模型训练数据的类别不平衡问题，其生成性能存在偏差，这些模型可以为常见的声音事件生成真实的音频片段，但是当遇到不太频繁或看不见的声音事件时，他们可能会生成不正确或不相关的音频。</p><h2 id="VoiceBox"><a href="#VoiceBox" class="headerlink" title="VoiceBox"></a>VoiceBox</h2><h2 id="AudioPaLM"><a href="#AudioPaLM" class="headerlink" title="AudioPaLM"></a>AudioPaLM</h2><h2 id="TANGO"><a href="#TANGO" class="headerlink" title="TANGO"></a>TANGO</h2>]]></content>
      
      
      
        <tags>
            
            <tag> 论文 </tag>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2024/04/08/%E8%8D%89%E7%A8%BF%E7%BA%B8/"/>
      <url>/2024/04/08/%E8%8D%89%E7%A8%BF%E7%BA%B8/</url>
      
        <content type="html"><![CDATA[<p>对于生成任务（训练资源、各种耗时也更长<br>马别先把生成的最近几年的看下</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>VITS</title>
      <link href="/2024/04/03/VITS/"/>
      <url>/2024/04/03/VITS/</url>
      
        <content type="html"><![CDATA[<h1 id="VITS"><a href="#VITS" class="headerlink" title="VITS"></a>VITS</h1><p>采用<code>variational inference augmented with normalizing flows and an adversarial training process</code> 提高了生成模型的表现力<br>拆解一下，使用的是变分推理，增强方法为：<code>normalizing flows</code> 和 <code>adversarial training process</code></p><p>提出了一个随机持续时间预测器(stochastic duration predictor)，可以从输入文本合成具有不同韵律的语音</p><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>现阶段的TTS都由两部分组成，<br>一是由text到中间语音表示，比如梅尔谱图或者linguistic features<br>二是从中间特征生成原始波形<br>两个阶段的模型是独立开发的</p><blockquote><p>Autoregression is a time series model that uses observations from previous time steps as input to a regression equation to predict the value at the next time step</p></blockquote><p>基于神经网络的自回归(autoregression)TTS系统，由于线性生成过程，难以利用现在的多线程处理器</p><h2 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h2><p>这里点题，Variational Inference with adversarial learning for end-to-end Text-to-Speech</p><h3 id="Variational-Inference"><a href="#Variational-Inference" class="headerlink" title="Variational Inference"></a>Variational Inference</h3><p>损失包括VAE的重建损失和KL散度</p><p>重建损失用梅尔谱图计算，使用decoder上采样z，得到波形 $\hat y$ ，然后转换成梅尔 $\hat{x}_{mel}$<br>在实际训练中，不会对整个z上采样，而是使用部分序列，提高训练效率</p><p>KL散度是文本条件生成的z和频谱生成的z两个分布之间计算的，在论文里分别是</p><script type="math/tex; mode=display">\begin{aligned}L_{kl} = \log q_{\phi}(z|x_{lin})-\log p_{\theta}(z|c_{text},A)\newlinez\sim q_{\phi}(z|x_{lin})=N(z;\mu_{\phi}(x_{lin}),\sigma_{\phi}(x_{lin}))\end{aligned}</script><p>第一项是Posterior Encoder生成的分布，第二项是Text部分生成的分布<br>注意，KL散度的文本部分是在乘注意力矩阵A之后计算的<br><img src="/2024/04/03/VITS/image-20240403165935988.png" alt=""></p><p>作者发现提高左边这个分布的表达能力对生成真实样本很重要，于是采用一个正则化flow模型（一个分布映射思想的生成模型）通过可逆变换，将一个简单分布映射到复杂分布<br>上图左边是由原数据得到的后验分布，右边是由对应文本得到的先验分布<br>flow是将后验分布变换到先验分布（分布映射</p><h3 id="Alignment-Estimation"><a href="#Alignment-Estimation" class="headerlink" title="Alignment Estimation"></a>Alignment Estimation</h3><p><strong>Monotonic alignment search</strong><br>这东西的优化目标是flow输出的最大似然</p><blockquote><p>这可以简化为寻找最大化潜在变量z的对数似然的对齐</p></blockquote><p><strong>Duration prediction from text</strong><br>计算每个词的帧长可以通过对矩阵A的每列求和得到，但是无法表达一个人每次发出一个词的不同语速<br>所以引入了随机时常预测器，这是一个基于flow模型的生成网络，用极大似然估计训练。<br>但是由于每个音素的输入都是一个离散的整数，而且是标量，需要被解量化<br>引入变分解量化和变分数据增强，做法如下<br>定义两个随机变量 $u,v$ ，他们和时间序列 $d$ 有相同的时间分辨率和维度，分别用于变分解量化和变分数据增强<br>限制 $u$ 的范围为 $u\in [0,1)$ ，故序列 $d-u$ 就是正实数<br>将 $v,d$ 在通道层连接得到一个高维的隐变量<br>这两个变量是从一个近似后验分布 $q_\phi (u,v|d,c_{text})$ 中采样的（这是什么东西<br>从公式可以判断，这两个变量不是完全随机，是和 $d,c_{text}$ 有关系的</p><h3 id="Adversarial-Training"><a href="#Adversarial-Training" class="headerlink" title="Adversarial Training"></a>Adversarial Training</h3><p>应用了两种在语音合成中成功应用的损失：对抗训练的最小二乘损失，训练生成器的额外的特征匹配损失</p><script type="math/tex; mode=display">\begin{aligned}L_{adv}(D) &= \mathbb{E}_{(y,z)}[(D(y)-1)^2 + (D(G(z)))^2]\newlineL_{adv}(G) &= \mathbb(E)_z \left[(D(G(z))-1)^2\right]\newlineL_{fm}(G)  &= \mathbb(E)_{(y,z)}\left[\sum^T_{l=1}\frac{1}{N_l}\Vert D^l(y)-D^l(G(z)) \Vert_1\right]\end{aligned}</script><p>对抗训练的判别器为$D$，生成器为$G$，音频原波形 $y$<br>$T$ 表示判别器总的层数，$D^l$ 输出判别器 $l-th$ 层的特征图<br>这个第三个feature matching loss可以被视作在隐含层的重建损失</p>]]></content>
      
      
      <categories>
          
          <category> 论文笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> #深度学习 </tag>
            
            <tag> TTS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Conda环境迁移</title>
      <link href="/2024/03/25/Conda%E7%8E%AF%E5%A2%83%E8%BF%81%E7%A7%BB/"/>
      <url>/2024/03/25/Conda%E7%8E%AF%E5%A2%83%E8%BF%81%E7%A7%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="Conda环境迁移"><a href="#Conda环境迁移" class="headerlink" title="Conda环境迁移"></a>Conda环境迁移</h1><p>实验室服务器根目录容量快满了，把环境迁移到其他盘<br>首先把自己的环境目录复制到其他盘，可以通过 <code>conda env list</code> 查看<br></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> -r /home/adgroup/anaconda3/envs/yyp /mnt2/anaconda3/envs</span><br></pre></td></tr></tbody></table></figure><br>然后删除自己的原环境（注意这里不要激活自己的环境）<br><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda <span class="built_in">env</span> remove -n yyp</span><br></pre></td></tr></tbody></table></figure><br>然后导入新的环境路径<br><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda config --add envs_dirs /mnt2/anaconda3/envs/yyp</span><br></pre></td></tr></tbody></table></figure><p></p><p>发现pip用不了，会报错：<br></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash: /mnt2/anaconda3/envs/yyp/bin/pip: /home/adgroup/anaconda3/envs/yyp/bin/python: bad interpreter: No such file or directory</span><br></pre></td></tr></tbody></table></figure><br>pip 文件中的 python 路径还是原来的，修改为现在的路径就行<br><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /mnt2/anaconda3/envs/yyp/bin/pip</span><br></pre></td></tr></tbody></table></figure><br>然后将首行的 <code>#!/home/adgroup/anaconda3/envs/yyp/bin/python</code> 改成现在的python路径<code>#!/mnt2/anaconda3/envs/yyp/bin/python</code><p></p>]]></content>
      
      
      <categories>
          
          <category> 技术问题记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> conda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyTorch Lighting框架学习</title>
      <link href="/2024/03/25/PyTorch%20Lighting%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/"/>
      <url>/2024/03/25/PyTorch%20Lighting%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="PyTorch-Lighting框架学习"><a href="#PyTorch-Lighting框架学习" class="headerlink" title="PyTorch Lighting框架学习"></a>PyTorch Lighting框架学习</h1><p>最近在搞一个挑战赛，但是感觉自己写的代码好难看，很混乱，而且大部分还是复用别人的东西，所以打算系统学习一下这个简洁的框架。</p><h2 id="parser"><a href="#parser" class="headerlink" title="parser"></a>parser</h2><p>先把这个学了，然后去看那个参数转实例的<br><a href="https://blog.csdn.net/MengYa_Dream/article/details/124451852">参考链接</a></p><h2 id="dataset"><a href="#dataset" class="headerlink" title="dataset"></a>dataset</h2><p>看一个知乎的<a href="https://zhuanlan.zhihu.com/p/353985363">帖子</a>，讲到的一种项目组织方法：<br></p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">root-</span><br><span class="line">    |-data</span><br><span class="line">        |-__init__.py</span><br><span class="line">        |-data_interface.py</span><br><span class="line">        |-xxxdataset1.py</span><br><span class="line">        |-xxxdataset2.py</span><br><span class="line">        |-...</span><br><span class="line">    |-model</span><br><span class="line">        |-__init__.py</span><br><span class="line">        |-model_interface.py</span><br><span class="line">        |-xxxmodel1.py</span><br><span class="line">        |-xxxmodel2.py</span><br><span class="line">        |-...</span><br><span class="line">    |-main.py</span><br></pre></td></tr></tbody></table></figure><br>我在root下还加了个config.py，上面这种方法，在data_interface和model_interface中，分别写数据集和模型的wrapper，然后在main中用trainer去训练<p></p><p>在mixmatch半监督方法中，会用到标记和未标记两部分数据集，框架支持定义dataloader时返回一个列表或数组：<br></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pytorch_lightning.trainer.supporters <span class="keyword">import</span> CombinedLoader</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">train_dataloader</span>(<span class="params">self</span>):</span><br><span class="line">    loader_a = DataLoader()</span><br><span class="line">    loader_b = DataLoader()</span><br><span class="line">    loaders = {<span class="string">"a"</span>: loader_a, <span class="string">"b"</span>: loader_b}</span><br><span class="line">    combined_loader = CombinedLoader(loaders, mode=<span class="string">"max_size_cycle"</span>)</span><br><span class="line">    <span class="keyword">return</span> combined_loader</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">training_step</span>(<span class="params">self, batch, batch_idx</span>):</span><br><span class="line">    batch_a = batch[<span class="string">"a"</span>]</span><br><span class="line">    batch_b = batch[<span class="string">"b"</span>]</span><br></pre></td></tr></tbody></table></figure><p></p><p>在我这个任务中会涉及到好几个数据集，lightning框架的<code>LightningDataModule</code>提供了一个setup的hook接口，所有的数据集定义，条件选择都在这里做<br></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">setup</span>(<span class="params">self, stage=<span class="literal">None</span></span>):</span><br><span class="line"><span class="comment"># Assign train/val datasets for use in dataloaders</span></span><br><span class="line"><span class="keyword">if</span> self.dataset == <span class="string">'TAU'</span>:</span><br><span class="line"><span class="keyword">if</span> stage == <span class="string">'fit'</span>:</span><br><span class="line">self.trainset = DeltaDataset(self.train_csv, self.fea_path)</span><br><span class="line">self.valset = DeltaDataset(self.val_csv, self.fea_path)</span><br><span class="line"><span class="keyword">if</span> stage == <span class="string">'test'</span>:</span><br><span class="line">self.testset = DeltaDataset(self.test_csv, self.fea_path)</span><br><span class="line"><span class="keyword">if</span> self.dataset == <span class="string">'CAS'</span>:</span><br><span class="line"><span class="keyword">if</span> stage == <span class="string">'fit'</span>:</span><br><span class="line">self.trainset = CASDeltaDataset(self.train_csv, self.fea_path)</span><br><span class="line">self.valset = valdataset(self.val_csv, self.fea_path)</span><br><span class="line">self.unlabelset = unlabeled_CASDeltaDataset(self.unlabel_csv,                                             self.fea_path)</span><br><span class="line">self.iteration = self.unlabelset.__len__()//self.batch_size</span><br><span class="line"><span class="keyword">if</span> stage == <span class="string">'test'</span>:</span><br><span class="line">self.testset = valdataset(self.test_csv, self.fea_path)</span><br></pre></td></tr></tbody></table></figure><p></p><h2 id="model"><a href="#model" class="headerlink" title="model"></a>model</h2><p>model_interface需要做的不仅是包装模型，训练和验证的过程也包含在内，作为<code>LightningModule</code>的子类<code>MInterface</code>的类函数。<br>该类中的几个hook函数如下（不全）<br></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MInterface</span>(pl.LightningModule):</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, model_name:<span class="built_in">str</span>, lr:<span class="built_in">float</span>, mode:<span class="built_in">str</span>, **kargs</span>):</span><br><span class="line"><span class="built_in">super</span>().__init__()</span><br><span class="line"><span class="comment"># 这个可以保存每次训练的超参数到yaml文件，很好用</span></span><br><span class="line">self.save_hyperparameters()</span><br><span class="line">self.init_model()</span><br><span class="line">self.configure_loss()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init_model</span>(<span class="params">self</span>):</span><br><span class="line"><span class="comment"># 初始化模型，看参数然后给self.model一个模型实例</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line"><span class="keyword">return</span> self.model(x)[<span class="string">'logits'</span>]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">configure_loss</span>(<span class="params">self</span>):</span><br><span class="line"><span class="comment"># 配置损失函数，因为训练用到了很多个损失，就搞了个字典存</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">configure_optimizers</span>(<span class="params">self</span>):</span><br><span class="line"><span class="comment"># 看上面的链接，这里可以返回一个优化器，或者优化器和scheduler的列表</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">training_step</span>(<span class="params">self, batch, batch_idx</span>):</span><br><span class="line"><span class="comment"># mixmatch和pretrain的过程的混合，用ifelse区分</span></span><br><span class="line"><span class="comment"># 其实我觉得分别再写两个类函数区分两种训练过程</span></span><br><span class="line"><span class="comment"># 然后在这里调用两个类函数会更好</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">validation_step</span>(<span class="params">self, batch, batch_idx</span>):</span><br><span class="line"><span class="comment"># 验证过程</span></span><br></pre></td></tr></tbody></table></figure><p></p><p>对于训练过程中需要记录的loss等信息，可以使用自带的log，会调用定义Trainer时传入的logger，有两种方法，单值log和字典log<br></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">self.log_dict(log_info, on_step=<span class="literal">True</span>, prog_bar=<span class="literal">True</span>, on_epoch=<span class="literal">True</span>, logger=<span class="literal">True</span>)</span><br><span class="line">self.log(<span class="string">"pretrain_loss"</span>, loss, on_step=<span class="literal">True</span>, on_epoch=<span class="literal">True</span>, prog_bar=<span class="literal">True</span>, logger=<span class="literal">True</span>)</span><br></pre></td></tr></tbody></table></figure><br>当参数 <code>prog_bar=True</code>时，会把这些信息打印到进度条后面，但是有一说一挺丑的。<p></p><h2 id="main"><a href="#main" class="headerlink" title="main"></a>main</h2><p>定义好两个interface时候，在main函数只需要先根据参数定义两个interface的实例，然后：<br></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data_loder = ...</span><br><span class="line">model = MInterface(model_name=args.model, **<span class="built_in">vars</span>(args))</span><br><span class="line">logger = CSVLogger(<span class="string">'./'</span>, <span class="string">'logs'</span>)</span><br><span class="line">trainer = Trainer(accelerator=<span class="string">'cuda'</span>, devices=[<span class="number">1</span>], fast_dev_run=<span class="literal">False</span>, max_epochs=max_epochs, logger=logger)</span><br><span class="line">trainer.fit(model, data_loader)</span><br></pre></td></tr></tbody></table></figure><p></p><p>有几个地方要注意</p><ul><li>Trainer的参数中，accelerator就是训练用的device，后面的devices有如下几种情况<ul><li>使用k个设备训练<code>devices=k</code>(<font color="red">很重要，是大坑</font>)</li><li>使用第k个设备训练<code>devices=[k]</code>，也可以在列表中定义多个设备</li></ul></li><li>Trainer中的<code>fast_dev_run</code>很好用，设为<code>True</code>后会把训练验证测试先按照<code>batch=1</code>跑一轮，验证程序准确性，防止跑完训练验证代码出问题这种很傻逼的情况。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术问题记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> pytorch_lighting </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2024/03/05/ICME%E8%8D%89%E7%A8%BF/"/>
      <url>/2024/03/05/ICME%E8%8D%89%E7%A8%BF/</url>
      
        <content type="html"><![CDATA[<p>先把工作细分<br>数据预处理<br>    抹平分布等<br>    数据增强<br>模型<br>    PaSST<br>    再说，没什么经验</p><p>半监督学习方法<br>    MixMatch<br>    MeanTeacher</p><h2 id="Data-Augment"><a href="#Data-Augment" class="headerlink" title="Data Augment"></a>Data Augment</h2><h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><p>开个写每天干的啥</p><p>3.7<br>调通了baseline模型＋mixmatch半监督学习方法的代码<br>模型准确率呈现先高后低的情况，不知道怎么回事</p><p>3.8<br>样本里基本没有前景声，对于mixup方案是否会有影响？<br>但是这个方案本来就是用在声音场景分类里的，可以试试<br>baseline的acc最高为0.961</p><p>修改baseline的lr策略，从指数退化改成先线性增加再指数退化<br>然后pse_training的时候acc就爆了，不知道为什么</p><p>把baseline训练的max_epoch改成40，acc来到了0.970</p><p>3.10<br>整理实验数据<br>用更大的cnn模型替换baseline模型（？<br>尝试用BEATs提取的特征做分类，加几层线性层做adapter<br>考虑到BEATs在ESC50数据集上已经很强了，有没有必要再finetune？</p><p>3.11<br>重新整理思路<br>半监督：mixmatch<br>        加上数据增强方法（torchaudio现成）<br>域迁移：参考Dcase task1<br>        采集设备域迁移问题<br>backbone：<br>        给定的pretrain数据集+zelda pipeline+2020的task1模型</p><p>Dcase找到的方法的resnet解析<br>首先进行分片，按通道分成两份，Split1和Split2<br>然后是两条路下来，每条路好像是一样的<br></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">respath1 = resnet_layer(num_filters = <span class="number">24</span>, strides=[<span class="number">1</span>,<span class="number">2</span>])(Split1)</span><br><span class="line"><span class="keyword">for</span> stack <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)</span><br><span class="line"><span class="keyword">for</span> res_block <span class="keyword">in</span> <span class="built_in">range</span>(num_res_blocks = <span class="number">2</span>)</span><br><span class="line">strides = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> stack &gt; <span class="number">0</span> <span class="keyword">and</span> res_block == <span class="number">0</span>:</span><br><span class="line">strides = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">convpath1 = self.resnetpath1[]</span><br></pre></td></tr></tbody></table></figure><p></p><p>每个stack，num_filters x 2</p><p>第一个stack，stride=1<br>之后的stack，第一个res_block的strides=[1,2]，num_filters倍增<br>这样做会让通道变多，时间维度变小<br>之后每个stack的第一个res_block会加avgPooling和padding</p><p>3.13<br>预训练，半监督训练了昨天写的ResNet<br>结果<br></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">val_loss:0.11   val_acc:99.71</span><br></pre></td></tr></tbody></table></figure><p></p><p>相较第一版一共做了以下修改：</p><ul><li>更换模型</li><li>修改输入（加入了一阶和二阶差分特征）</li><li>添加mix-match数据增强方法</li></ul><p>TODO：<br>    增加应对域迁移的数据处理方法<br>    增加测试模型数量</p><p>打算加一个Hu等人的（上面抄的ResNet）的另一个fCNN模型<br>搞出来100准确率难绷</p><p>加上域迁移的方法<br>初步设想是对于标签数据，采用先抽一个标签，然后在相同标签中抽两个样本混合的方法</p><p>下面找的是处理域迁移的方法：</p><h2 id="残差正则化"><a href="#残差正则化" class="headerlink" title="残差正则化"></a>残差正则化</h2><p><a href="https://dcase.community/documents/challenge2021/technical_reports/DCASE2021_Kim_36_t1.pdf">https://dcase.community/documents/challenge2021/technical_reports/DCASE2021_Kim_36_t1.pdf</a><br>报告中指出，设备之间的差异主要体现在频域上，为了得到音频的泛化特征，使用（instance normalization by frequency）</p><script type="math/tex; mode=display">\begin{aligned}FreqIN(x) &=\frac{x-\mu_{nf}}{\sqrt{\sigma^2_{nf}+\epsilon}}\newline\mu_{nf} &=\frac{1}{CT}\sum^C_{c=1}\sum^T_{t=1}x_{ncft}\newline\sigma^2_{nf} &= \frac{1}{CT}\sum^C_{c=1}\sum^T_{t=1}(x_{ncft}-\mu_{nf})^2\end{aligned}</script><p>报告提到直接使用这个会丢失分类的有效信息，所以加了个超参数，最后的方法：</p><script type="math/tex; mode=display">ResNorm(x) = \lambda\cdot x + FreqIN(x)</script><p>沟槽的<br>整理一下已有的信息</p><p>只有所有城市混合的数据和对应的场景标签<br>INSURE这篇文章使用到了域分类器，需要数据的域标签<br>是否可以根据分类模型的输出，将同类的音频都分成不同的域</p><p>瞎几把想的方法：在特征上算两个同标签样本输出特征，计算压缩后的距离算loss？（结果没用<br>修改差分特征的添加方法：在数据增强操作之后添加差分特征</p><p>对同类不同城市的数据分类，找出城市的共通特征？<br>但是不同类别同一城市的特征也不一样</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ICME2024介绍</title>
      <link href="/2024/02/26/ICME2024%E4%BB%8B%E7%BB%8D/"/>
      <url>/2024/02/26/ICME2024%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="ICME2024介绍"><a href="#ICME2024介绍" class="headerlink" title="ICME2024介绍"></a>ICME2024介绍</h1><p>题目：在域转移下的半监督声学场景分类（ Semi-Supervised Acoustic Scene Classification Under Domain Shift）</p><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>声学场景分类（ASC）：在环境中的预定义类中识别一个声学场景，比如广场，街道，餐厅<br>在ASC的深度学习方法的发展中产生了两个关键的考虑</p><ul><li>domain shift</li><li>标记数据的稀缺<br>比赛建议大家从半监督学习入手</li></ul><h2 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h2><p>Chinese Acoustic Scene(CAS) 2023 dataset<br>超过130小时，使用三个工业级的录音设备，从中国22个城市采集的10个不同的声学场景<br>每个声音片段为10s，有位置和时间戳等元数据<br>采集时间为2023年四月到九月</p><p>训练集有24小时，来自8个城市，有20%的带标签数据<br>测试集从12个城市中选择，有5个未见城市用于评估域转移<br><img src="/2024/02/26/ICME2024%E4%BB%8B%E7%BB%8D/image-20240226105436274.png" alt=""></p><h2 id="Baseline"><a href="#Baseline" class="headerlink" title="Baseline"></a>Baseline</h2><p>pipeline如下<br><img src="/2024/02/26/ICME2024%E4%BB%8B%E7%BB%8D/image-20240226110142095.png" alt=""></p><h3 id="基线模型架构"><a href="#基线模型架构" class="headerlink" title="基线模型架构"></a>基线模型架构</h3><p>包括两个SE块，一个Transformer encoder<br>SE block: 两个卷积层，通道数相同，kernel3x3<br>两个块的通道分别为64和128<br>每个块后面都有一个平均池化层，kernel2x2<br>Transformer：number of head 8，layers 1，全连接层单元数32<br>沿着时间框架的最大聚合以及一个完全连接的层被应用于获得输出</p><h3 id="实验设置"><a href="#实验设置" class="headerlink" title="实验设置"></a>实验设置</h3><p>使用 log mel作为输入特征</p><ul><li>重采样到44100HZ</li><li>40ms汉宁窗，20ms步长，60Mel-filter bands</li><li>logmel 大小为500x64</li><li>fine-tune阶段使用Adam优化器，0.001 learning rate 32batch size</li></ul><h3 id="评估"><a href="#评估" class="headerlink" title="评估"></a>评估</h3><p>使用各类准确率的平均值计算</p><script type="math/tex; mode=display">Accuracy=\frac{1}{N}\sum^{N}_{i=1}Accuracy_{i}</script><p>其中N是类别数<br><img src="/2024/02/26/ICME2024%E4%BB%8B%E7%BB%8D/image-20240226111524736.png" alt=""></p><p>baseline源论文中用的损失是分类交叉熵<br><img src="/2024/02/26/ICME2024%E4%BB%8B%E7%BB%8D/image-20240226154106221.png" alt=""></p><p>baseline中使用的数据增强方法FMix</p><ul><li>随机采样复数矩阵 $\boldsymbol{Z}\in\mathbb{C}^{T\times F}$ 和输入的梅尔谱图 $\boldsymbol{X}$ 形状相同</li><li>对 $\boldsymbol{Z}$ 使用低通滤波器</li><li>对 $\boldsymbol{Z}$ 的复数部分使用反向傅里叶变换❓，取实部得到灰度图</li><li>对灰度图的top n元素置1，其余置0，得到一个01mask<br><img src="/2024/02/26/ICME2024%E4%BB%8B%E7%BB%8D/image-20240226155349182.png" alt=""></li></ul><h1 id="半监督学习方法"><a href="#半监督学习方法" class="headerlink" title="半监督学习方法"></a>半监督学习方法</h1><p>参考文献：<a href="https://zhuanlan.zhihu.com/p/138085660">知乎</a></p><h2 id="伪标签（Pseudo-Label）"><a href="#伪标签（Pseudo-Label）" class="headerlink" title="伪标签（Pseudo-Label）"></a>伪标签（Pseudo-Label）</h2><p><img src="/2024/02/26/ICME2024%E4%BB%8B%E7%BB%8D/image-20240227115130202.png" alt=""><br> 感觉就是用有标签数据训练模型，然后去预测无标签数据，然后用无标签数据的预测标签继续训练，在此技术上加上一个时变参数控制伪标签数据对模型的影响</p><blockquote><p><strong>不足</strong>：Pseudo-Label 方法只在训练时间这个维度上，采用了退火思想，即采用时变系数α(t)。而在伪标签这个维度，对于模型给予的预测标签一视同仁，这种方法在实际中存在明显问题。很显然，如果模型对于一个样本所预测的几个类别都具有相似的低概率值，如共有十个类别，每个类别的预测概率值都接近 0.1，那么再以最大概率值对应的类别作为伪标签，是不合适的，将会引入很大的错误信号。</p></blockquote><h2 id="Γ-Model：Semi-supervised-learning-with-ladder-networks"><a href="#Γ-Model：Semi-supervised-learning-with-ladder-networks" class="headerlink" title="Γ Model：Semi-supervised learning with ladder networks"></a>Γ Model：Semi-supervised learning with ladder networks</h2><p>思路：为了结局有监督和无监督之间的冲突，无监督学习希望尽可能保留原始信息，监督学习则主要保留和监督任务相关的信息。<br>网络结构<br><img src="/2024/02/26/ICME2024%E4%BB%8B%E7%BB%8D/image-20240227164516711.png" alt=""><br>对于有标签数据，流经Encoder后通过顶层输出构造和原数据标签的目标函数<br>对于无标签数据，数据经过Encoder后经过Decoder逐层解码，并获得一系列的隐层表示，然后同右侧的无噪前向网络计算均方误差，这里每一层的隐层表示就是保证无监督学习对源数据全部信息的学习。</p><h2 id="Π-Model-amp-Temporal-ensembling-Model：Temporal-ensembling-for-semi-supervised-learning"><a href="#Π-Model-amp-Temporal-ensembling-Model：Temporal-ensembling-for-semi-supervised-learning" class="headerlink" title="Π Model &amp; Temporal ensembling Model：Temporal ensembling for semi-supervised learning"></a>Π Model &amp; Temporal ensembling Model：Temporal ensembling for semi-supervised learning</h2><p><img src="/2024/02/26/ICME2024%E4%BB%8B%E7%BB%8D/image-20240227171355133.png" alt=""><br>感觉思想也很简单，首先对于每个数据 $x_i$ ，做两次前向运算，一次前向运算包括两个步骤，随机增强变换和带Dropout的模型前向运算，引入的随机性会让两次计算的输出不同，接下来分情况</p><ul><li>如果是带标签数据，则对于两个输出，算两次，第一次随便取一个输出和标签做交叉熵，第二次两个输出之间算均方误差</li><li>如果是无标签数据，计算两个输出之间的均方误差</li></ul><p>对于 Temporal ensembling Model，其整体框架与 Π Model 类似，在获取无标签数据的信息上采用了相同的思想，唯一的不同是：</p><ul><li>在目标函数的无监督一项中， Π Model 是两次前向计算结果的均方差。而在 temporal ensembling 模型中，采用的是当前模型预测结果与历史预测结果的平均值做均方差计算。</li></ul><h2 id="VAT：Virtual-Adversarial-Training-a-Regularization-Method-for-Supervised-and-Semi-supervised-Learning"><a href="#VAT：Virtual-Adversarial-Training-a-Regularization-Method-for-Supervised-and-Semi-supervised-Learning" class="headerlink" title="VAT：Virtual Adversarial Training: a Regularization Method for Supervised and Semi-supervised Learning"></a>VAT：Virtual Adversarial Training: a Regularization Method for Supervised and Semi-supervised Learning</h2><p>思路：模型所描述的系统应该是光滑的，因此当输入数据发生微小变化时，模型的输出也应是微小变化，进而其预测的标签也近似不变。<br>根据这个思路，引入对抗噪声的概念，优化目标包括三个部分</p><ul><li>有标签数据的交叉熵</li><li>无标签数据的一致正则项<br><img src="/2024/02/26/ICME2024%E4%BB%8B%E7%BB%8D/image-20240227184307486.png" alt=""><br>其中 $r_{adv}$ 代表对输入数据所施加的对抗噪声，$D$ 是模型对于施加噪声前后两个输入对应输出的非负度量（比如MSE或KL散度）</li><li>熵最小化<br><img src="/2024/02/26/ICME2024%E4%BB%8B%E7%BB%8D/image-20240227184609361.png" alt=""><blockquote><p>结果：VAT 所用到的 一致性正则 和 最小熵正则 对于从无标签数据中挖掘信息提升模型泛化能力，都有显著的作用。</p></blockquote></li></ul><h2 id="Mean-Teacher：Mean-teachers-are-better-role-models-Weight-averaged-consistency-targets-improve-semi-supervised-deep-learning-results"><a href="#Mean-Teacher：Mean-teachers-are-better-role-models-Weight-averaged-consistency-targets-improve-semi-supervised-deep-learning-results" class="headerlink" title="Mean Teacher：Mean teachers are better role models: Weight-averaged consistency targets improve semi-supervised deep learning results"></a>Mean Teacher：Mean teachers are better role models: Weight-averaged consistency targets improve semi-supervised deep learning results</h2><p><img src="/2024/02/26/ICME2024%E4%BB%8B%E7%BB%8D/image-20240227190323213.png" alt=""></p><blockquote><p><a href="https://zhuanlan.zhihu.com/p/577959642">https://zhuanlan.zhihu.com/p/577959642</a></p></blockquote><h2 id="MixMatch-A-Holistic-Approach-to-Semi-Supervised-Learning"><a href="#MixMatch-A-Holistic-Approach-to-Semi-Supervised-Learning" class="headerlink" title="MixMatch: A Holistic Approach to Semi-Supervised Learning"></a>MixMatch: A Holistic Approach to Semi-Supervised Learning</h2><p><img src="/2024/02/26/ICME2024%E4%BB%8B%E7%BB%8D/image-20240227190946017.png" alt=""><br>优化目标还是两项，有标签数据的交叉熵，无标签数据和伪标签之间的均方误差<br>然后中间套用了不同的数据增强方法还有最后的概率锐化<br>看不太懂，要用的时候看<a href="https://zhuanlan.zhihu.com/p/499870071">知乎</a></p><h2 id="Unsupervised-Data-Augmentation-for-Consistency-Training"><a href="#Unsupervised-Data-Augmentation-for-Consistency-Training" class="headerlink" title="Unsupervised Data Augmentation for Consistency Training"></a>Unsupervised Data Augmentation for Consistency Training</h2><p><img src="/2024/02/26/ICME2024%E4%BB%8B%E7%BB%8D/image-20240227192141066.png" alt=""><br>几乎完全一样的框架，重点在数据增强</p><blockquote><ul><li>采用了最先进的数据增强技术，在CV上运用了19年刚被提出来的 RandAugment，在NLP上则综合运用了 Back Translation 和 非核心词替换。这些技术可以保证无标签数据在语义不变的情况下，极大地丰富数据的表现形式。这使得 Consistency Regulation 可以从无标签数据中更有效地捕捉到数据的内在表示，这一点是早前如 Π Model 所无法实现的。</li><li>采用了最新的迁移学习模型。在文本分类任务上，研究人员采用 BERT-large 作为基础模型进行微调，由于 BERT 已经在海量数据上进行了预训练，本身在下游任务上就只需要少量数据，再与 UDA 合力，因而可以在 20条有标签数据上实现 SOTA 的表现。</li><li>采用了一系列精心设计的训练技巧。这包括平衡控制有监督信号和无监督信号的 TSA 技术，基于 Entropy Regularization 的锐化技术，无标签数据的二次筛选 等等。这些技巧或许是打败同年出生的 MixMatch 的主要原因。</li></ul></blockquote><p>看完之后我的总结<br>一致性原则+熵最小化原则</p><h1 id="工作准备"><a href="#工作准备" class="headerlink" title="工作准备"></a>工作准备</h1><h2 id="数据集-1"><a href="#数据集-1" class="headerlink" title="数据集"></a>数据集</h2><ul><li>[x] ASC development dataset</li><li>[ ] TAU UAS 2020 Mobile development dataset</li><li>[ ] CochlScene dataset</li></ul><h2 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h2><h3 id="BEATS"><a href="#BEATS" class="headerlink" title="BEATS"></a>BEATS</h3><p>这是去年看到的一个SED任务的SoTA方法，有无标签数据预训练的部分和有标签数据微调部分<br><img src="/2024/02/26/ICME2024%E4%BB%8B%E7%BB%8D/image-20240228161332873.png" alt=""></p><h4 id="Iterative-Audio-Pre-training"><a href="#Iterative-Audio-Pre-training" class="headerlink" title="Iterative Audio Pre-training"></a>Iterative Audio Pre-training</h4><h1 id="Dcase以前的方法"><a href="#Dcase以前的方法" class="headerlink" title="Dcase以前的方法"></a>Dcase以前的方法</h1><h2 id="Task4"><a href="#Task4" class="headerlink" title="Task4"></a>Task4</h2><p>SubtaskA: The goal of the task is to evaluate systems for the detection of sound events using real data either weakly labeled or unlabeled and simulated data that is strongly labeled (with time stamps).<br>SubtaskB: The goal of this task is to evaluate systems for the detection of sound events that use softly labeled data for training in addition to other types of data such as weakly labeled, unlabeled or strongly labeled. The main focus of this subtask is to investigate whether using soft labels brings any improvement in performance.</p><h3 id="Minjun-Chen等人"><a href="#Minjun-Chen等人" class="headerlink" title="Minjun Chen等人"></a>Minjun Chen等人</h3><p>对于子任务A，主要关注使用预训练模型，通过self-training的方式，训练多个不同架构的模型，然后做一个ensemble。（但是规则里说不能用model ensemble）<br>子任务A的三个模型</p><ul><li>SK-FD-CRNN</li><li>FT-BEATs</li><li>FT-BEATs-AST</li></ul><p>对子任务B</p><ul><li>为了平衡不同类别数据量之间的差异，对数据量小的类别做数据增强<h4 id="Proposed-Method"><a href="#Proposed-Method" class="headerlink" title="Proposed Method"></a>Proposed Method</h4><h5 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h5>对于SubtaskA，128mel-bins, 256 hop-length, 2048 windows-length<br>对于SubtaskB，巴拉巴拉</li></ul><h5 id="迭代自训练策略"><a href="#迭代自训练策略" class="headerlink" title="迭代自训练策略"></a>迭代自训练策略</h5><ul><li>使用所有SESED数据集的数据和AS的强标签数据训练三个架构的模型</li><li>ensemble这些模型，为弱标签和没标签的数据生成伪标签</li><li>在生成伪标签的过程中，使用<code>class-wise fine-tuned thresholds and median filter length</code></li><li>伪标签子集被用来迭代地训练或者微调模型</li></ul><h5 id="模型-1"><a href="#模型-1" class="headerlink" title="模型"></a>模型</h5><p>taskA的三个模型<br><strong>SK-FD-CRNN</strong>: 使用frequency dynamic convolution（FDY-CRNN）和selective kernel attention（SKA）来替换正常的7层CNN网络中的卷积，并且融合BEATs提取的特征。融合方法为(pool1d and interpolate）<br><img src="/2024/02/26/ICME2024%E4%BB%8B%E7%BB%8D/image-20240229113929993.png" alt=""></p><p><strong>FT-BEATs</strong>: 在BEATs的后面接了一个四层的Bi-GRU和一个线性层作为输出，使用较小的学习率训练所有参数</p><p><strong>FT-BEATs-AST</strong>: 看描述是AST预训练模型和BEATs是平行的，然后二者的输出由一个平均池化层融合，学习率为0.0001</p><p>训练上面三个模型的时候都使用了mean-teacher半监督学习框架</p><p>taskB的模型如下<br><img src="/2024/02/26/ICME2024%E4%BB%8B%E7%BB%8D/image-20240229150039938.png" alt=""><br>没懂，图里和描述不一样<br>描述说用一个decoder将AST提取的embeddings转换为逐帧的输出，就是图里上面那个框<br>两部分，一个是双向门限循环单元（biGRU），和一个线性层</p><h5 id="数据增强"><a href="#数据增强" class="headerlink" title="数据增强"></a>数据增强</h5><p>就是为了解决<code>class-wise</code>这个问题，然后发现mix-up方法效果最好，具体怎么mix的也没说<br>还有一种方法是oversampling</p><h5 id="后处理"><a href="#后处理" class="headerlink" title="后处理"></a>后处理</h5><p>对不同的声音事件使用不同的中值滤波器窗长<br>使用一个tagging mask strategy来过来taskA中的<code>strong predictions</code>（❓）指logits高的吗<br>使用两组超参数，训练两组模型，第一组的训练目标是PSDS2分数，第二组是PSDS1分数（这都是什么指标<br>两组的时间分辨率也不一样，第一组39帧，第二组156帧（这个是指一个样本分的帧数吗？</p><h4 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h4><p>我看提交的全是ensemble的</p><h3 id="Han-Yin等人"><a href="#Han-Yin等人" class="headerlink" title="Han Yin等人"></a>Han Yin等人</h3><p>只做taskB</p><ul><li>首先，使用temporal Mixup做数据增强</li><li>提出了一个one-branch SED system和四个two-branch SED system能够使用软标签训练。</li><li>用一个注意力块加到two-branch中做信息融合</li></ul><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><h5 id="Temporal-Mixup"><a href="#Temporal-Mixup" class="headerlink" title="Temporal Mixup"></a>Temporal Mixup</h5><p>对于两个相同声学场景的不同样本，算加权和</p><script type="math/tex; mode=display">X_{new}=\epsilon X_1 +(1-\epsilon) X_2</script><p>对应软标签也一样算加权和</p><h5 id="One-branch-SED-system"><a href="#One-branch-SED-system" class="headerlink" title="One-branch SED system"></a>One-branch SED system</h5><p><img src="/2024/02/26/ICME2024%E4%BB%8B%E7%BB%8D/image-20240229155348133.png" alt=""><br>原来单支指的是一条路下来<br>这个Conformer block指路另一篇论文</p><h5 id="Two-branch-SED-Systems"><a href="#Two-branch-SED-Systems" class="headerlink" title="Two-branch SED Systems"></a>Two-branch SED Systems</h5><p><img src="/2024/02/26/ICME2024%E4%BB%8B%E7%BB%8D/image-20240229170158483.png" alt=""><br>四种模式，最后对两个输出做不同维度（软硬度，事件维度，帧级维度）的注意力加权，加权系数是可学习的</p><h4 id="实验-1"><a href="#实验-1" class="headerlink" title="实验"></a>实验</h4><p>时域混合了这么多<br><img src="/2024/02/26/ICME2024%E4%BB%8B%E7%BB%8D/image-20240229172710543.png" alt=""><br>训练参数：<br>梅尔：11025步长，22050窗长（500ms）<br>5折交叉验证</p><h5 id="后处理-1"><a href="#后处理-1" class="headerlink" title="后处理"></a>后处理</h5><p>按照不同场景不太可能会出现的声音事件设计mask，引入先验知识</p><h3 id="Xuenan-Xu等人"><a href="#Xuenan-Xu等人" class="headerlink" title="Xuenan Xu等人"></a>Xuenan Xu等人</h3><p>指出了某些声音事件只会发生在某些场景中，所以在不同场景下训练不同的模型<br>主要探索将大规模数据集上通过自监督学习学到的知识转移到这个任务中</p><h4 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h4><h5 id="预训练音频表示"><a href="#预训练音频表示" class="headerlink" title="预训练音频表示"></a>预训练音频表示</h5><p>对BEATs进行改良，首先在AS上训练，然后使用BEATs生成音频特征<br>考虑了两种预训练特征<br><strong>Clip-level Pre-trained Features</strong>: 在整个序列上使用平均池化来获得<code>Clip-level pre-traind feature</code>。❓将全局特征与每个帧级的FBank特征连接起来，然后送入后续的网络<br><strong>Frame-Level Pre-trained Features</strong>: BEATs模型生成的stride为20ms的特征被直接用于LSTM架构</p><h5 id="SED-Model"><a href="#SED-Model" class="headerlink" title="SED Model"></a>SED Model</h5><p>两种结构（怎么不给个图<br><strong>CRNN</strong>: 将每层的<code>Clip-level BEATs embeddings</code>聚合得到一个单独的clip-levelembedding<br>然后将这个embedding和baseline的卷积块输出串联，使用GRU算概率</p><p><strong>LSTM</strong>: 使用上面第二个帧级特征，每层的连接，然后送入LSTM</p><h2 id="Task1"><a href="#Task1" class="headerlink" title="Task1"></a>Task1</h2><p>低复杂度ASC，但是ICME好像没有复杂度要求</p><h4 id="Jiaxin-Tan等人"><a href="#Jiaxin-Tan等人" class="headerlink" title="Jiaxin Tan等人"></a>Jiaxin Tan等人</h4><p>利用Deep separable convolution将卷积分成几块，比传统卷积的参数和计算开销更小<br>最主要的就是把传统卷积换成了blueprint separable convolution<br>然后用知识蒸馏压缩模型<br>教师模型如下<br><img src="/2024/02/26/ICME2024%E4%BB%8B%E7%BB%8D/image-20240304152830021.png" alt=""><br>学生模型如下<br><img src="/2024/02/26/ICME2024%E4%BB%8B%E7%BB%8D/image-20240304152903466.png" alt=""><br>蒸馏方式是标准方式<br><img src="/2024/02/26/ICME2024%E4%BB%8B%E7%BB%8D/image-20240304152938987.png" alt=""></p><h3 id="Yiqiang-Cai等人"><a href="#Yiqiang-Cai等人" class="headerlink" title="Yiqiang Cai等人"></a>Yiqiang Cai等人</h3><p>还是用的separable convolutional layers加知识蒸馏<br>在Residual Normalization layer中加入了一些可学习的参数，进一步提高了性能<br>通过引入用于数据增强的设备仿真提高设备域泛化能力（这个可以学习，对非分类要素进行特定方向的数据增强抹平分布差异）<br>采用不同的数据增强策略，解决过拟合问题</p><p>ICME的数据集都是用同一种设备采集的，故设备模拟好像没必要</p><p>使用两种数据增强方法：<br>Mixup：线性差值两个随机样本<br>Freq-MixStyle：对频带进行归一化</p><p>模型主要以时频分离卷积模块为基础<br><img src="/2024/02/26/ICME2024%E4%BB%8B%E7%BB%8D/image-20240304163042915.png" alt=""></p><h4 id="自适应残差归一化（Adaptive-Residual-Normalization）"><a href="#自适应残差归一化（Adaptive-Residual-Normalization）" class="headerlink" title="自适应残差归一化（Adaptive Residual Normalization）"></a>自适应残差归一化（Adaptive Residual Normalization）</h4><p>用于保证训练过程中残差的数值稳定性？<br>频域实例标准化（frequency-instance normalization）</p><script type="math/tex; mode=display">FreqIN(x)=\frac{x-\mu_{nf}}{\sqrt{\sigma^2_{nf}+\epsilon}}</script><script type="math/tex; mode=display">AdaResNorm(x)=(\rho \cdot x +(1-\rho)\cdot FreqIN(x))\cdot \gamma +\beta</script><p>其中 $\rho,\gamma,\beta$ 都是可学习的参数，该处理被放在第一层卷积和每个TF-SepConv 块后</p><p>Loss包含两部分，学生模型的输出和标签ground truth之间的交叉熵，学生模型的输出和教师模型的输出之间软标签的KL散度</p><script type="math/tex; mode=display">L=L_{label}+\lambda L_{dist}</script><h3 id="Schmid等人"><a href="#Schmid等人" class="headerlink" title="Schmid等人"></a>Schmid等人</h3><p>才发现task1的模型大小限制为128kb<br>数据预处理，看不懂这写的啥</p><blockquote><p>For all models, we randomly roll the waveform over time with a maximun shift of 125ms.<br>   对于CP-Mobile和PaSST，还使用了最大大小为48Mel bin大小的频域掩蔽，并通过随机改变Mel滤波器组的最大频率来应用patch shifting。</p></blockquote><p>shifted crops<br>TAS UAS2022和TAU20的数据集内容是一样的，但是前者把后者10s一段的样本分成了1s一段的样本，所以可以把他们重新拼成10s的片段<br>然后使用0.5s的步长循环移位切割10s音频段，作为数据增强<br>还说什么相比于随机1s片段，可以先计算教师模型的预测，然后离线做知识蒸馏，感觉没什么说法</p><p>Freq-MixStyle<br>对频谱图中的频段进行归一化处理，然后利用两个频谱图的混合频率统计量对其进行反归一化处理❓<br>然后是设备方面的增强（Device Impulse Response Augmentation）感觉没什么用就不看了</p><p>教师模型选的是PaSST和CP-ResNet的ensemble</p>]]></content>
      
      
      <categories>
          
          <category> 声学相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> 声音事件检测 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>未命名音频生成工作汇总</title>
      <link href="/2024/02/02/%E9%9F%B3%E9%A2%91%E7%94%9F%E6%88%90%E5%B7%A5%E4%BD%9C%E6%B1%87%E6%80%BB/"/>
      <url>/2024/02/02/%E9%9F%B3%E9%A2%91%E7%94%9F%E6%88%90%E5%B7%A5%E4%BD%9C%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="音频生成工作汇总"><a href="#音频生成工作汇总" class="headerlink" title="音频生成工作汇总"></a>音频生成工作汇总</h1>]]></content>
      
      
      <categories>
          
          <category> 论文笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 论文 </tag>
            
            <tag> 生成 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Few-shot SED相关论文</title>
      <link href="/2024/01/18/Few-shot%20SED%E7%9B%B8%E5%85%B3%E8%AE%BA%E6%96%87/"/>
      <url>/2024/01/18/Few-shot%20SED%E7%9B%B8%E5%85%B3%E8%AE%BA%E6%96%87/</url>
      
        <content type="html"><![CDATA[<h1 id="Few-shot-SED相关论文"><a href="#Few-shot-SED相关论文" class="headerlink" title="Few-shot SED相关论文"></a>Few-shot SED相关论文</h1><h1 id="技术报告"><a href="#技术报告" class="headerlink" title="技术报告"></a>技术报告</h1><p>注重少样本，低延迟在实验里体现</p><p>少样本找few shot SED的论文改一改</p><p>国内外研究现状</p><p>Method</p><p>实验</p><h2 id="少样本低延时声音事件检测系统"><a href="#少样本低延时声音事件检测系统" class="headerlink" title="少样本低延时声音事件检测系统"></a>少样本低延时声音事件检测系统</h2><h3 id="Few-shot-sound-event-detection（ICASSP-2020）"><a href="#Few-shot-sound-event-detection（ICASSP-2020）" class="headerlink" title="Few shot sound event detection（ICASSP 2020）"></a>Few shot sound event detection（ICASSP 2020）</h3><p>现代的基于深度学习的声音事件识别和检测方法，主要需要大量的训练数据或者在特定的下游任务上微调模型。</p><p>因此，对于检测未收录的或者比较稀有的声音类别限制很大（因为样本很少）。在（11）中，提出了使用少量数据用于训练声音分类器的不同策略，然而，这项工作主要侧重于处理训练过程中有限的数据，然而我们的目标是训练在推理遇到的很少样本的时可以泛化到<code>unsean classes</code>的模型。</p><p>传统的few-shot learning 方法考虑了一个 C-way k-shot 分类任务作为一个闭合集分类问题，这种方法使用C个唯一类标签分别作为音频查询（query）的标签，对于每个类别，给定 K 个标记的样本，其中C是固定的（有点像什么K means聚类）然而，few-shot learning尚未应用于开放集问题，例如声音事件检测，需要从一系列位置的声音中检测先前从未见过的目标声音，这些声音来自无限数量的声音类。</p><p>本文贡献：</p><ul><li><p>将基于先验度量的少样本学习方法应用于开放集声音事件检测任务</p></li><li><p>提出了一种在推理时需要的自动构建标记负样本的方法</p></li><li><p>提出了一种推理时数据增强方法来提高检测准确性</p></li></ul><h4 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h4><p><img src="/2024/01/18/Few-shot%20SED%E7%9B%B8%E5%85%B3%E8%AE%BA%E6%96%87/image-20240113162118429.png" alt="image-20240113162118429"></p><p>就是计算特征然后算不同特征的相似度</p><p>这是基本的C-way k-shot分类</p><p>本文的方法是在这个基础上套一层，把每轮训练作为一个单独的C-way k-shot过程，每次从大数据集里随机抽C个类别，使用这C个类别的C×k个样本和从query集 Q 中抽取的 q 个样本算预测误差</p><h3 id="FEW-Shot-Continual-Learning-with-Weight-Alignment-and-Positive-Enhancement-for-Bioacoustic-Event-Detection"><a href="#FEW-Shot-Continual-Learning-with-Weight-Alignment-and-Positive-Enhancement-for-Bioacoustic-Event-Detection" class="headerlink" title="FEW-Shot Continual Learning with Weight Alignment and Positive Enhancement for Bioacoustic Event Detection"></a>FEW-Shot Continual Learning with Weight Alignment and Positive Enhancement for Bioacoustic Event Detection</h3><p>重点在SSL on abundant labeled data，few shot 的能力是靠大规模音频模型实现的</p><p>在追求生物声学的FSL进步的过程中，Ghani等人[5]表明，来自大规模音频模型的嵌入，特别是BirdNet和Google Perch，使用监督学习对鸟类声音进行训练，在生物声学少量分类任务中表现出很强的性能。考虑到FSL用于音频分类的范围更广，MetaAudio[6]提出了一个基于少镜头分类数据集的基准，涵盖了包括鸟鸣在内的多种声音域。作者将BirdCLEF 2020[2]的训练集分成三组不同的类，分别代表新的训练集、验证集和测试集。目标是从一组类中转移知识，解决n-way k-shot声音分类的挑战。</p><h3 id="Few-shot-continual-learning-for-audio-classification（ICASSP-2021）"><a href="#Few-shot-continual-learning-for-audio-classification（ICASSP-2021）" class="headerlink" title="Few shot continual learning for audio classification（ICASSP 2021）"></a>Few shot continual learning for audio classification（ICASSP 2021）</h3><p>监督学习对于真实场景需要人工手动添加新出现的声音事件类</p><p>作为替代，few-shot learning 被用于音频分类和声音事件检测。在不同的few-shot learning方法中，metric-based prototypical networks被证明在音频上有很好的性能。然而，few-shot方法不维护训练数据类别表，需要手动标记所有新的类以进行部署，这对于大量分类类别问题来说压力很大。</p><p>相比之下，持续学习是一种在线学习策略，其中算法寻求不断适应一系列任务，并在所有任务中表现良好而不会忘记。已经提出音频分类和声音事件检测学习新的声音事件而不忘记以前学习的声音事件。然而，当引入新类、复杂的训练过程或大量新类的标记数据时，持续学习方法通常需要重新训练，这对于资源受限的计算环境或音频域的实际应用并不理想。</p><p>近年来，新出现的研究领域是few-shot continuous learning，它结合了上述方法的优点，目的是在推理时基于少量数据不断扩展分类器的能力。这使得最终用户能够快速和交互式地更新模型。在这项工作中，我们利用之前提出的动态few-shot学习技术(DFSL)引入了一个少镜头连续学习音频分类框架</p><p><img src="/2024/01/18/Few-shot%20SED%E7%9B%B8%E5%85%B3%E8%AE%BA%E6%96%87/image-20240117163224699.png" alt="image-20240117163224699"></p><p>首先，我们用大量的例子在基类上训练分类器，并在推理时对其进行扩展，使其在不忘记基类的情况下，基于少量标记数据识别以前未见过的新类。我们通过更新DFSL中的问题定义和Loss，以及将最新的最先进的音频特征提取模型[29]作为主干来解决音频特定的挑战，包括多标签和弱标签。我们在两个流行的音频数据集上对我们的方法进行了比较分析，提供了对基本类和新类性能的深入评估，以阐明问题的难点。据我们所知，这是第一次将少量连续学习引入音频领域。</p><h3 id="A-Task-Specific-Meta-Learning-Framework-for-Few-Shot-Sound-Event-Detection（MMSP-2022）"><a href="#A-Task-Specific-Meta-Learning-Framework-for-Few-Shot-Sound-Event-Detection（MMSP-2022）" class="headerlink" title="A Task-Specific Meta-Learning Framework for Few-Shot Sound Event Detection（MMSP 2022）"></a>A Task-Specific Meta-Learning Framework for Few-Shot Sound Event Detection（MMSP 2022）</h3><p>Meta-learning是解决few-shot learning的关键，然而由于该方法直到最近几年才受到SED的关注，因此在现有的文献中很少有针对few-shot SED的研究。Shi[10]比较了传统的监督方法和各种元学习方法在few-shot SED中的应用。实验结果表明，元学习模型具有较好的性能。Yang[11]提出了一种将元学习与换能性推理相结合的方法来解决少镜头SED问题。他们方法的核心思想是利用未标记数据的统计数据。Wang[12]成功地将基于度量的元学习方法应用于一个开放集few-shot SED问题</p><p>在基础类别上训练的embedded network面对未见过的类别，性能下降会很严重。本文提出了一个特定任务的原学习框架（task-specific meta-learning framework）用于few-shot Learning。</p><ul><li><p>TSMLF继承了ProtoNet的meta-train过程，然后在meta-test阶段，最大化类间距离，最小化类内距离利用支持集来微调embedded network。通过微调，嵌入空间中meta-test 类别的可分离性显著增强，有助于分类器识别未见类别。</p></li><li><p>过度微调会过拟合，所以设置了一个类内距离的距离约束。</p></li></ul><h3 id="A-mutual-learning-framework-for-few-shot-sound-event-detection-ICASSP-2022"><a href="#A-mutual-learning-framework-for-few-shot-sound-event-detection-ICASSP-2022" class="headerlink" title="A mutual learning framework for few-shot sound event detection(ICASSP 2022)"></a>A mutual learning framework for few-shot sound event detection(ICASSP 2022)</h3><p>原型网络(ProtoNet)[6]已被证明是一种有效的few-shot事件检测方法[7,8]。在DCASE 2021挑战任务5中，提交给该挑战的官方基线和几个解决方案[9,10]也使用了ProtoNet。然而，仍然有两个因素限制了ProtoNet的性能。首先，由于音频数据中存在背景噪声和干扰，支持集的类特征可能不够充分，因此从支持集中学习到的类原型可能不能准确地代表类中心。图1显示了从ProtoNet中提取的学习表征(嵌入)，我们可以看到，每个类的嵌入是分散的，特别是“buk4.wav”的支持集，它比“a1.wav”包含更多的背景噪声。因此，“buk4.wav”的f值远低于“a1.wav”。其次，ProtoNet使用基类数据训练特征提取器，并将特征提取器应用于未见类的样本。</p><p>这种类型的迁移学习是任务不可知的:特征提取器没有学习到对未见过的类进行最佳判别。它的性能通常不如特定于任务的特征提取器</p><p>本文提出了一个交互学习框架来持续更新特征提取器和类原型</p><ul><li><p>首先使用base-class 数据训练了一个特征提取器，然后使用类原型初始化分类器</p></li><li><p>然后使用未标记音频的统计数据通过transductive inference来更新分类器</p></li><li><p>为了得到特定于任务的特征提取器，进一步使用更新的类原型作为监督信息对特征提取器进行微调。这些过程可以被重复多次，以便特征提取器和分类器可以不断更新。</p></li></ul><h3 id="Adaptive-Few-Shot-Learning-Algorithm-for-Rare-Sound-Event-Detection-IJCNN-2022"><a href="#Adaptive-Few-Shot-Learning-Algorithm-for-Rare-Sound-Event-Detection-IJCNN-2022" class="headerlink" title="Adaptive Few-Shot Learning Algorithm for Rare Sound Event Detection(IJCNN 2022)"></a>Adaptive Few-Shot Learning Algorithm for Rare Sound Event Detection(IJCNN 2022)</h3><p>这些都激发了对Few-shot学习的研究。</p><p>同时，该方法也在[17]-[21]中被引入，用于罕见声事件的检测，并取得了良好的效果。Few-shot模型有望缓解数据不足和冷启动问题。它通常遵循episodic training策略，在每个集中考虑一个N way K-shot(例如5 way，1 shot意味着有5个类，每个类包含1个支持示例)分类任务。</p><p>在few-shot learning的设置中，一个模型首先在有标记数据的base classes训练。然后，假设每个新类只给出一个或几个标记样本（support set），要在训练期间未见的新类的未标记样本（query set）组成的few-shot任务上评估模型泛化。</p><p>所有metric-based few-shot learning 框架，都是独立计算每个support样例和query样例之间的相似度，导致support样例之间的相关性缺失。这种现象尤其在k较小时发生，这促使我们在每个任务中结合所有类别的上下文来寻找相关的特征。我们的task adaptive module旨在整合所有支持样例的信息，以评估每个类内部的共性和所有类之间的独特性，从而找到关键特征。</p>]]></content>
      
      
      <categories>
          
          <category> 论文笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 论文 </tag>
            
            <tag> 声音事件检测 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PoDA: Prompt-driven Zero-shot Domain Adaptation</title>
      <link href="/2023/12/19/PoDA/"/>
      <url>/2023/12/19/PoDA/</url>
      
        <content type="html"><![CDATA[<h1 id="PoDA-Prompt-driven-Zero-shot-Domain-Adaptation"><a href="#PoDA-Prompt-driven-Zero-shot-Domain-Adaptation" class="headerlink" title="PoDA: Prompt-driven Zero-shot Domain Adaptation"></a>PoDA: Prompt-driven Zero-shot Domain Adaptation</h1><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>仅使用文本prompt做图像语义分割的域自适应，这里是使用了CLIP连接图像和文本之间的特征。</p>]]></content>
      
      
      <categories>
          
          <category> 论文笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 论文 </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> 域自适应 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Domain adaptation</title>
      <link href="/2023/12/15/Domain%20adaptation/"/>
      <url>/2023/12/15/Domain%20adaptation/</url>
      
        <content type="html"><![CDATA[<h1 id="Domain-adaptation"><a href="#Domain-adaptation" class="headerlink" title="Domain adaptation"></a>Domain adaptation</h1><p>参考：<a href="https://zhuanlan.zhihu.com/p/463835164">https://zhuanlan.zhihu.com/p/463835164</a></p><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>直观来看，就是在训练集和测试集数据分布差距较远，然后需要这个域自适应方法，将模型从源域迁移到目标域。</p><h2 id="域自适应的理论"><a href="#域自适应的理论" class="headerlink" title="域自适应的理论"></a>域自适应的理论</h2><h3 id="理论出发点"><a href="#理论出发点" class="headerlink" title="理论出发点"></a>理论出发点</h3><p>域自适应理论最核心的想法就是如何将目标域上的泛化误差和源域上的泛化误差联系在一起。那么通过降低源域上的误差，就能间接地降低目标域上的误差。<br>首先，定义函数 ℎ 和 ℎ′ 在数据分布 $D$ 上的**差异（Disparity）<br><img src="/2023/12/15/Domain%20adaptation/image-20231219094628941.png" alt=""></p><p>然后，只需要使用泛化误差的定义以及_三角不等式_，我们就可以将目标域误差与源域误差联系起来。<br><img src="/2023/12/15/Domain%20adaptation/image-20231219094718327.png" alt=""></p><p>不等式右边的三个部分，分别为源域误差 ，最优联合误差，差异分歧<br>最优联合误差是指函数空间 H 中最优的函数在源域和目标域上的泛化误差，通常认为深度网络的函数空间足够大，最优联合误差可以忽略不计。<br>差异分歧刻画了不同数据域之间的距离，而大部分域自适应理论的出发点就是估计并缩小不同数据域之间的差异分歧，无法直接计算</p><p>不同的域自适应理论的区别就在于他们是差异分歧不同的上界。</p><h4 id="经典理论-mathcal-H-Delta-mathcal-H-Divergence"><a href="#经典理论-mathcal-H-Delta-mathcal-H-Divergence" class="headerlink" title="经典理论 $\mathcal H \Delta \mathcal H-Divergence$"></a>经典理论 $\mathcal H \Delta \mathcal H-Divergence$</h4><p>思路：<br>让差异分歧在 $h$ 和 $h^*$ 所在的函数空间 $\mathcal H$ 求上界<br><img src="/2023/12/15/Domain%20adaptation/image-20231219100310170.png" alt=""></p><p>取上界的操作尽管很直观，但是通常很难进行计算和优化。因此，实际计算时还会引入一个域判别器（Domain Discriminator） $D$，判别器的任务是将源样本和目标样本区分开。<br>泛化误差界：（二分类问题和01损失）<br><img src="/2023/12/15/Domain%20adaptation/image-20231219100421181.png" alt=""></p><h4 id="返璞归真-Disparity-Discrepancy"><a href="#返璞归真-Disparity-Discrepancy" class="headerlink" title="返璞归真 Disparity Discrepancy"></a>返璞归真 Disparity Discrepancy</h4><p>在上面那个方法中，同时求的是 h 和 $h^*$ 的上界，但这是没有必要的，因为 h 是已知的<br><img src="/2023/12/15/Domain%20adaptation/image-20231219101456510.png" alt=""><br>下图是一个可视化的对比，橙色的区域表示取上界的函数空间。<br><img src="/2023/12/15/Domain%20adaptation/image-20231219101516658.png" alt=""></p><h4 id="间隔理论-Margin-Disparity"><a href="#间隔理论-Margin-Disparity" class="headerlink" title="间隔理论 Margin Disparity"></a>间隔理论 Margin Disparity</h4><p>将对样本 x 在两个类别上的预测的评分函数的距离引入损失<br><img src="/2023/12/15/Domain%20adaptation/image-20231219102125688.png" alt=""><br><img src="/2023/12/15/Domain%20adaptation/image-20231219102132467.png" alt=""><br>基于间隔差异散度，给出了域自适应理论第一个针对多分类问题的泛化误差界，</p><p><img src="/2023/12/15/Domain%20adaptation/image-20231219102449067.png" alt=""></p><p>从这个泛化误差界，我们能得到的结论包括：</p><ol><li>增大源域的样本数 $n$ 和目标域的样本数 $m$ 可以降低目标域上的泛化误差。</li><li>合理控制函数空间 $\mathcal F$ 的大小，能够降低目标域上的泛化误差（ $\mathcal F$ 也不能太小，否则最优联合误差可以忽略的假设不再成立）。</li><li>类别数 $k$ 的增加会导致目标域上泛化误差的增大。</li><li>一定范围增大间隔 $\rho$ 的大小，可以降低目标域上的泛化误差（在实际使用MDD算法时，这也是最重要的超参数）</li></ol>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Diffusion-TTA</title>
      <link href="/2023/12/06/Diffusion-TTA/"/>
      <url>/2023/12/06/Diffusion-TTA/</url>
      
        <content type="html"><![CDATA[<h1 id="Diffusion-TTA"><a href="#Diffusion-TTA" class="headerlink" title="Diffusion-TTA"></a>Diffusion-TTA</h1><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>作者指出，对于分类模型，模型通常会忽略对于下游任务无关的细节，学习了捷径来更好的适应 $p(y|x)$ ，然而对于生成模型，生成的能力让其对数据有更丰富和更细致的理解，从而增强了其判别潜力。</p><p><strong>Generative models for discriminative tasks</strong><br>分成三个类别<br>基于反转的方法<br>给定一个测试输入 $x$ 和一个条件的生成模型 $p_{\phi}(x|c)$ ，这些方法通过找到最大化 $p_{\phi}(x|c)$ 估计似然的条件表示 $c$ 做出测试输入的预测<br>什么意思呢？就是这次训练拟合的Loss是生成模型的Loss，拟合目标是找条件表示 c</p><p>使用生成模型做样本增强<br>使用生成模型作为特征抽取器</p><p>我们的工作是在第一个概念上建立的<br>我们建议，与其反转条件表示，不如直接使用似然损失来适应预训练的判别模型</p><p><strong>Test-time Adaptation</strong><br>也被称为 Unsupervised domain adaptation，是一种通过在不使用任何标记实例的情况下更新参数来提高目标域上模型准确性的技术</p><h2 id="Test-Time-Adaptation-with-Diffusion-Models"><a href="#Test-Time-Adaptation-with-Diffusion-Models" class="headerlink" title="Test-Time Adaptation with Diffusion Models"></a>Test-Time Adaptation with Diffusion Models</h2><p><img src="/2023/12/06/Diffusion-TTA/image-20231206180036811.png" alt=""><br>上图的结构不是很理解，为什么是叠加噪声后传入扩散模型然后预测噪声？</p><p>扩散模型的条件 C 取决于判别模型的输出<br>令 $f_\theta$ 表示判别模型，输入图片 $x$ 输出 $y=f_\theta(x)$ ，考虑三种判别模型<br>图片分类，图片像素标签器（pixel labellers），图像深度预测器</p><p>对于分类器，输出 $y$ 表示 L 个类别的概率，向量的每一维相加为 1 ， $y \in [0,1]^L$ 。给定 L 类文本条件扩散模型学习的 text embedding （这里指的是diffusion里用于条件指向生成噪声的那个条件向量还是diffusion生成的向量？） $\ell_j \in \mathbb{R}^d,j\in \{1\dots L\}$ 将 diffusion condition描述为</p><script type="math/tex; mode=display">c = \sum^L_{j=1}y_j\cdot\ell_j</script><p>对于像素标记器， $y$ 表示在 L 个类别上，每个像素的概率分布集合</p><script type="math/tex; mode=display">y=\{y^u\in [0,1]^L,y^{u\top}1_L=1,u\in x\}</script><p>diffusion condition表示为</p><script type="math/tex; mode=display">c=\left\{\sum^L_{j=1}y^u_j\cdot\ell_j,u\in x\right\}</script><p>对于 depth predictors （预测像素距离或深度）的输出 $y\in \mathbb{R}^{+w\times h}$ ，h 和 w 分别指图像的高和宽，$c=y$</p><p>由于条件 c 对判别模型来说是可微的，可以如下损失更新：</p><script type="math/tex; mode=display">L(\theta,\phi)=\mathbb{E}_{t,\epsilon}\Vert\epsilon_{\phi}(\sqrt{\bar \alpha_t}x+\sqrt{1-\bar \alpha_t}\epsilon,\boldsymbol c, t)-\epsilon\Vert^2</script><p>形式来看，和条件扩散模型的损失差不多</p><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><p>对图像的模型和数据集不怎么熟悉，但是作者给的结论里，对于分类模型，都有提升。</p><p>我们的方法在不同的图像分类器架构上持续改进分布内（ImageNet）和域外（Out of domain）的分类性能。对于所有ResNet、ViT和ConvNext-Tiny，我们观察到显著的性能提升。</p><h1 id="对AudioLDM的改造"><a href="#对AudioLDM的改造" class="headerlink" title="对AudioLDM的改造"></a>对AudioLDM的改造</h1><p>首先需要把CLAP和diffusion的参数分别抽出来，精简一下</p>]]></content>
      
      
      <categories>
          
          <category> 论文笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 论文 </tag>
            
            <tag> Diffusion </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>StegaDDPM</title>
      <link href="/2023/11/30/StegaDDPM/"/>
      <url>/2023/11/30/StegaDDPM/</url>
      
        <content type="html"><![CDATA[<h1 id="StegaDDPM"><a href="#StegaDDPM" class="headerlink" title="StegaDDPM"></a>StegaDDPM</h1><blockquote><p>In addition, it can securely conceal and accurately extract secret messages up to 9 bits per pixel.</p></blockquote><p>汗流浃背了，一个像素的信息量也没有9比特吧</p><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>隐写有基于嵌入的隐写和无需嵌入的隐写</p><h2 id="Proposed-Approach"><a href="#Proposed-Approach" class="headerlink" title="Proposed Approach"></a>Proposed Approach</h2><p><img src="/2023/11/30/StegaDDPM/image-20231205101028145.png" alt=""></p><h3 id="基于DDPM的隐写网络"><a href="#基于DDPM的隐写网络" class="headerlink" title="基于DDPM的隐写网络"></a>基于DDPM的隐写网络</h3><p>又讲了一遍Diffusion<br>StegaDDPM分析了DDPM的逆生成过程来实现生成式图像隐写，并推导出适合于隐写的两个属性。详情如下</p><ul><li>消噪扩散概率模型定义了扩散步骤的马尔可夫链。</li><li>Z的分量服从高斯分布，其维数与生成的图像的维数相等。<br>算法：<br><img src="/2023/11/30/StegaDDPM/image-20231206145636034.png" alt=""><br>和传统DDPM模型生成图像的不同：初始采样噪声（即 $t=T$ 时）使用约定的 $Seed_1$ 生成，中间的去噪过程使用 $Seed_2$ 作为Diffusion去噪条件（类比条件诱导生成中的条件特征向量？），在最后一步使用一个残差 $R_1$ 作为嵌入信息，得到隐写图片 $X_0^S$</li></ul><h3 id="信息隐藏和提取"><a href="#信息隐藏和提取" class="headerlink" title="信息隐藏和提取"></a>信息隐藏和提取</h3><p><strong>隐藏过程</strong><br>秘密信息 $m$ ，长 $L$， 使用 $K$ 先加密得到 $m^e$<br>分成 c 组，表示为 $m^e=\{s_1,s_2,\cdots s_c\}$ 每个组长 $l$<br><img src="/2023/11/30/StegaDDPM/image-20231205114833057.png" alt=""><br>嵌入思路和之前李博讲的一样，和diffusion没有什么关系<br>将残差向量 $R_1$ 的每个分量 $r_i$ 的概率密度函数的横坐标划分为 $2^l$ 个区间，每个区间的概率积分为 $\frac{1}{2^l}$<br>对于每个 $s_i=[b_l,b_{l-1}\cdots b_1]$ ，将其看成小数，小数点在最前面（比如 101 就是 $0.5+0+0.125$），记作 $s_i^d$<br>最后，每个残差分量由如下公式得到：</p><script type="math/tex; mode=display">r_i=F^{-1}(s^d_i + \frac{rand(0,1)}{2^l})</script><p>其中 $F^{-1}(\cdot)$ 是高斯分布的概率分布函数的逆函数，图中最右边</p><p><strong>提取过程</strong><br>按照约定号的随机数种子 $Seed_1,Seed_2$ 使用相同的模型执行DDPM逆过程，得到 $X_1$<br>$R_1 = X_1 - X_0^S$<br>对于每个分量 $r_i$ 令 $s_i^{d’}=F(r_i)$ ，取前 $l$ 比特就是嵌入信息 $s_i$ </p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ul><li>RGB图片每个通道的像素值不是 0~255 的8字节值吗，上面提到的都是小数（和最前面的提问一样</li><li>需要交换随机数种子，相当于固定住了diffusion的噪声</li></ul>]]></content>
      
      
      <categories>
          
          <category> 论文笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 隐写 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AudioLDM2</title>
      <link href="/2023/11/28/AudioLDM2/"/>
      <url>/2023/11/28/AudioLDM2/</url>
      
        <content type="html"><![CDATA[<h1 id="AudioLDM2"><a href="#AudioLDM2" class="headerlink" title="AudioLDM2"></a>AudioLDM2</h1><p>作者：Haohe Liu, Qiao Tian, Yi Yuan, Xubo Liu, Xinhao Mei, Qiuqiang Kong, Yuping Wang, Wenwu Wang, Yuxuan Wang, Mark D. Plumbley</p><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>做Audio generation的大一统工作（有空可以看看这里提到的几篇）</p><blockquote><p>Recent advancements in addressing problems from a unified perspective have yielded substantial progress [16]– [19]. This trend highlights the potential of constructing a unified audio generation framework.</p></blockquote><p>引入了 language of audio(LOA)，作为音频片段的特征表示，这个片段需要能够表示细粒度和粗粒度的音频信息，考虑到这些需求，我们建议使用 audio masked autoencoder(AudioMAE, 一个预训练框架) 来提取这些特征。<br>具体用的是预训练的GPT2，减少计算量<br>总的来说，贡献如下：</p><ul><li>提出了一个新颖的通用的音频生成模型，能够执行音频，音乐和可理解语音的条件生成。</li><li>该方法基于音频的通用表示，可以在没有音频注释的情况下对LDM进行大规模自监督预训练，并有助于将自回归模型的优点结合起来</li></ul><h2 id="AudioLDM2-1"><a href="#AudioLDM2-1" class="headerlink" title="AudioLDM2"></a>AudioLDM2</h2><p><img src="/2023/11/28/AudioLDM2/image-20231130150850706.png" alt=""><br>总体架构如图，与第一代相比，框架变大了很多。首先是由于大统一特征 LOA 的引入，对于Audio和其他模态的信息需要更多的处理方法，图中分为两部分， $\mathcal{A}(\cdot)$ 为Audio to LOA ENcoder，将原始音频编码为原始大一统特征 $Y$； $\mathcal{M}(\cdot)$ 为 Any modality to LOA Translator，将其他模态的信息编码为对原始大一统特征的估计 $\hat Y$ 。</p><p>之后的做法和第一代类似，就是送入Diffusion用于生成VAE的隐变量，然后VAE重建梅尔谱图。不过Diffusion和VAE的结构和第一代都不同。</p><h3 id="AudioMAE-Encoder"><a href="#AudioMAE-Encoder" class="headerlink" title="AudioMAE Encoder"></a>AudioMAE Encoder</h3><p>是一个和 Vision Transformer（ViT）类似的架构的自监督预训练模型。同其他自监督预训练模型相比，有两个优点</p><ul><li>被证实在综合的音频领域内工作的很好，就是不细分特定领域，比如 speech 或者 music</li><li>使用mask后重建的损失相比以前以对比损失或预测分类损失为目标的方法，在生成任务中可能更好。<br>对于一段音频信号 $x$ 首先转换为梅尔谱图 $X\;\in\;\mathbb{R}^{T\times F}$ ，然后当作图片的处理方式，分成 $P\times P$ 大小的 patch 作为 AudioMAE encoder 的输入，每个patch会得到一个 $D$ 维的嵌入，一段音频经过encoder 得到的特征为 $E\;\in\;\mathbb{R}^{T’\times F’\times D}$ ，最后经过一个二维的 pooling 降维，得到 LOA 特征</li></ul><h3 id="Conditioning-Information-to-LOA-Translation-with-GPT-2"><a href="#Conditioning-Information-to-LOA-Translation-with-GPT-2" class="headerlink" title="Conditioning Information to LOA Translation with GPT-2"></a>Conditioning Information to LOA Translation with GPT-2</h3><p>这部分是要生成 $\hat Y$ ，这里把这个特征当成一个 language modelling task，把特征 $Y$ 视为长度为 $L$ 的序列，在训练过程中，GPT2 根据给定的多模态条件 $C$ 和 之前的真实序列 $y_1,\dots,y_{l-1}$ 去预测序列中的第 $l$ 个向量。优化目标为最大似然估计</p><p>然后讲多模态的特征用不同的专家模型来处理</p><h3 id="Latent-Diffusion-Model"><a href="#Latent-Diffusion-Model" class="headerlink" title="Latent Diffusion Model"></a>Latent Diffusion Model</h3><p>这里同第一代类似，但是用的是Transformer-UNet，是在原始的UNet的卷积后面加一层Transformer，为了将原始的LOA中的条件信息合并，最后一个transformer块把self-attention换成了cross-attention，把LOA作为K和V，并将前一个transformer块的输出作为Q。</p><p>然后上面结构图里有一个Prob Switcher，在训练过程中，这个开关会从两个特征中以概率 $P_{gt},P_{pred}$ 随机选取AudioMAE生成的原始特征和GPT2生成的估计特征</p>]]></content>
      
      
      <categories>
          
          <category> 论文笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 论文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读论文过程中碰到的深度学习网络</title>
      <link href="/2023/11/28/%E8%AF%BB%E8%AE%BA%E6%96%87%E8%BF%87%E7%A8%8B%E4%B8%AD%E7%A2%B0%E5%88%B0%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%BB%9C/"/>
      <url>/2023/11/28/%E8%AF%BB%E8%AE%BA%E6%96%87%E8%BF%87%E7%A8%8B%E4%B8%AD%E7%A2%B0%E5%88%B0%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="读论文过程中碰到的深度学习相关知识"><a href="#读论文过程中碰到的深度学习相关知识" class="headerlink" title="读论文过程中碰到的深度学习相关知识"></a>读论文过程中碰到的深度学习相关知识</h1><p><a href="https://zhuanlan.zhihu.com/p/101332297">Res Net</a><br><a href="https://zhuanlan.zhihu.com/p/338817680">Transformer</a><br><a href="https://jalammar.github.io/illustrated-transformer/">illustrated-transformer</a><br><a href="https://zhuanlan.zhihu.com/p/98855346">BERT</a></p>]]></content>
      
      
      <categories>
          
          <category> 查阅用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小组会记录</title>
      <link href="/2023/11/24/%E5%B0%8F%E7%BB%84%E4%BC%9A%E8%AE%B0%E5%BD%95/"/>
      <url>/2023/11/24/%E5%B0%8F%E7%BB%84%E4%BC%9A%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="小组会记录"><a href="#小组会记录" class="headerlink" title="小组会记录"></a>小组会记录</h1><p>看关于attention和transformer的内容，熟悉整体架构<br><a href="https://zhuanlan.zhihu.com/p/338817680">Transformer</a><br><a href="https://jalammar.github.io/illustrated-transformer/">illustrated-transformer</a><br><a href="https://zhuanlan.zhihu.com/p/98855346">BERT</a></p><p>注意到transformer训练的参数是得到KQV的矩阵</p><p>12-15<br>看看bert和Transformer之间的关系</p><p>看域自适应，和Test time adaptation<br>对比adaptation<br>真实环境SED<br>做SED从实验室到真实环境迁移<br>diffusion用text做condition<br>PODA思想加上面的方法<br>用TTA的框架</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CLAP</title>
      <link href="/2023/11/20/CLAP/"/>
      <url>/2023/11/20/CLAP/</url>
      
        <content type="html"><![CDATA[<h1 id="CLAP-LEARNING-AUDIO-CONCEPTS-FROM-NATURAL-LANGUAGE-SUPERVISION"><a href="#CLAP-LEARNING-AUDIO-CONCEPTS-FROM-NATURAL-LANGUAGE-SUPERVISION" class="headerlink" title="CLAP : LEARNING AUDIO CONCEPTS FROM NATURAL LANGUAGE SUPERVISION"></a>CLAP : LEARNING AUDIO CONCEPTS FROM NATURAL LANGUAGE SUPERVISION</h1><p>作者：Benjamin Elizalde, Soham Deshmukh, Mahmoud Al Ismail, Huaming Wang<br>机构：微软<br>发表情况：未发表</p><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>注意到在这之前，也有人用类似的方法训练，Wav2clip和Audioclip从CLIP中提取，并且使用AS中的音频和类别标签训练而不是自然语言（应该就是这里的区别）<br>CLAP使用和CLIP一样的方法，两个Encoder，通过对比学习将音频和文本描述投射到一个联合的多模态空间</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p><img src="/2023/11/20/CLAP/image-20231121104629378.png" alt=""></p><p>和图中描述的一样<br>首先需要选定一个大小为 $N$ 的 batch，就是图中做矩阵乘法的两个向量组的大小。<br>图里省略了两个线性投影层<br>audio是以梅尔谱图的形式作为输入的</p><script type="math/tex; mode=display">\hat X_a = f_a(X_a);\;\hat X_t = f_t(X_t)</script><p>其中 $\hat X_a \in \mathbb R ^{N\times V},\hat X_t \in \mathbb R ^{N\times U}$ ，也就是说，两个特征向量在经过encoder之后的形状不是一样的，所以加了两个线性投影层，将两个特征表示投影到 $\mathbb R ^{N\times d}$ , 得到 $E_a,E_t$<br>相似性矩阵定义为：</p><script type="math/tex; mode=display">C = \tau *(E_t \cdot E_a^\top)</script><p>$\tau$ 是温度参数，用来缩放logits<br>损失函数定义为：</p><script type="math/tex; mode=display">\begin{aligned}\mathcal L = 0.5*(\ell_{text}(C) + \ell_{audio}(C) )\newline\ell_k = \frac 1 N \sum^N_{i=0} \log diag(softmax(C))\end{aligned}</script><p>实验不看了，看另一个pipeline</p><h1 id="Large-scale-Contrastive-Language-Audio-Pretraining-with-Feature-Fusion-and-Keyword-to-Caption-Augmentation"><a href="#Large-scale-Contrastive-Language-Audio-Pretraining-with-Feature-Fusion-and-Keyword-to-Caption-Augmentation" class="headerlink" title="Large-scale Contrastive Language-Audio Pretraining with Feature Fusion and Keyword-to-Caption Augmentation"></a>Large-scale Contrastive Language-Audio Pretraining with Feature Fusion and Keyword-to-Caption Augmentation</h1><p>作者：Yusong Wu, Ke Chen 2, Tianyu Zhang 1, Yuchen Hui, Taylor Berg-Kirkpatrick, Shlomo Dubnov<br>机构：Mila, Quebec Artificial Intelligence Institute, Universite de Montr ´ eal ´<br>University of California San Diego 3LAION<br>发表情况：未发表</p><p>AudioLDM的CLAP是按照这篇论文提出的流水线进行构造的<br>本文的贡献：</p><ul><li>发布了LAION-Audio-630K数据集</li><li>构建了 <code>contrastive language-audio pretraining</code> 的流水线，使用了两个audio encoder和三个text encoder进行测试，采用特征融合机制来提高性能，使模型能够处理变长输入</li><li>下游任务测试，在文本音频搜索和音频分类任务中达到了SOTA效果</li></ul><h2 id="Model-Architecture"><a href="#Model-Architecture" class="headerlink" title="Model Architecture"></a>Model Architecture</h2><p><img src="/2023/11/20/CLAP/image-20231121160747431.png" alt=""></p><p>总体和微软提出的CLAP类似，不过表述不同，最后特征维度转换的线性投影层就是一个多层感知机。<br>上面提到的损失函数展开就是下面这个形式（太长了不想打<br><img src="/2023/11/20/CLAP/image-20231121162154009.png" alt=""></p><p>可以看到，为了匹配不同长度的输入，对音频在进入Encoder之前，有做一些预处理<br>对于长度为 $Ts$ 的音频和一个固定的窗口长度 $d = 10s$ </p><ul><li>$T\leq d:$ 先重复再0扩充</li><li>$T&gt;d:$ 首先将输入T下采样到 d 秒作为一个全局的输入（什么意思啊，为什么下采样还能改时间长度）<ul><li>看了下代码，是 <code>mel_shrink = torchvision.transforms.Resize(size=[chunk_frames, 64])(mel[None])[0]</code>这个东西实现的</li><li>然后随机的分三个 d 秒的块，作为局部输入，将这四个 d 秒的输入送入第一层得到初始化特征，然后三个局部特征会被加工成一个特征，最后局部特征和全局特征会被融合为：<script type="math/tex; mode=display">\begin{aligned}X^a_{fusion}&=\alpha X^a_{global} + (1-\alpha)X^a_{local}\newline\alpha &= f_{AFF}(X^a_{global},X^a_{local})\end{aligned}</script>特征融合机制具体由下面的步骤实现<br><img src="/2023/11/20/CLAP/image-20231122094914332.png" alt=""></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 论文笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 论文 </tag>
            
            <tag> CLAP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AudioLDM</title>
      <link href="/2023/11/13/AudioLDM/"/>
      <url>/2023/11/13/AudioLDM/</url>
      
        <content type="html"><![CDATA[<h1 id="AudioLDM"><a href="#AudioLDM" class="headerlink" title="AudioLDM"></a>AudioLDM</h1><p>作者：Haohe Liu, Zehua Chen, Yi Yuan, Xinhao Mei, Xubo Liu, Danilo Mandic, Wenwu Wang, Mark D. Plumley<br>机构：CVSSP, University of Surrey, Guildford, UK；Department of EEE, Imperial College London, London, UK<br>发表情况： ICML 2023</p><h2 id="学习过程参考的相关文章"><a href="#学习过程参考的相关文章" class="headerlink" title="学习过程参考的相关文章"></a>学习过程参考的相关文章</h2><p><a href="https://zhuanlan.zhihu.com/p/638442430">Diffusion Model</a></p><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>贡献：</p><ul><li>第一次将连续的隐扩散模型（LDM）应用于TTA生成，且取得了SOTA效果</li><li>使用了CLAP嵌入使TTA生成的训练不用依赖音频文本对</li><li>实验证明了在LDM训练中只使用音频数据可以得到高质量和高计算效率的TTA系统</li><li>展示了提出的TTA系统能够在未经过微调的情况下进行文本引导的音频风格操作，比如音频风格迁移，高分辨率生成，音频修复。</li></ul><p><img src="/2023/11/13/AudioLDM/image-20231211115457402.png" alt=""></p><h2 id="Text-Conditional-Audio-Generation"><a href="#Text-Conditional-Audio-Generation" class="headerlink" title="Text-Conditional Audio Generation"></a>Text-Conditional Audio Generation</h2><h3 id="Contrastive-Language-Audio-Pretraining-CLAP"><a href="#Contrastive-Language-Audio-Pretraining-CLAP" class="headerlink" title="Contrastive Language-Audio Pretraining (CLAP)"></a>Contrastive Language-Audio Pretraining (CLAP)</h3><p>参考图像文本预训练（CLIP），提出了CLAP<br>分别由一个text encoder和一个audio encoder，分别提取文本和音频的嵌入特征，两个encoder的架构分别为</p><ul><li>text: RoBERTa</li><li>audio: HTSAT<br>以对称交叉熵损失作为训练目标，将音频和文本特征对齐到同一个嵌入空间。</li></ul><h3 id="Conditional-Latent-Diffusion-Models"><a href="#Conditional-Latent-Diffusion-Models" class="headerlink" title="Conditional Latent Diffusion Models"></a>Conditional Latent Diffusion Models</h3><p>条件隐扩散模型<br>这部分有点绕，先翻译一下<br>TTA系统可以给定一个文本描述 $y$ 生成一个音频样本 $\hat x$ 。在有概率生成模型LDMs的情况下，我们使用模型分布 $p_{\theta}(z_0|E^y)$ 评估了真实的条件数据分布 $q(z_o|E^y)$ ，其中 $z_0 \in \mathbb{R}^{C\times \frac{T}{r} \times \frac{F}{r}}$ 是音频样本 $x$ 在由 $X \in \mathbb{R}^{T\times F}$ 梅尔谱压缩表示组成向量空间的前置，$E^y$ 是由CLAP预训练的文本encoder得到的文本嵌入。$r$ 表示压缩等级，C表示压缩表示的通道数，T 和 F 表示梅尔谱图 X 的时域频域维数。通过预训练的CLAP联合嵌入音频和文本信息，音频嵌入 $E^x$ 和文本嵌入 $E^y$ 共享一个联合的跨模态空间。这允许我们使用 $E^x$ 训练LDMs，同时将 $E^y$ 用于TTA生成。</p><p>这部分的重点在这两个概率分布模型  $p_{\theta}(z_0|E^y)$ 和 $q(z_o|E^y)$ ，其中 $q(z_o|E^y)$ 是真实分布，也就是我们拟合的目标，这是一个条件概率模型，条件是 $E^y$ ，也就是文本描述的嵌入，随机变量是 $z_0$ ，原文描述为</p><blockquote><p>$z_0 \in \mathbb{R}^{C\times \frac{T}{r} \times \frac{F}{r}}$ is the prior of an audio sample $x$ in the space formed from the compressed representation of the mel-spectrogram  $X \in \mathbb{R}^{T\times F}$ </p></blockquote><p>关键是 <code>the prior of an audio sample</code> 就把它当作一个用于重建音频的隐变量就好了，至于是怎么还原的之后应该会提到。<br>所以这个要拟合的分布，就是给定文本描述的情况下，符合文本描述的音频的分布</p><p>然后讲本文用到的扩散模型，基本和参考文章中的扩散模型一样，首先分为前向过程和反向过程，前向过程一层一层加噪声，反向过程一层一层去噪声。<br><strong>forward process</strong><br>预定义一个噪声尺度 $0 &lt; \beta_1 &lt; \cdots &lt; \beta_n &lt; \cdots &lt; \beta_N &lt;1$ ，共做 $N$ 次加噪过程，最终会将数据分布转换为一个标准高斯分布</p><script type="math/tex; mode=display">\begin{aligned}q(z_n|z_{n-1}) &= \mathcal{N}(z_n;\sqrt{1-\beta_n} \; z_{n-1},\beta_n \boldsymbol I)\qquad &(1)\newlineq(z_n|z_0) &= \mathcal{N}(z_n;\sqrt{\bar \alpha_n}\;z_0,(1-\bar \alpha_n)\boldsymbol \epsilon)\qquad &(2) \end{aligned}</script><p>这里的 $\boldsymbol \epsilon \sim \mathcal N (0,I)$ 表示输入噪声，$\alpha_n = 1-\beta_n$ 是构造参数的技巧，让式子更简洁，$\bar \alpha_n := \prod ^n_{s=1}\alpha_s$ 表示每一步的噪声水平。最后一步 $N$ ，$z_N \sim \mathcal N(0,I)$ 是一个标准正态高斯分布</p><p>对于模型优化，使用调整过权重的噪声评估训练目标（在参考文章中有相关证明）</p><script type="math/tex; mode=display">L_n(\theta)=\mathbb E_{z_0,\epsilon,n}\Vert\epsilon-\epsilon_\theta(z_n,n,E^x)\Vert^2_2 \qquad (3)</script><p>其中，$E^x$ 是由audio encoder生成的 音频波形 $x$ 的音频嵌入。<br>在反向过程中，从高斯分布 $p(z_N)\sim \mathcal N(0,I)$ 和文本嵌入 $E^y$ 开始，以 $E^y$ 为条件的去噪过程通过以下过程逐渐产生音频先验（audio prior） $z_0$</p><script type="math/tex; mode=display">\begin{aligned}p_{\theta}(z_{0:N}|E^y) &= p(z_N)\prod^N_{t=n}p_\theta(z_{n-1}|z_n,E^y) \qquad &(4)\newlinep_\theta(z_{n-1}|z_n,E^y) &= \mathcal N (z_{n-1};\mu_\theta(z_n,n,E^y),\sigma^2_nI)\qquad &(5)\end{aligned}</script><p>公式（4）是对整个过程的一个描述，从高斯分布的采样 $p(z_N)$ 开始，连乘 N 个去噪的概率分布得到生成的结果，其中，每一步的去噪过程，可以定义为给定阶段 $n$ 的带噪隐变量 $z_n$ 和文本嵌入 $E^y$ ，加噪声前一阶段 $z_{n-1}$ 的概率分布。</p><p>反向过程在参考文章中给了很清晰的解释</p><blockquote><p>在正向过程中，我们人为设置了 $T$ 步加噪声过程。而在反向过程中，我们希望能够倒过来取消每一步加噪声操作，让一幅纯噪声图像变回数据集里的图像。这样，利用这个去噪声过程，我们就可以把任意一个从标准正态分布里采样出来的噪声图像变成一幅和训练数据长得差不多的图像，从而起到图像生成的目的。<br>现在问题来了：去噪声操作的数学形式是怎么样的？怎么让神经网络来学习它呢？数学原理表明，当 $\beta_t$ 足够小时，每一步加噪声的逆操作也满足正态分布。</p></blockquote><p>重点：<strong>直接计算所有数据的加噪声逆操作的分布是不太现实的</strong>，但是，如果给定了某个训练集输入 $x_0$，多了一个限定条件后，该分布是可以用贝叶斯公式计算的</p><script type="math/tex; mode=display">\begin{aligned}q(x_{t-1}|x_t,x_0) &= \frac{q(x_{t-1},x_t,x_0)}{q(x_t,x_0)} \newline&=\frac{q(x_t,x_{t-1},x_0)}{q(x_0)q(x_t|x_0)} \newline&=\frac{q(x_t|x_{t-1},x_0)q(x_{t-1},x_0)}{q(x_0)q(x_t|x_0)} \newline&=\frac{q(x_t|x_{t-1},x_0)q(x_{t-1}|x_0)q(x_0)}{q(x_0)q(x_t|x_0)}\newline&=q(x_t|x_{t-1},x_0)\frac{q(x_{t-1}|x_0)}{q(x_t|x_0)}\end{aligned}</script><p>等式右边的所有东西都是正向过程中已知的，代入可以计算得到等式左边的均值和方差，具体的推导过程见参考文章</p><p>回到论文，得到去噪的过程的均值和方差如下</p><script type="math/tex; mode=display">\begin{aligned}\mu_\theta(z_n,n,E^y)&=\frac{1}{\sqrt{\alpha_n}}(z_n-\frac{\beta_n}{\sqrt{1-\bar \alpha_n}}\epsilon_\theta(z_n,n,E^y)) \qquad&(6) \newline\sigma^2_n &= \frac{1-\bar\alpha_{n-1}}{1-\bar\alpha_n}\beta_n \qquad&(7)\end{aligned}</script><p>本文的 $\epsilon_\theta$ 和 $DDPM$ 的 $\epsilon$ 好像不是一个东西，DDPM的是从标准高斯中采样的，而这里文章中说这是预测的生成噪声，应该是原始的diffusion没有text prompt这个限制，是随机生成图片，而这里是有一个文本嵌入 $E^y$ 在限制</p><p>在训练阶段，学习给定音频样本 $x$ 的跨模态表示 $E^x$ 的audio prior $z_0$ 的生成。然后在TTA生成，提供文本嵌入 $E^y$ 来预测噪声 $\epsilon_\theta$<br>建立在CLAP嵌入的基础上，LDM可以不需要文本监督也能理解TTA生成</p><h3 id="Conditioning-Augmentation"><a href="#Conditioning-Augmentation" class="headerlink" title="Conditioning Augmentation"></a>Conditioning Augmentation</h3><p>条件作用增强<br>在图像生成中，可以捕捉到图像间微小的差别，其中一个原因是大量的language-image样本对，但是音频没有这么多样本。本文的方法在训练LDMs的时候不需要文本样本，所以数据增强只需要音频，通过以下方式对音频样本 $x_1,x_2$ 进行混频增强</p><script type="math/tex; mode=display">x_{1,2}=\lambda x_1 + (1-\lambda)x_2 \qquad(8)</script><p>其中 $\lambda$ 是从beta分布 $\mathcal B(5,5)$ 中采样的0到1之间的数</p><h3 id="Classifier-free-Guidance"><a href="#Classifier-free-Guidance" class="headerlink" title="Classifier-free Guidance"></a>Classifier-free Guidance</h3><p>用于指导扩散模型的生成。<br>在训练过程中，使用固定的概率随机丢弃条件 $E^x$ 来同时训练条件LDMs $\epsilon_\theta(z_n,n,E^x)$ 和非条件LDMs $\epsilon_\theta(z_n,n)$ 。生成的时候，使用文本嵌入 $E^y$ 作为条件，并使用改进的噪声估计 $\hat \epsilon_\theta(z_n,n,E^y)$ 进行采样：</p><script type="math/tex; mode=display">\hat \epsilon_\theta(z_n,n,E^y) = w\epsilon_\theta(z_n,n) + (1-w)\epsilon_\theta(z_n,n,E^y) \qquad (9)</script><p>其中 $w$ 决定指导尺度<br>看起来就是俩系数，分别决定条件LDMs和非条件LDMs在预测噪声中占的比重，非条件LDMs就是原始的Diffusion的那个正态采样噪声</p><h3 id="Decoder"><a href="#Decoder" class="headerlink" title="Decoder"></a>Decoder</h3><p>主要有两部分，VAE用作隐变量到梅尔频谱图的转换，HiFi-GAN用作梅尔频谱图到音频样本的重建<br>训练过程，使用VAE将梅尔频谱图 $X \in \mathbb R^{T\times F}$ 压缩进一个小的隐空间 $z\in \mathbb R^{C\times \frac R r \times \frac F r}$ ，其中 $r$ 是压缩等级。VAE的encoder和decoder采用堆叠的卷积块。<br>训练损失包括三个部分：重建损失，对抗损失，高斯约束损失（后面补充）<br>另外，和LDMs的条件增强类似，这里也使用了公式（9）的数据扩充方式</p><h2 id="Text-Guided-Audio-Manipulation"><a href="#Text-Guided-Audio-Manipulation" class="headerlink" title="Text-Guided Audio Manipulation"></a>Text-Guided Audio Manipulation</h2><p><strong>Style Transfer</strong><br>什么玩意儿<br>给定一个原音频样本 $x^{src}$ 我们可以使用公式（2）计算它的预定义时间步长 $n_0&lt;N$ 的噪声潜在表示 $z_{n_0}$<br>使用 $z_{n_0}$ 作为预训练AudioLDM模型逆过程的开始点，我们通过一个 <code>shallow reverse process</code> $p_\theta (z_{0:n_0}|E^y)$ 来通过文本输入 $y$ 操纵音频 $x^{src}$ </p><script type="math/tex; mode=display">p_\theta (z_{0:n_0}|E^y) = p(z_{n_0})\prod^{n_0}_{n=1}p_\theta (z_{n-1}|z_n,E^y) \qquad \qquad(10)</script><p>其中 $n_0$ 控制操作结果，如果我们定义一个 $n_0\approx N$ ，源音频提供的信息将不会被保留，操作将类似于TTA生成。<br>这是个什么东西呢<br>观察公式（10）和（4），他们的差别在于隐变量 $z$ 的下标，完整的LDMs过程，是如公式（4）所描述的，<code>源音频-&gt;高斯噪声-&gt;由文本条件引导的重建音频</code>。而公式（10）的过程是不完全的LDMs过程，<code>源音频-&gt;叠加了部分噪声的隐空间表示-&gt;由文本条件引导的重建音频</code>。这种处理方式会根据 $n_0$ 的选择保留源音频包含的大部分信息，只让文本描述起到修改的作用。</p><p><strong>Inpainting and Super-Resolution</strong><br>chatgpt的解释：<br>Inpainting：是一种用于修复或恢复信号中缺失或损坏部分的技术。在音频生成领域，这可能涉及到填补音频信号中的缺失段落，使其在听觉上更加连贯和完整<br>Super-Resolution：是一种用于增强图像或信号分辨率的技术，通常通过提高像素级别的细节来实现。在音频领域，这可以被理解为通过算法或模型增加音频信号的采样率或提高其频率分辨率，以获得更高质量的音频。这有助于使音频更清晰，更富有细节，提高听觉上的感知质量。</p><p>我们通过将观察到的部分的潜在表示 $z^{ob}$ 合并到生成的潜在表示 $z$ 中来探索这些任务<br>具体来说，在反向过程中，从 $p(z_N) \sim \mathcal N(0,I)$ 开始，在由公式（5）的每次推断之后，用下面的公式修改生成的 $z_{n-1}$ </p><script type="math/tex; mode=display">z_{n-1}' = (1-m) \odot z_{n-1} + m \odot z^{ob}_{n-1}\qquad \qquad (11)</script><p>  其中 $z’$ 是修改过的隐空间表示，$m\in \mathbb R^{\frac T r \times \frac F r}$ 表示一个隐空间观测mask（是什么东西），$z^{ob}_{n-1}$ 是对 $z^{ob}$ 进行前向过程加噪声得到的<br>  这个 $m$ 就是把梅尔谱图中的观测部分置为1，未观测部分置为0，然后上面的公式中，$(1-m)\odot z_{n-1}$ 就是保留反向过程中未观测到的部分，而 $z^{ob}_{n-1}$ 是未经过 $E^y$ 指导的，由原始音频正向生成的隐变量，直观来看就是在生成过程中，每去一次噪声，就把观察到的部分的预测值换为原始观测值的加噪部分，只让模型去生成未被观测到的部分。</p><h2 id="Experiments"><a href="#Experiments" class="headerlink" title="Experiments"></a>Experiments</h2><p><strong>Training dataset</strong><br>AudioSet, AudioCaps, Freesound, BBC Sound Effect library<br><strong>Evaluation dataset</strong><br>AC, AS把标签串起来</p><p><strong>评估方法</strong><br>客观方法：</p><ul><li>frechet distance（FD）：与图像生成中的frechet起始距离类似，音频中的FD表示生成的样本与目标样本之间的相似度</li><li>Inception score（IS）：用于评估采样质量和多样性的指标</li><li>KL散度：KL在成对样本水平上测量，并作为最终结果平均。</li></ul><p>主观方法：<br>叫了6个<code>audio professionsals</code>评估两个指标</p><ul><li>overall quality(OVL)，总体质量</li><li>relevance to the input text(REL)，和输入文本的相关性</li></ul><p><strong>模型</strong><br>对比模型：DiffSound，AudioGen<br>训练了两个AudioLDM</p><ul><li>AudioLDM-S 181M参数</li><li>AudioLDM-L 739M参数</li></ul><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><img src="/2023/11/13/AudioLDM/image-20231117151704510.png" alt=""></p><p>虽然RoBERTa和CLAP具有相同的文本编码器结构，但CLAP的优势在于它将音频-文本关系学习与生成模型训练解耦。这种分离是直观的，因为CLAP已经通过对齐音频和文本的嵌入空间来建模音频和文本之间的关系。<br>用BERT既需要学习音频文本之间的关系，又需要学习生成相关的知识，而CLAP不需要，因为它已经对其了音频文本向量空间</p><p>在音乐上的合成质量评估：<br><img src="/2023/11/13/AudioLDM/image-20231117155505639.png" alt=""></p><p><strong>Conditioning Information</strong><br>在训练LDM的时候没有用到文本特征，一个很自然的问题，如果用了文本特征效果会不会更好？然后发现不会<br><img src="/2023/11/13/AudioLDM/image-20231117155906174.png" alt=""><br>作者认为导致这个结果的主要原因是文本嵌入对生成目标的描述没有音频嵌入这么好，由于音频的复杂性和模糊性，文本描述很难做到准确和全面。下面这个图是采样质量和训练步数的函数，可以看到在整个训练过程中，音频嵌入的训练效果明显好于文本嵌入;较大的模型收敛速度较慢，但最终性能较好。<br><img src="/2023/11/13/AudioLDM/image-20231117160627718.png" alt=""></p><p>问题，我把前面的忘了，这个文本嵌入和音频嵌入是放在哪个地方的来着</p><p>压缩率：r<br><img src="/2023/11/13/AudioLDM/image-20231117161337173.png" alt=""><br>r = 1，2的时候，单张RTX3090跑不动，实验默认用r=4</p><p><strong>Text-Guided Audio Manipulation</strong><br>对super-resolution任务，使用了两个模型 AudioUNet 和 NVSR 作为baseline，使用log-spectral distance (LSD）作为评价指标<br>对于Inpainting 任务，使用FAD作为指标，并作为这一任务的新baseline<br><img src="/2023/11/13/AudioLDM/image-20231117163359764.png" alt=""><br>实验结果中，AudioLDM的效果比AudioUNet好，但是不如NVSR。<br>作者认为这是因为AudioLDM的训练数据里包含很多噪声，这可能会导致在超分辨率过程的输出中出现白噪声或其他非语音声音事件，从而潜在地降低性能。<br>最后给出展望，我们的贡献给了一个新的方式，以zero-shot的方式，使用TTA系统完成文本引导的音频处理任务</p><h3 id="消融实验"><a href="#消融实验" class="headerlink" title="消融实验"></a>消融实验</h3><p>对三个部分做了消融实验<br>简化UNet的注意力机制，系统性能显著下降，说明复杂的注意机制是首选的<br>在音频分类中广泛使用的平衡采样机制，在TTA中没有表现出改善。（我看着挺明显的？）<br>条件增强（Conditional augmentation）在主观评价中有提升，但是在客观评价中没有。作者猜测可能是因为条件增强生成的训练数据在AC中没有代表性，导致模型的输出和测试集没有很好的对齐，导致度量分数更低。<br><img src="/2023/11/13/AudioLDM/image-20231117165738362.png" alt=""></p><p><strong>DDIM Sampling Step</strong><br>在DDPM中，反向过程的推断步数会直接影响生成质量，通常，增加采样步数和计算量，采样质量可以得到改善。<br><img src="/2023/11/13/AudioLDM/image-20231117170501557.png" alt=""><br>100步之后提升很小。</p><p><strong>Guidance Scale</strong><br>是生成多样性和条件生成质量之间的权衡，就是前文的参数 $w$ ，但是这里的取值是1234，按照前文的公式应该是取0到1才对啊<br>在看代码的过程中找到了答案，代码里用的 $w=2.5$，该参数最后作用于<code>ddim.py</code>中<br></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">e_t = e_t_uncond + unconditional_guidance_scale * (e_t - e_t_uncond)</span><br></pre></td></tr></tbody></table></figure><br>这里是用 $\epsilon_\theta(z_n,n)-\epsilon_\theta(z_n,n,E^y)$ ，再乘上 $w$ <p></p><h3 id="一些总结"><a href="#一些总结" class="headerlink" title="一些总结"></a>一些总结</h3><ul><li>参考CLIP的预训练CLAP模型，将text和audio的特征向量对齐</li><li>Latent Diffusion Model，将text encoder得到的文本嵌入通过扩散模型映射到隐变量空间</li><li>VAE，用于从隐变量生成梅尔谱图</li><li>HiFi-GAN，将梅尔谱图还原为音频<h3 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h3>看看一些细节，好多没懂的<br>首先是用到的预训练模型CLAP，最初是微软提出的，这个之后开新坑看以下，本文用到的是另一篇基于CLAP提出的流水线技术。</li></ul><p>LDM使用的是StableDiffusion的backbone，是一个叫UNet的东西，但是怎么看怎么和那个条件概率推导链没什么关系<br>回到最开始的图像LDM<br><img src="https://img-blog.csdnimg.cn/f95df368ee754d13bbccafcd5e28ff11.png" alt="图像LDM"><br>UNet参与的地方是上图中的 Denoising 过程<br>还是看看代码 8️⃣ （服务器down了，之后再看8️⃣）<br>代码看不懂，回来先翻译一下这段</p><blockquote><p>我们采用StableDiffusion的UNet backbone作为AudioLDM的LDM基本架构。如式5所示，UNet模型同时以时间步长t和CLAP嵌入E为条件（就是公式里的 n 和 $E^y$ ），我们将时间步长映射到一维嵌入中，然后将其与E链接为条件消息（conditioning information）。由于我们的条件向量只是一维的，我们没有使用StableDiffusion中的cross-attention mechanism。相反，我们直接使用特征线性调制层（feature-wise linear modulation layer）将conditioning information与UNet卷积块的特征映射合并。我们使用的UNet主干有四个编码块，一个中间块和四个解码块。使用一个basic channel number $c_u$ ，encoder块的通道维数为 $[c_u,2c_u,3c_u,5c_u]$ ，decoder块的通道数相反（对称的），中间块的通道数为 $5c_u$。我们在最后三个encoder块 和 前三个decoder块 中添加了一个注意力块，距离来说，我们添加了两个多头自注意力层和一个全连接层作为注意力块。（忘了 ，之后再看一遍开个新坑），head数为 嵌入层数/$c_u$ 。然后是参数设置，在 forward process，使用了N=1000 steps。采用$\beta_1=0.0015$到$\beta_N=0.0195$的线性噪声范围。采样过程中，使用的是DDIM（看到都说训练用DDPM，采样用DDIM，会更快而且没什么影响）采样 200 steps</p></blockquote><p>VAE的encoder和decoder都是由卷积模块组成的，每个卷积模块由多个残差神经网络块（ResNet blocks，由卷积层和残差链接构成）组成，ResNet感觉可以开新坑</p><p>VAE的Loss，由重建损失，对抗损失，高斯约束损失组成（前面提到过<br>对抗损失：是用来提升重建质量的，具体来说，就是用一个模型（这里用的PatchGAN）来对重建梅尔谱图分块后进行预测，判断这个块是真的还是假的，输出logits，最大化正确识别真实patch的logits，同时最小化错误识别假patch的logits。<br>高斯约束损失：使VAE学习一个连续的结构化的潜在空间，而不是一个无组织的潜在空间，按照原始VAE的说法，这里应该是一个KL散度</p><p>Vocoder用的HiFi-GAN，这个之后开新坑</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>写了点注释<br>代码看不懂，论文又看不懂，死了得了</p><p>在推理过程中，$\epsilon_\theta(z_n,n),\epsilon_\theta(z_n,n,E^y)$ 两个值是一起从模型出来的，然后在第一维切开成两半<br></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">e_t_uncond, e_t = self.model.apply_model(x_in, t_in, c_in).chunk(<span class="number">2</span>)</span><br></pre></td></tr></tbody></table></figure><p></p><p>完整的UNet结构在 <code>ddpm.py</code> 里进<br></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">out = self.diffusion_model(x, t, y=cc)</span><br></pre></td></tr></tbody></table></figure><br>里面确实可以看到四个块，至于通道数我没有深究<p></p><p>大概看了一遍推理的过程，跟着调试走了一遍，训练的代码没看S</p>]]></content>
      
      
      <categories>
          
          <category> 论文笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 论文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Efficient large-scale audio tagging via transformer-to-cnn knowledge distillation</title>
      <link href="/2023/11/10/Efficient%20large-scale%20audio%20tagging%20via%20transformer-to-cnn%20knowledge%20distillation/"/>
      <url>/2023/11/10/Efficient%20large-scale%20audio%20tagging%20via%20transformer-to-cnn%20knowledge%20distillation/</url>
      
        <content type="html"><![CDATA[<h1 id="Efficient-large-scale-audio-tagging-via-transformer-to-cnn-knowledge-distillation"><a href="#Efficient-large-scale-audio-tagging-via-transformer-to-cnn-knowledge-distillation" class="headerlink" title="Efficient large-scale audio tagging via transformer-to-cnn knowledge distillation"></a>Efficient large-scale audio tagging via transformer-to-cnn knowledge distillation</h1><p>作者：<a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Schmid%2C+F">Florian Schmid</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Koutini%2C+K">Khaled Koutini</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Widmer%2C+G">Gerhard Widmer</a><br>机构：Johannes Kepler University Linz, Austria<br>发表情况： (ICASSP) 2023</p><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>先说明了在audio tagging任务中，transformer已经取代了之前CNN的支配地位，这是由于transformer能够扩大和利用大型数据集（如Audio set<br>但是，CNN也有其自己的优点，CNN是一种经过充分研究和理解的处理图像的架构，有非常适合的归纳偏置，比如局域性偏差，权重共享和平移等变性，此外，CNN有一个特定的接受场（receptive field，指的是kernel？），可以控制模型的泛化能力<br><a href="https://www.zhihu.com/question/264264203">归纳偏置inductive biases</a><br>相较于CNN，Transformer建立在全局注意力上，则没有相应的归纳偏置</p><p>在AudioSet上，Transformer取得了比CNN更好的效果，但是Transformer比CNN更复杂很多，全局注意力机制的参数两量随序列长度呈指数级增长，在边缘设备上无法部署。</p><p>本文使用一个效果很好的Transformer作为教师模型，训练一个高效的CNN，取得了很好的效果，少了10倍的参数，100倍的乘法操作。</p><p>主要贡献：</p><ul><li>提供了一个在参数大小和推理速度上都很高效的AT模型</li><li>提出了一个从Transformer到CNN的知识蒸馏框架</li></ul>]]></content>
      
      
      <categories>
          
          <category> 论文笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识蒸馏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FF14mod一文速通</title>
      <link href="/2023/11/07/FF14mod%E4%B8%80%E6%96%87%E9%80%9F%E9%80%9A/"/>
      <url>/2023/11/07/FF14mod%E4%B8%80%E6%96%87%E9%80%9F%E9%80%9A/</url>
      
        <content type="html"><![CDATA[<h1 id="FF14mod一文速通"><a href="#FF14mod一文速通" class="headerlink" title="FF14mod一文速通"></a>FF14mod一文速通</h1><p>目前我了解到的主要是两个mod框架，<code>Dalamud</code>和<code>TexTools</code>，其中Dalamud支持热更新，仓库索引，一些模型替换，舞蹈动作等我一般用这个，TexTools不支持热更新，需要关闭游戏进行更换，主要用作身体模型的替换（如Bibo+，Gen系列模型等）</p><p>除了这两个模型替换的东西之外，还有自定动作姿势软件 <code>Anamnesis</code>，装修模拟软件 <code>makeplace-windows</code>，滤镜 <code>Gshade</code>（还有打本轮椅<code>ACT</code>）</p><p>阅读本文前，你需要有方法可以绕过<code>Chinese Wall</code>，本文的所有mod都需要在国际互联网下载 🥺</p><h2 id="上述工具的获取方法"><a href="#上述工具的获取方法" class="headerlink" title="上述工具的获取方法"></a>上述工具的获取方法</h2><p>Dalamud: <a href="https://bbs.tggfl.com/topic/32/dalamud-%E5%8D%AB%E6%9C%88%E6%A1%86%E6%9E%B6">非著名学者的博客</a><br>TexTools: <a href="https://github.com/TexTools/FFXIV_TexTools_UI">github仓库</a><br>在右边的release下载最新版本<br><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20231107214713511.png" alt=""></p><p>exe是安装包，压缩包解压即用</p><p>不是，我突然发现有个作者写的很全，贴一下他的博客页好了<br><a href="https://jckling.github.io/categories/Game/">jckling的blog</a></p><p>Anamnesis: <a href="https://github.com/imchillin/Anamnesis/releases">github仓库</a><br>注意，国服和国际服的版本不统一，请在release中找国服对应的版本，使用方法见上面jckling的博客<br>makeplace: <a href="https://jawslouis.itch.io/makeplace">网址</a><br>用法上面的博客也写了</p><h2 id="Dalamud框架用法"><a href="#Dalamud框架用法" class="headerlink" title="Dalamud框架用法"></a>Dalamud框架用法</h2><p>首先，mod下载见这个网站：<a href="https://www.xivmodarchive.com/">Xiv mod Archive</a><br>没登录只能查看大众级内容，但是模型是限制级的，建议注册一下，模型比游戏的细节很多，手指不是油条了<br>相关内容见：<a href="https://xiaohuohu.cn/tool/dalamud/">小火狐</a><br>在设置里可以添加代理，设置clash的端口：<br><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20231107233041420.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 玩 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FF14 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VQ-VAE相关</title>
      <link href="/2023/11/07/VQ-VAE%E7%9B%B8%E5%85%B3/"/>
      <url>/2023/11/07/VQ-VAE%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<h1 id="VQ-VAE相关"><a href="#VQ-VAE相关" class="headerlink" title="VQ-VAE相关"></a>VQ-VAE相关</h1><h2 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h2><p>原理解读：</p><ul><li><a href="https://zhuanlan.zhihu.com/p/657857297">https://zhuanlan.zhihu.com/p/657857297</a></li><li><a href="https://zhuanlan.zhihu.com/p/633744455">https://zhuanlan.zhihu.com/p/633744455</a></li><li><a href="https://www.spaces.ac.cn/archives/6760">https://www.spaces.ac.cn/archives/6760</a></li><li><a href="https://zhuanlan.zhihu.com/p/260627899">https://zhuanlan.zhihu.com/p/260627899</a></li><li><a href="https://zhuanlan.zhihu.com/p/429686815">https://zhuanlan.zhihu.com/p/429686815</a></li></ul><p>实现：</p><ul><li><a href="https://zhuanlan.zhihu.com/p/640000410">https://zhuanlan.zhihu.com/p/640000410</a></li></ul><h2 id="Auto-Encoder"><a href="#Auto-Encoder" class="headerlink" title="Auto Encoder"></a>Auto Encoder</h2><p>自动编码器，由一对编码器和解码器组成，编码器从原始数据中抽取出隐变量特征，解码器使用这个隐变量去还原原始数据<br><img src="https://pic3.zhimg.com/80/v2-6371146dd171e22faf9d5c87ffb163d6_1440w.webp" alt="AE"></p><p>自动编码器是一种数据的压缩算法，其中数据的压缩和解压缩函数是数据相关的、有损的、从样本中自动学习的<br>这个框架在训练完成之后，编解码过程是没有随机性的，常用于特征提取</p><p>对于AE，如果我们想随机生成一个隐变量，送入Decoder中得到一个生成的数据，这样做往往是行不通的（为什么</p><p>这里引入一个向量空间的概念，隐变量实际上就是一个多维向量，每一个输入的数据（就当是图片好了），在Encoder的处理下，都会被映射为n维向量空间中的一个点。但是，对于所有的输入数据，这些点在向量空间中的分布==并不是均匀的==，将MINIST数据集的隐变量降维可视化之后得到的结果如下：<br><img src="https://pic3.zhimg.com/80/v2-81231c59df037eb41ea653c54f21f042_1440w.webp" alt="MINIST"><br>可以看到，对于同类别的输入数据的隐变量，其在向量空间中的距离可能确实会比较接近，但是整个向量空间中==仍然存在许多没有与原始输入数据对应的点==，使用这些点作为Decoder的输入，产生的图像可能毫无意义。</p><blockquote><p>这就是我们所说的潜在空间没有正则化的意思。 这样的潜在空间只有少数具有生成能力的区域/簇，这意味着对潜在空间中簇内的任何点进行采样都会生成与该簇相关的变量， 但是整个潜在空间并不都具备生成能力。 不属于任何簇的区域将产生垃圾输出。 一旦网络被训练，并且训练数据被移除，我们就无法知道解码器从一个随机采样的潜在向量产生的输出是否有效。</p></blockquote><p>对于有效输入，AE能够将它们压缩到更少的维度，基本消除了冗余，所以能够用来做压缩</p><h2 id="Variational-Auto-Encoder"><a href="#Variational-Auto-Encoder" class="headerlink" title="Variational Auto Encoder"></a>Variational Auto Encoder</h2><p>变分自动编码器，这个变分是什么？（科学空间中提到这是二阶范数求导中用到的方法）<br>先看结构（==看一下这个分布的数量是怎么界定的，是定好的还是生成的==）<br>均值和方差的数量是定好的，代码里使用两个线性层分别生成<br></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">self.mean_linear = nn.Linear(prev_channels * img_length * img_length,</span><br><span class="line">                                     latent_dim)</span><br><span class="line">self.var_linear = nn.Linear(prev_channels * img_length * img_length,</span><br><span class="line">                                    latent_dim)</span><br></pre></td></tr></tbody></table></figure><br>均为隐变量维数，然后在forward的过程中：<br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mean = self.mean_linear(encoded)</span><br><span class="line">logvar = self.var_linear(encoded)</span><br><span class="line">eps = torch.randn_like(logvar)</span><br><span class="line">std = torch.exp(logvar / <span class="number">2</span>)</span><br><span class="line">z = eps * std + mean</span><br></pre></td></tr></tbody></table></figure><br>会如下文所讲的，取一个 $\varepsilon$ 然后乘标准差加均值，这样就可以做梯度了<p></p><p><img src="https://pic4.zhimg.com/80/v2-9b4ff3e9dc22347d478e25ceba528363_1440w.webp" alt="VAE"></p><p>相较AE，VAE在Encoder的部分得到的不再是隐变量，而是一堆均值和方差，送入Decoder中的 $Z_i$ 则是以这堆均值和方差的正态分布为基准采样得到的。</p><p>相较AE，VAE的输出则是一个概率分布，而不是一个离散的值。为什么是这么做呢</p><p>看了几篇，有这么几种说法，首先是对上面那个向量空间的说法：</p><blockquote><p>VAE的编码器不输出潜空间中的向量，而是输出每个输入的潜空间中预定义分布的参数。然后VAE对这个潜在分布施加约束，迫使它成为一个正态分布。这个约束确保了潜在空间是正则化的。</p><p>很可惜，AE的编码器编码出来的向量空间是不规整的。也就是说，解码器只认识经编码器编出来的向量，而不认识其他的向量。如果你把自己随机生成出来的向量输入给解码器，解码器是生成不出有意义的图片的。</p></blockquote><p>这样的处理让隐变量具有了语义，在两个不同的分布之间的点，会具有两个分布融合的属性，可视化如下<br><img src="https://pic2.zhimg.com/80/v2-87b589ea7d2b954570509dc7dde8765d_1440w.webp" alt=""></p><p>我只能说，看起来更散</p><p>科学空间中用概率论来解释<br>要做生成，实际上是假设了隐变量 Z 服从某些常见的分布，然后希望训练一个模型 $X=g(Z)$ ，这个模型能够将原来的概率分布映射到训练集的概率分布。<br>对于一个生成模型，我们希望从一批数据 $\{X_1,\dots ,X_n\}$ 中得到 $X$ 的分布 $p(X)$ ，然后直接从这个分布中抽样，就能得到所有可能的 $X$ 了，但是这对于稍微复杂的数据就已经是不可能的了，于是我们将分布改一改，由全概率公式</p><script type="math/tex; mode=display">p(X) = \sum_Z p(X|Z)p(Z)</script><p>变成一个后验概率分布乘一个假设已知的概率分布，这里的 $p(X|Z)$ 就描述了一个由 $Z$ 来生成 $X$ 的模型。<br>但是在训练的过程中，隐变量 $Z$ ，需要与每个输入 $X_k$ 对应，也就是说，对于多个输入 $X_k$ 如果隐变量只有一个分布，那就不能将 $Z$ 与每个输入一一对应，所以对每个输入，我们需要一个专属于这个输入的 $p(Z|X_k)$ ，这是VAE网络拟合的目标</p><p><img src="https://spaces.ac.cn/usr/uploads/2018/03/2584918486.png" alt=""></p><p>于是构建两个神经网络 $\mu _k = f_1(X_k),\; \log \sigma_k^2 = f_2(X_k)$ 使用对数的目的是将非负的 $\sigma_k^2$ 映射到实数域，就不需要加激活函数了，模型训练目标是最小化重建损失，即 $\min(D(X_k,\hat X_k))$ </p><p>然后提到了一个模型退化的问题，在训练过程中，为了最小化重建损失，会使方差尽可能为0，这样模型就会失去随机性，退化为普通的自编码器（就是过拟合问题？）</p><p>为了解决这个问题，需要在重构损失的基础上添加新的损失来约束模型，VAE方法中使用的是目标正态分布与标准正态分布的KL散度作为这个额外的Loss。</p><p>Loss选择完后，开始做模型训练了，但是由分布抽样得到的隐变量 $Z$ 是无法进行反向传播的（抽样过程不可导），文中使用 <code>reparameterization trick</code> 来解决这个问题。</p><p>$Z$ 落在点 $Z$ 处的概率表示为概率密度乘上 $Z$ 的微分</p><script type="math/tex; mode=display">\frac{1}{\sqrt{2\pi\sigma^2}} \exp\left(-\frac{(z-\mu)^2}{2\sigma^2}\right)dz</script><p>文章在这里凑微分，把微分项凑成了 $d\left( \frac{z-\mu}{\sigma}\right)$ ，令 $\varepsilon = \frac{z-\mu}{\sigma}$ ，则 $\varepsilon$ 是服从标准正态分布的，所以从分布中抽样 $Z$ 相当与从标准正态中抽样 $\varepsilon$ ，让 $Z=\mu + \varepsilon\times \sigma$ ，然后对这个抽样结果进行梯度下降</p><h2 id="Vector-Quantisized-Variational-AutoEncoder"><a href="#Vector-Quantisized-Variational-AutoEncoder" class="headerlink" title="Vector Quantisized - Variational AutoEncoder"></a>Vector Quantisized - Variational AutoEncoder</h2><p>VAE编码出来的向量是连续向量，也就是说向量的每一维都是浮点数。对某一维的轻微改动，对生成的影响不大。<br>VQ-VAE的作者认为，VAE的生成图片之所以质量不高，是因为图片被编码成了连续向量，而编码成离散向量更加合理。</p><blockquote><p>比如我们想让画家画一个人，我们会说这个是男是女，年龄是偏老还是偏年轻，体型是胖还是壮，而不会说这个人性别是0.5，年龄是0.6，体型是0.7。</p></blockquote><p>但是Decoder对离散的向量处理是乏力的，对离散的值要做梯度下降，又会默认按照是连续的值来计算，比如对0，1，2三个离散值，神经网络会认为1是在0，2之间的一种状态。为了解决整个这个问题，借用了NLP中对离散单词的处理方法。</p><p>将每个离散标签映射到独一无二的连续向量上，这样完成了一个连续-离散-连续的转换，可以让模型完成计算。<br>这个部分在VQ-VAE中叫做<code>embedding space</code>，在后续文章中则被称为 <code>codebook</code><br><img src="https://pic4.zhimg.com/v2-4382b984165170e238be55b914ff3503_r.jpg" alt="vqvae结构"></p><p>在具体介绍VQ-VAE的细节之前，先作如下说明：</p><ul><li>模型本身无法单独完成生成任务，需要配合其他自回归模型（下面会提到）</li><li>对于生成的离散向量，单条向量的信息载荷是无法承担一张图片或者其他内容的信息的，实际使用过程中是生成一个具有离散值的矩阵，每个值是embedding space中的一个向量下标。</li></ul><p>VQ-VAE用于图像生成的工作过程</p><ul><li>训练VQ-VAE的编码器和解码器，使得VQ-VAE能够把图像变为由离散标签组成的‘小图像’，也能将小图像解码回大图像。</li><li>训练一个自回归模型，能够生成小图像</li><li>随机采样时，先用自回归模型采样出小图像，再用VQ-VAE把小图像翻译成最终生成的图像</li></ul><p>就是说明明两个模型都可以做生成，但为什么要放在一起做，看到两个文章从两个角度分别是这么解释的</p><ol><li>这样做的目的是为了解决一个问题： ==离散空间不好采样== <font color="red">为什么？</font></li><li>自回归模型逐像素生成很慢，且对于大一点的图像，不管是RNN还是CNN模型都无法很好的捕捉这么长的依赖。</li></ol><h3 id="实现细节"><a href="#实现细节" class="headerlink" title="实现细节"></a>实现细节</h3><p><strong>输出离散编码</strong><br>Encoder输出的是一个连续的编码向量，这里用 $Z_e$ 表示，使用<strong>最近邻重构</strong>的方法，将这个输出的编码向量与嵌入空间 $E=[e_1,e_2,\dots,e_k]$ 中的某一个向量关联起来，达到离散化的目的。</p><ol><li>首先，一张 $n\times n\times 3$ 的图片被传入一个 encoder 中，得到连续的编码向量 $Z_e$</li><li>计算向量 $Z_e$ 与嵌入空间中的每个向量的距离，选取距离最小的下标 $k = \underset{j}{\arg\min} \Vert z-e_j\Vert_2$ </li><li>将与 $Z_e$ 距离最小的嵌入空间向量记为 $Z_q$ ，作为最后的编码结果，送入 decoder 中。</li></ol><p>如下：<br><img src="https://pic4.zhimg.com/80/v2-85ebf6142dc52d39497b9161c5099d77_1440w.webp" alt="VQVAE细节"></p><p><strong>梯度无法传递的情况下的优化过程</strong><br>我们优化的最终目标是要让输出的重建图像与原图像一致，所以很自然的有重建损失</p><script type="math/tex; mode=display">L_{reconstruct}=\Vert x - decoder(z_q)\Vert ^2_2</script><p>但是从 $Z_e$ 到 $Z_q$ 的过程是不可导的，这里采用了一个叫 Straight-Through Estimator 的方法，将梯度直接传递到 encoder，在 <a href="BEATS-Audio-Pre-Training-with-Acoustic-Tokenizers.md">BERTS</a> 中也有用到，指的是==前向传播和反向传播的计算可以不对应==<br>基于这一技术，VQ-VAE提出了一种叫做sg（stop gradient）的运算</p><script type="math/tex; mode=display">sg(x)= \left\{\begin{aligned}&x(in\;forward\;propagation)\\&0(in\;backward\;propagation)\end{aligned}\right.</script><p>正向传播不变，反向传播不计算梯度，最终的Loss如下：</p><script type="math/tex; mode=display">L_{reconstruct}=\Vert x-decoder(z_e+sg(z_q-z_e))\Vert_2^2</script><p>按照 $sg(x)$ 的定义，正向传播的Loss为：</p><script type="math/tex; mode=display">L=\Vert x-decoder(z_q)\Vert_2^2</script><p>反向传播求梯度为：</p><script type="math/tex; mode=display">L=\Vert x-decoder(z_e)\Vert_2^2</script><p>对于嵌入空间的优化，我们希望嵌入空间的每一个向量应该能概括一类编码器输出的向量，也就是说，对于一类编码器输出，其对应的嵌入空间向量应该与他们尽量接近，很自然的我们会把这个距离添加到Loss函数中去</p><script type="math/tex; mode=display">L_d = \Vert z_e-z_q\Vert_2^2</script><p>但是作者认为，嵌入空间向量相对来说比较自由，而编码器输出 $z_e$ 要尽可能保证重构效果，所以要让 $z_q$ 比 $z_e$ 更努力的接近对方，于是把上面的Loss拆成两项</p><script type="math/tex; mode=display">L_d = \alpha \Vert sg(z_e)-z_q\Vert_2^2 + \beta \Vert z_e-sg(z_q)\Vert_2^2</script><p>其中第一项误差来自字典学习算法里的经典算法 Vector Quantisation，用于优化嵌入空间<br>第二个误差叫做专注误差，用于约束编码器的输出，不让它跑到离嵌入空间太远的地方。</p><h2 id="总结和思考"><a href="#总结和思考" class="headerlink" title="总结和思考"></a>总结和思考</h2><p>看完VQ-VAE再回去看之前那篇BEATs，一些方法是直接照搬VQ-VAE的做法的，这个离散标签化的做法在图像音频上都取得了很好的效果，但是我觉得这种孤立的，离散的做法无法表示出码本中的向量之间的关系。</p><p>VAE中对隐变量的向量空间正则化是否可以通过某种手段应用到 zero-shot 分类当中去？</p>]]></content>
      
      
      <categories>
          
          <category> 论文笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VAE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora迁移到Obsdian</title>
      <link href="/2023/11/07/Typora%E8%BF%81%E7%A7%BB%E5%88%B0Obsdian/"/>
      <url>/2023/11/07/Typora%E8%BF%81%E7%A7%BB%E5%88%B0Obsdian/</url>
      
        <content type="html"><![CDATA[<p>总体看的这篇文章<a href="https://zhuanlan.zhihu.com/p/554333805"># Obsidian+Git完美维护Hexo博客</a></p><p>图床配置可以沿用之前的picgo（core）因为觉得得开一个东西太麻烦了就没用那个带ui的，安装插件就行<a href="obsidian://show-plugin?id=obsidian-image-auto-upload-plugin">image auto upload</a><br>在测试中这个插件开启 <code>剪贴板自动上传</code>按钮，大概率会上传失败，所以还是用手动的按钮，按 <code>ctrl+P</code>可以打开命令菜单，里面有个 <code>Upload all images</code></p><p>然后不想改之前的图片保存路径，就是md文件同名文件夹，见<br><a href="https://www.cnblogs.com/yangstar/articles/17060727.html">如何让Obsidian的图片存储形式设置为 ./${filename}.assets</a></p><p>然后是之前用typora的毛病，就是写公式不写<code>\begin&amp;\end</code></p><script type="math/tex; mode=display">\begin{aligned}a=a\newlinea=a\end{aligned}</script><p>以后写公式注意换行用<code>\newline</code>，不要用 <code>\\</code></p>]]></content>
      
      
      <categories>
          
          <category> 技术问题记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dcase2023Challendge</title>
      <link href="/2023/11/06/Dcase2023Challendge/"/>
      <url>/2023/11/06/Dcase2023Challendge/</url>
      
        <content type="html"><![CDATA[<h1 id="Dcase2023-Challendge-的6个Task"><a href="#Dcase2023-Challendge-的6个Task" class="headerlink" title="Dcase2023 Challendge 的6个Task"></a>Dcase2023 Challendge 的6个Task</h1><h2 id="Task1：Low-Complexity-Acoustic-Scene-Classification"><a href="#Task1：Low-Complexity-Acoustic-Scene-Classification" class="headerlink" title="Task1：Low-Complexity Acoustic Scene Classification"></a>Task1：Low-Complexity Acoustic Scene Classification</h2><p>低复杂度声学场景分类</p><p>该任务的目标是在 ==计算量和内存容量较低的设备== 上进行声学场景分类，这对模型复杂性造成了一定的限制。 任务设置基于有限的模型复杂性、声学上多样化的数据和多个移动设备，反映了 ASC 的现实应用。 该任务的重点是用于获得稳健模型的训练策略，这些模型同时足够轻，可以在嵌入式系统上运行。 所需实现的具体细节例如是最大内存限额，但没有预定义的参数表示格式、30 MMAC 的最大限额以及计算能耗的要求。</p><h2 id="Task2：First-Shot-Unsupervised-Anomalous-Sound-Detection-for-Machine-Condition-Monitoring"><a href="#Task2：First-Shot-Unsupervised-Anomalous-Sound-Detection-for-Machine-Condition-Monitoring" class="headerlink" title="Task2：First-Shot Unsupervised Anomalous Sound Detection for Machine Condition Monitoring"></a>Task2：First-Shot Unsupervised Anomalous Sound Detection for Machine Condition Monitoring</h2><p>用于==机器状态监测==的首次无监督异常声音检测</p><p>此任务的目标是仅使用域转移条件下的正常声音数据来识别机器是否正常或异常。 与 DCASE 2022 任务 2 的一个主要区别是开发数据集和评估数据集之间的机器类型集完全不同。 因此，参与者有望开发出一种能够处理全新机器类型的系统。</p><h2 id="Task3：Sound-Event-Localization-and-Detection-Evaluated-in-Real-Spatial-Sound-Scenes"><a href="#Task3：Sound-Event-Localization-and-Detection-Evaluated-in-Real-Spatial-Sound-Scenes" class="headerlink" title="Task3：Sound Event Localization and Detection Evaluated in Real Spatial Sound Scenes"></a>Task3：Sound Event Localization and Detection Evaluated in Real Spatial Sound Scenes</h2><p>在真实空间声音场景中评估声音==事件定位和检测==</p><p>SELD 是检测感兴趣的多个声音事件类别的时间活动并估计其活动时各自的空间轨迹的联合任务。 此任务是 DCASE2022 SELD 系统任务 3 的延续，该系统在真实空间注释记录上进行了评估。 对真实录音进行测试（以及部分训练）带来了提高现实世界性能的新挑战和机遇。 为了促进进一步的创新，除了类似于 DCASE2022 的纯音频设置之外，该任务还将有一个额外的设置，参与者还可以访问录制场景的 360° 视频。</p><h2 id="Task4：-S-ound-E-vent-D-etection-with-Weak-Labels-and-Synthetic-Soundscapes-Sound-Event-Detection-with-Soft-Labels"><a href="#Task4：-S-ound-E-vent-D-etection-with-Weak-Labels-and-Synthetic-Soundscapes-Sound-Event-Detection-with-Soft-Labels" class="headerlink" title="Task4：==S==ound ==E==vent ==D==etection with ==Weak Labels== and Synthetic Soundscapes; Sound Event Detection with Soft Labels"></a>Task4：==S==ound ==E==vent ==D==etection with ==Weak Labels== and Synthetic Soundscapes; Sound Event Detection with Soft Labels</h2><p>声音事件检测的目标是在音频记录中可能存在多个事件的情况下提供事件类别以及事件时间边界。 该任务的目标是使用具有不同类型注释的训练数据集执行声音事件检测，旨在探索如何利用不同类型的注释。 由于强标记数据的获取成本高昂，容易出现注释者偏差，并且不考虑注释者的不确定性，因此在本任务中，我们建议研究：子任务 A 中的弱标记数据和强标记合成音景（后续 DCASE 任务 4）和 子任务 B 中的软标记数据（声音的非二元活动）。在这两种情况下，域中标记的数据都可以与外部数据集一起使用。 为了鼓励子任务的交叉参与，两个子任务将共用一个基线。</p><h3 id="Subtask-A-Sound-event-detection-with-weak-labels-and-synthetic-soundscapes"><a href="#Subtask-A-Sound-event-detection-with-weak-labels-and-synthetic-soundscapes" class="headerlink" title="Subtask A: Sound event detection with ==weak labels and synthetic soundscapes=="></a><strong>Subtask A: Sound event detection with ==weak labels and synthetic soundscapes==</strong></h3><p>该任务是 DCASE 2022 任务 4 的延续。今年的主要新颖之处是将提供额外的提取嵌入集，评估将包括对能耗的系统评估，将探索替代评估方法来探索 系统对工作点变化的鲁棒性。</p><h3 id="Subtask-B-Sound-event-detection-with-soft-labels"><a href="#Subtask-B-Sound-event-detection-with-soft-labels" class="headerlink" title="Subtask B: Sound event detection with ==soft labels=="></a>Subtask B: Sound event detection with ==soft labels==</h3><p>这是一个新的子任务，其中训练数据的注释以 1 秒的分辨率给出。 注释基于多个注释器，并且聚合是每 1s 段每个事件类 0 到 1 之间的值。 这些被认为是软标签，表明注释者池对内容的不确定性。 软注释用于训练声音事件检测系统，该系统应以 1 秒的时间分辨率执行。</p><h2 id="Task5：Few-shot-Bioacoustic-Event-Detection"><a href="#Task5：Few-shot-Bioacoustic-Event-Detection" class="headerlink" title="Task5：Few-shot Bioacoustic Event Detection"></a>Task5：Few-shot Bioacoustic Event Detection</h2><p>少样本==生物声学事件检测==</p><p>该任务重点关注动物发声的少样本学习条件下的声音事件检测（SED）。 参与者将被要求创建一种方法，可以从长录音中的五个发声示例中提取信息，并从这些示例中进行归纳以找到音频中的其余声音事件。 生物声学（动物声音）设置满足了动物研究人员的真正需求，同时还提供了一个定义明确、受限但高度可变的领域来评估小样本学习方法。 2021年和2022年，这项任务激发了大量创新，但技术创新仍有很大空间，以实现稳健强劲的表现。 对于这一版本，该任务将保持大部分细节与 2022 年相同，以确保最大程度的可比性，但将引入来自新动物声音记录场景的新的未见过的评估录音，以确保评估尽可能具有代表性，同时也确保 评估中有真正看不见的数据集。</p><h2 id="Task6：Automated-Audio-Captioning-and-Language-Based-Audio-Retrieval"><a href="#Task6：Automated-Audio-Captioning-and-Language-Based-Audio-Retrieval" class="headerlink" title="Task6：Automated Audio Captioning and Language-Based Audio Retrieval"></a>Task6：Automated Audio Captioning and Language-Based Audio Retrieval</h2><p>自动音频字幕和基于语言的音频检索</p><p>该任务通过使用自然语言来表示音频信号的丰富特征来解决音频信号的分析问题。 任务设置在其他方面与 DCASE 2022 挑战任务 6 类似，但有一些变化，以考虑到该领域的发展。</p><h3 id="Subtask-A-Automated-Audio-Captioning"><a href="#Subtask-A-Automated-Audio-Captioning" class="headerlink" title="Subtask A: Automated Audio Captioning"></a><strong>Subtask A: Automated Audio Captioning</strong></h3><p>该任务是 DCASE 2022 挑战赛任务 6 的延续，重点研究“我们如何让机器从一般声音中理解更高层次的人类感知信息？”。 用于对提交内容进行排名的指标将结合 SPIDEr 和流畅性错误检测模型。 参与者仍将报告 METEOR、CIDEr 和 SPICE 指标。 此外，FENSE 和 CB 分数将作为对比指标进行报告。</p><h3 id="Subtask-B-Language-Based-Audio-Retrieval"><a href="#Subtask-B-Language-Based-Audio-Retrieval" class="headerlink" title="Subtask B: Language-Based Audio Retrieval"></a><strong>Subtask B: Language-Based Audio Retrieval</strong></h3><p>该任务是 DCASE 2022 挑战赛任务 6 的延续，该任务的目标是评估检索系统将自由格式文本描述作为输入的方法，并应该根据音频信号与给定描述的匹配度对固定数据集中的音频信号进行排名。</p><p> 在 2022 年挑战赛中，音频文件的基本真实相关性被认为是二元的（true or false），因此只有与其相应字幕匹配的音频文件才被认为是相关的，而所有其他音频文件都是不相关的。在 2023 年挑战赛中，通过众包分级相关性分数和使用归一化分布累积增益作为指标来解决这一限制。mAP@10（临界值 10 时的平均精度）和recall@k（即 recall@1、recall@5 和 recall@10）将用作次要指标。</p><h2 id="Task7：Foley-Sound-Synthesis"><a href="#Task7：Foley-Sound-Synthesis" class="headerlink" title="Task7：Foley Sound Synthesis"></a>Task7：Foley Sound Synthesis</h2><p>拟音音效合成（电影里的音效合成，如爆炸声飞机声等）</p><p>此任务旨在构建一个拟音声音合成系统，该系统可以生成适合给定拟音声音类别的合理音频信号。 拟音声音类别由声音事件和环境背景声音组成。 该挑战有两个子问题——使用和不使用外部资源的模型开发。 参与者需要针对两个问题之一提交一个系统，并且每个问题都进行独立评估。 提交的作品将由 Frechet Audio Distance (FAD) 进行评估，然后进行主观测试。</p><h1 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h1><p>1，3，4，6感觉相关性更大，仔细看看</p><h2 id="Task1-低复杂度声学场景分类"><a href="#Task1-低复杂度声学场景分类" class="headerlink" title="Task1 低复杂度声学场景分类"></a>Task1 低复杂度声学场景分类</h2><p>目的是使用低运算和内存余量的设备进行声学场景分类，这对模型的复杂性施加了一定的限制，例如限制参数数量和计算次数</p><p>有10个预先定义的声学场景类别</p><p>还要求跨多种设备的泛化</p><p>类别如下：</p><ul><li>Airport - <code>airport</code></li><li>Indoor shopping mall - <code>shopping_mall</code></li><li>Metro station - <code>metro_station</code></li><li>Pedestrian street - <code>street_pedestrian</code></li><li>Public square - <code>public_square</code></li><li>Street with medium level of traffic - <code>street_traffic</code></li><li>Travelling by a tram - <code>tram</code></li><li>Travelling by a bus - <code>bus</code></li><li>Travelling by an underground metro - <code>metro</code></li><li>Urban park - <code>park</code></li></ul><h2 id="Task3-在真实空间声音场景中评估的声音事件定位和检测"><a href="#Task3-在真实空间声音场景中评估的声音事件定位和检测" class="headerlink" title="Task3 在真实空间声音场景中评估的声音事件定位和检测"></a>Task3 在真实空间声音场景中评估的声音事件定位和检测</h2><p>给定多通道音频输入，SELD系统输出每个目标声音类别的时间活动轨迹，以及当轨迹活动时的一个或多个对应的空间轨迹。这产生了声学场景的时空特征，可用于各种机器认知任务。</p><p>任务还给了相应场景的全景视频，可以给一些距离信息？</p><p>录音格式给了一堆看不懂的东西</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20231106200018432.png" alt="image-20231106200018432"></p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20231106195952080.png" alt="image-20231106195952080"></p><p>共13个类别：</p><ol><li><strong>Female speech, woman speaking</strong></li><li><strong>Male speech, man speaking</strong></li><li><strong>Clapping</strong></li><li><strong>Telephone</strong></li><li><strong>Laughter</strong></li><li><strong>Domestic sounds</strong></li><li><strong>Walk, footsteps</strong></li><li><strong>Door, open or close</strong></li><li><strong>Music</strong></li><li><strong>Musical instrument</strong></li><li><strong>Water tap, faucet</strong></li><li><strong>Bell</strong></li><li><strong>Knock</strong></li></ol><h2 id="Task4：室内环境的声音事件检测"><a href="#Task4：室内环境的声音事件检测" class="headerlink" title="Task4：室内环境的声音事件检测"></a>Task4：室内环境的声音事件检测</h2><p>任务目标是传统SED，就是分类＋时间定位</p><p>提供了两个子任务，使用不同数据集</p><p><strong>A：使用弱标签和合成的声景（背景音？</strong></p><p>scientific questions</p><ul><li>在使用混杂数据集训练SED系统的时候，什么策略工作的更好，包括<ul><li>大量的非平衡未标记的训练数据</li><li>小的弱标记数据集</li><li>来自独立的声音时间和背景的合成数据集</li></ul></li><li>使用从预训练模型中提取的嵌入会带来什么影响</li><li>使用外部数据的潜在优势是什么</li><li>模型的复杂性和能耗对性能有什么影响</li><li>时间后处理（这是什么）对性能有什么影响</li><li>有没有更鲁棒的方法来评估系统（并考虑训练差异</li></ul><p><strong>B：软标签分类（就是每个标签不再是0或1而是一个概率</strong></p><p>research question：软标签是否包含任何有用的附加信息来帮助训练更好的声音事件检测系统？</p><h2 id="Task6：自动音频字幕和基于语言的音频检索"><a href="#Task6：自动音频字幕和基于语言的音频检索" class="headerlink" title="Task6：自动音频字幕和基于语言的音频检索"></a>Task6：自动音频字幕和基于语言的音频检索</h2><p><strong>A:自动音频字幕</strong></p><p>就是给一段音频，生成这段音频对应的文本描述</p><p><strong>B：基于文本的音频搜索</strong></p><p>该子任务涉及使用声音内容文本描述（即音频字幕）检索音频信号。 人工书写的音频字幕将用作文本查询。 对于每个文本查询，此任务的目标是从给定数据集中检索 10 个音频文件，并根据它们与查询的匹配对它们进行排序。 通过这个子任务，我们的目标是激发对基于语言的音频检索和不受约束的文本描述的进一步研究。</p>]]></content>
      
      
      <categories>
          
          <category> 声学相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SED </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TinyCLIP: CLIP Distillation via Affinity Mimicking and Weight Inheritance</title>
      <link href="/2023/10/17/TinyCLIP/"/>
      <url>/2023/10/17/TinyCLIP/</url>
      
        <content type="html"><![CDATA[<h1 id="TinyCLIP-CLIP-Distillation-via-Affinity-Mimicking-and-Weight-Inheritance"><a href="#TinyCLIP-CLIP-Distillation-via-Affinity-Mimicking-and-Weight-Inheritance" class="headerlink" title="TinyCLIP: CLIP Distillation via Affinity Mimicking and Weight Inheritance"></a>TinyCLIP: CLIP Distillation via Affinity Mimicking and Weight Inheritance</h1><p>这篇论文研究的是如何通过知识蒸馏的方式压缩大规模的视觉语言预训练模型,如CLIP模型。</p><h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p>提出了一个新的 跨模态蒸馏的方法，用于大规模的 language-image model</p><p>这种方法使用了两种核心技术 匹配度模仿（affinity mimicking）和 权重继承（weight inheritance）</p><p>匹配度模仿探索了在知识提炼过程中模态之间的相互作用，使学生模型能够模仿教师在 视觉-语言 匹配空间中学习跨模态特征对齐的行为。</p><p>权重继承将预先训练好的权重从教师模型传递给学生模型，以提高蒸馏效率</p><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p>CLIP是OpenAI在2021年提出的一个里程碑式的视觉语言预训练模型。CLIP的独特之处在于它从海量的图像-文本配对数据中联合学习图像和文本表示,而不需要人工标注。但是,CLIP通常依赖较大的模型容量,存在计算效率不高的限制,这成为其实际应用和部署的主要障碍。综上,CLIP是具有里程碑意义的视觉语言预训练模型,但是还存在可以改进的空间。</p><p><a href="https://zhuanlan.zhihu.com/p/493489688">神器CLIP：连接文本和图像，打造可迁移的视觉模型</a></p><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>现在的CLIP等视觉语言预训练模型参数量通常非常大，使用成本很高，不利于实际应用。但是直接训练小模型的性能往往比较差,所以需要通过压缩的方式获得更小、更快的模型而不影响性能。</p><p>以往的压缩方法大多集中在单模态上，而跨模态压缩研究还不够。</p><p>跨模态压缩的挑战：</p><ul><li>类CLIP模型通常有两个分支，图像编码器和文本编码器，蒸馏过程中需要考虑跨模态分支之间的相关信息。</li><li>跨模态训练CLIP训练资源太大，有没有办法降低CLIP蒸馏的成本</li></ul><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/tinyclip1.png" alt="image-20231017165005778"></p><p>通过系统的实验,论文证明了该方法可以高效地压缩CLIP模型,取得非常不错的性能。例如,在ImageNet上的零样本评价中,压缩后的TinyCLIP-ViT使用6300万参数就能达到61.4%的top-1准确率,相比之下原始的OpenCLIP-ViT需要1.26亿参数才能达到62.9%的准确率。这证明该方法可以获得更小、更快的视觉语言模型。</p><p>总之,该论文解决了一个非常重要而有价值的问题,提出了一种有效的压缩视觉语言预训练模型的新方法,获得了state-of-the-art的结果。这对于推动这类模型的实际应用具有重要意义</p><h2 id="Related-Work"><a href="#Related-Work" class="headerlink" title="Related Work"></a>Related Work</h2><p>创新点：</p><ul><li>关注语言-图像 预训练阶段，这是在CLIP压缩方向第一个工作</li><li>知识蒸馏方面，关注的是跨模态方面预训练阶段</li><li>权重继承方法和模型裁剪技术有相似之处，但是有三点不同<ul><li>之前的工作集中在单模态</li><li>模型裁剪强调裁剪架构？我们认为从原始模型中继承的权重也非常有益</li><li>利用多阶段的过程，加速小模型收敛</li></ul></li></ul><h2 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h2><p>包含三个部分：affinity mimicking, weight inheritance, multi-stage progessive distillation</p><h3 id="Distillation-with-Affinity-Mimicking"><a href="#Distillation-with-Affinity-Mimicking" class="headerlink" title="Distillation with Affinity Mimicking"></a>Distillation with Affinity Mimicking</h3><p>这里提到以前的方法阻止模型学习负样本对之间的相关性。<del>没懂</del>(现在懂了，就是算L0的时候将单位矩阵变成0矩阵了，在算交叉熵的时候就没用了，丢失了大量信息)：</p><blockquote><p>The visual and textual representations are linearly projected into a cross-modal common space by minimizing a contrastive loss L0. The supervision signal can be viewed as an identity matrix, in which diagonal values are set to 1 for positive image-text pairs, and all others are set to 0 for negative pairs. This signal disregards the similarity between negative pairs, which prevents the model from acquiring a nuanced understanding of the intricate relationships among negative pairs.</p><p>视觉和文本表示通过最小化对比损失L0线性投影到跨模态公共空间。监督信号可以看作是一个单位矩阵，对于正的图像-文本对，对角线值设为1，对于负的图像-文本对，对角线值设为0。这个信号忽略了负对之间的相似性，这使得模型无法获得对负对之间复杂关系的细致理解。</p><p>注：$L_0=CE(<i_s,t_s>,I)$</i_s,t_s></p></blockquote><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/tinyclip2.png" alt="image-20231018101507633"></p><p>考虑两种匹配度蒸馏损失，图片到文本的损失 $L_{I2T}$ 和 文本到图片的损失 $L_{T2I}$ </p><p>前者基于图像-文本匹配度 $A_{I2T}$ 学习教师和学生模型之间的一致性，$A_{I2T}$ 表示图像与批处理中所有文本描述的匹配度分数（图中黄色的行）</p><p>后者是指语言与文本匹配度$A_{T2I}$的对齐，将文本描述与所有图像进行比较，获得匹配分数(图中蓝色列)。</p><p>这两个loss组合起来得到最后的匹配度模仿蒸馏loss</p><script type="math/tex; mode=display">L_{distill}=L_{I2T}+L_{T2I}\\=CE(A^s_{I2T},A^t_{I2T})+CE(A^s_{T2I},A^t_{T2I})</script><p>这里CE代表交叉熵，s和t表示学生和老师模型，$A_{I2T}$ 和 $A_{T2I}$ 中的元素定义为：</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/tinyclip3.png" alt="image-20231018164430588"></p><p>就是对应的图像和文本的embedding内积再过softmax，但是多了一个temperature parameter $\tau$</p><p><a href="https://zhuanlan.zhihu.com/p/132785733">温度参数的作用</a></p><p>这种亲和力模仿让学生模型不仅 align 对应的图像和文本,也能在整个视觉语言亲和力空间中模仿老师模型的行为,进行更好的视觉语言特征对齐,有利于知识迁移。</p><h3 id="Distillation-with-Weight-Inheritance"><a href="#Distillation-with-Weight-Inheritance" class="headerlink" title="Distillation with Weight Inheritance"></a>Distillation with Weight Inheritance</h3><p>权重继承的关键挑战是从教师模型的大量权重中区分出重要的权重。我们提出了两种选择重要权重的方法，手动权重继承和自动权重继承</p><h4 id="手动继承"><a href="#手动继承" class="headerlink" title="手动继承"></a>手动继承</h4><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/tinyclip4.png" alt="image-20231018161827678"></p><p>从图中可以看出，text encoder对于深度方向有更多的冗余，抽走一层后准确度不怎么变化。而image encoder在宽度上有更多的冗余（通道层面，怎么看出来的）所以固定的选取k层text encoder和前k个image channel来作为小模型的初始化。大大加速了模型蒸馏。</p><h4 id="自动继承"><a href="#自动继承" class="headerlink" title="自动继承"></a>自动继承</h4><p>手动继承需要先验知识，会限制在复杂模型上的效果，所以需要自动继承。</p><p>受大语言模型中结构裁剪方法的启发，论文介绍了一种可学习掩盖来确认权重的重要性。</p><p>考虑到跨模态的不同，可学习掩盖被分别应用于视觉和语言分支。引入了一个总体稀疏性约束（overall sparsity constraint）以保证所选的重要权重数量满足我们的压缩要求。</p><p>不失一般性，使用transformer架构作为例子来讲解权重继承方法的细节。</p><p>一个标准的transformer块包括一个多头注意力层（MHA）和一个反馈网络（FFN）decoder不是有俩</p><p>见<a href="https://zhuanlan.zhihu.com/p/338817680">Transformer模型详解</a></p><p>为了在更细粒度的层面捕捉权重的重要性，引入两个掩盖变量 $m_{head},m_{int}\in\{0,1\}$ 来识别MHA中冗余的注意力头和FFN中的冗余神经元。</p><p>这两种掩盖分别应用于注意力头的激活函数上和FNN的中间层中</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/tinyclip5.png" alt="image-20231018112335926"></p><p>可以看到，在多头注意力层中，掩盖变量乘在了concat阶段上每个注意力层的输出上</p><p>在FFN中，乘在了第一层的激活函数之后，（diag是对角线？），意思是只乘了矩阵主轴上的值</p><p>在自动继承过程中，有两种损失用于共同优化掩模和模型，即稀疏性损失和蒸馏损失:</p><script type="math/tex; mode=display">L=L_{distill}+L_{sparsity}\\L_{sparsity}=\lambda \cdot(p-q)+\beta\cdot(p-q)^2</script><p>q是目标压缩率，p是模型可学习掩盖的总体压缩率</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/tinyclip6.png" alt="image-20231018110351826"></p><p>直观看来，就是掩盖变量为1的数量占总体参数的比率</p><blockquote><p>我的理解：掩盖网络的某些组成成分，再进行训练，来判断该部分是否对模型的判断有重大影响。</p></blockquote><h3 id="Progressive-Multi-Stage-Distillation"><a href="#Progressive-Multi-Stage-Distillation" class="headerlink" title="Progressive Multi-Stage Distillation"></a>Progressive Multi-Stage Distillation</h3><p>一个简单的思想，就是单次大幅度压缩会带来较大的性能损失，甚至导致无法收敛。这是由于大型模型的大多数权重被直接丢弃，包括那些对确保模型质量和收敛性很重要的权重。</p><p>总体压缩算法如下：</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/tinyclip7.png" alt="image-20231018201050293"></p><p>算法里还包括缩小后继续训练缩小模型到拟合的步骤</p><h2 id="Experiments"><a href="#Experiments" class="headerlink" title="Experiments"></a>Experiments</h2><h3 id="Implementation-Details"><a href="#Implementation-Details" class="headerlink" title="Implementation Details"></a>Implementation Details</h3><p>CLIP的两个模态，text和image，需要不同的encoder架构，其中，text encoder使用的是transformer架构，image encoder有两种，ViT和ResNet。</p><p>对于权重继承，选择了两个模型作为对象，OpenCLIP ViT-B/32 or ViT-B/16 and CLIP ResNet-50</p><p>对于蒸馏，选择在LAION-2B数据集上预训练的 OpenCLIP ViT-B/32 作为教师模型，因为它在ImageNet上的zero-shot的准确率有65.6%，且有很快的推理速度。还在DaViT架构上做了拓展等。</p><p><strong>相似度模仿</strong></p><p>探索了各种不同的loss方案。</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/tinyclip8.png" alt="image-20231018170934096"></p><p>L0和L1作为基础Loss function，可以和其他loss组合使用</p><p><strong>权重继承</strong></p><p>将压缩过程分成多个stage，每个stage中应用手动或者自动的权重继承，然后是将一些参数</p><h3 id="Comparison-with-State-of-the-Art-Models"><a href="#Comparison-with-State-of-the-Art-Models" class="headerlink" title="Comparison with State-of-the-Art Models"></a>Comparison with State-of-the-Art Models</h3><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/tinyclip9.png" alt="image-20231018211305790"></p><p>在两个数据集 YFCC-15M和LAION-400M上分别训练</p><p>在YFCC-15M上做了两轮压缩，性能见上方表格第一大部分</p><p>在400M大小的数据集上对三个模型进行了压缩：Florence DaViT. CLIP ResNet, OpenCLIP Vit-B/32</p><h3 id="Ablation-Study"><a href="#Ablation-Study" class="headerlink" title="Ablation Study"></a>Ablation Study</h3><p><strong>相似度模仿的影响</strong>：</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/tinyclip10.png" alt="image-20231018205433041"></p><p>跨模态的loss会比相似度模仿方法低0.2%，由于缺少在公共嵌入空间中对齐学生图像和文本特征的损失，单模态交互的准确性较低</p><p><strong>权重继承的影响</strong>：</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/tinyclip11.png" alt="image-20231018194143249"></p><p>两种权重继承方法对准确率的提升都很大，且自动方法比手工调整的方法好。</p><p><strong>language-image models的冗余性</strong></p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/tinyclip12.png" alt="image-20231018205804025"></p><p>上面这个图，红色的部分是压缩之后被移除的，可以看出，对于Image Encoder，嵌入的通道数有许多都是冗余的，而对于Text Encoder，在层数上的冗余更大。</p><p><strong>Impact of teacher models</strong></p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/tinyclip13.png" alt="image-20231018212204665"></p><p>结论：教师能力强并不一定能保证权重继承效果更好。相反，具有类似架构和更高性能的教师模型提供了更好的选择。</p><p><strong>Impact of multi-stage progressive distillation</strong></p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/tinyclip14.png" alt="image-20231018211844728"></p><p>结论：结果表明，在将预训练模型的知识传递到压缩后的小模型上时，多级递进压缩具有较好的效果。</p><p><strong>Training cost</strong></p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/tinyclip15.png" alt="image-20231018213241093"></p><p>结论：权重继承能够加速跨模态蒸馏。收敛快的原因也有模型小的因素</p><h3 id="Transfer-Learning-Results"><a href="#Transfer-Learning-Results" class="headerlink" title="Transfer Learning Results"></a>Transfer Learning Results</h3><p>在23个数据集上做分类：在zero-shot基准中，在7个数据集上获胜，在linear-probe基准中，在9个数据集上获胜，表现接近由同样数据集训练的OpenCLIP ViT-B/32</p><p>zero-shot鲁棒评估：在5个和ImageNet数据集不相关的数据集上做评估，如下：</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/tinyclip16.png" alt="image-20231018212403815"></p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>在本文中，我们提出了TinyCLIP，一种用于提取大规模视觉语言预训练模型的方法。主要介绍了亲和模仿和权重继承两种核心技术。大量的实验和消融研究已经证明了TinyCLIP的有效性，表明它可以在保持竞争性能的同时大大减小模型尺寸。未来，我们将探索在极小模型上进一步提高跨模态蒸馏效率的方法。</p>]]></content>
      
      
      <categories>
          
          <category> 论文笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识蒸馏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>clousx6语法</title>
      <link href="/2023/10/11/clousx6%E8%AF%AD%E6%B3%95/"/>
      <url>/2023/10/11/clousx6%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="clousx6语法"><a href="#clousx6语法" class="headerlink" title="clousx6语法"></a>clousx6语法</h1><p>首先是块的概念</p><p><img src="/2023/10/11/clousx6%E8%AF%AD%E6%B3%95/image-20231011234455202.png" alt="image-20231011234455202"></p><p>这里是两个块</p><p>一个块由多行文字组成，每个块之间以一个空行隔开（不能有多个空行）</p><p>在一个块内：</p><figure class="highlight tex"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">菜单</span><br><span class="line">查看好感度<span class="keyword">\r</span></span><br><span class="line">签到<span class="keyword">\r</span></span><br><span class="line">增加好感度+数字<span class="keyword">\r</span></span><br><span class="line">减少好感度+数字<span class="keyword">\r</span></span><br></pre></td></tr></tbody></table></figure><p>第一行是触发词，接受到消息后会执行下面的所有内容，比如上面这个例子，就会把剩下的全部发送出来</p><p>然后是变量的定义，以字母开头，接冒号，是一个变量（当成一个放东西的盒子就行，以变量名作为区分）</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a:<span class="number">2</span></span><br></pre></td></tr></tbody></table></figure><p>上面就创建了一个名为 a 的变量，并给他赋值为2</p><p>对于好感度变量，考虑到手机杀后台，所以以文件的形式保存，就是你发的</p><figure class="highlight tex"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a:<span class="built_in">$</span>读 个人/<span class="comment">%群号%/好感度/%QQ% a 0$</span></span><br></pre></td></tr></tbody></table></figure><p>这里两个 $$ 中间夹的是一个子块，会把返回的值存储在变量 a</p><p>所以读写好感你都按发的来</p>]]></content>
      
      
      <categories>
          
          <category> 玩 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> clousx6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BEATS-Audio Pre-Training with Acoustic Tokenizers</title>
      <link href="/2023/10/11/BERTS-Audio-Pre-Training-with-Acoustic-Tokenizers/"/>
      <url>/2023/10/11/BERTS-Audio-Pre-Training-with-Acoustic-Tokenizers/</url>
      
        <content type="html"><![CDATA[<h1 id="BEATs-Audio-Pre-Training-with-Acoustic-Tokenizers"><a href="#BEATs-Audio-Pre-Training-with-Acoustic-Tokenizers" class="headerlink" title="BEATs: Audio Pre-Training with Acoustic Tokenizers"></a>BEATs: Audio Pre-Training with Acoustic Tokenizers</h1><h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p>自监督学习这几年用的很好，当离散标签预测(dicrete label prediction)被广泛运用于其他领域，最先进的音频SSL模型仍然使用重建损失进行预训练。与重建损失相比，语义丰富的离散标签预测鼓励SSL像人类感知一样抽象高级音频语义并丢弃冗余细节。但是这种token比较难获得。</p><p>本文提出了一个新的框架，BEATs(Bidirectional Encoder representation from Audio Transformers)</p><p>一个迭代音频预训练框架，用于从Audio Transformers(这是什么东西)学习双向编码表示</p><p>其中声学标记器（acoustic tokenizer）和音频SSL模型是通过迭代优化的</p><p><strong>tokenizer：</strong></p><p>可以理解为一个切割的东西，把音频信号分为处理的最小元素</p><p>在第一次迭代中，我们使用随机投影作为声学标记器，以掩码和标签预测的方式训练音频SSL模型。然后，我们通过从预训练或微调的音频SSL模型中提取语义知识来训练下一次迭代的声学标记器。重复迭代，希望声学标记器和音频SSL模型相互促进。</p><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>然而，人们普遍认为重建损失只考虑了低层次时频特征的正确性，而忽略了高层次的音频语义抽象</p><p>由于以下原因，离散标签预测可能是比重建更好的音频预训练目标。</p><ul><li>第一，从生物学角度看，人类通过抽取和聚类高级的<strong>语义信息</strong>而不是关注低级的时频细节来理解音频。</li><li>第二，从建模效率来看，重建损失可能会浪费音频模型参数容量和预训练资源来预测语义无关信息，而离散标签预测鼓励模型丢弃冗余细节，可以提高音频建模效率。</li><li>第三，更适配多模态预训练。</li></ul><p>离散标签预测的应用仍然很困难，主要有两个原因：</p><ul><li>第一，由于音频信号是连续的，同一声事件在不同场合可能有不同的持续时间，因此不像语音处理那样直接将音频分割成语义上有意义的token</li><li>另一方面，与语音不同，一般音频信号包含的数据变化过大，包括各种非语音声学事件和环境声音，无法直接应用常用的语音分词器进行音素信息提取</li></ul><p>然后用本文提出的这个BEATs来解决上面的问题</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20231011111452071.png" alt="image-20231011111452071"></p><p>就是这么一个循环迭代器，在每轮迭代中，首先用 声学标记器 生成未标记的音频的离散标签，并使用它们来优化带有掩码和离散标签预测损失的音频SSL模型。</p><p>经过收敛后，音频SSL模型充当教师的角色，引导声学标记器通过知识蒸馏学习音频语义</p><p>在第一次迭代中，我们使用随机投影声学标记器来生成离散标签作为冷启动。</p><h2 id="Related-Work"><a href="#Related-Work" class="headerlink" title="Related Work"></a>Related Work</h2><p>本文提出的框架优点：</p><p>使用少量标记样本，自监督学习</p><p>创新点：</p><ul><li><p>在自监督预训练方法中第一次使用掩蔽离散标签预测（masked discrete label prediction objective）</p></li><li><p>一个新的tokenizer：在上一轮SSL模型的监督下训练声学分词器，和之前的自动编码（对应reconstruction loss）和adhoc聚类方法不同（之前的我也不懂）</p></li></ul><h2 id="BEATs"><a href="#BEATs" class="headerlink" title="BEATs"></a>BEATs</h2><h3 id="Iterative-Audio-Pre-training"><a href="#Iterative-Audio-Pre-training" class="headerlink" title="Iterative Audio Pre-training"></a>Iterative Audio Pre-training</h3><p>就还是上面那张图那个大流程，对于图中的音频SSL模型，可以用一个预训练的SSL模型或者一个微调的SSL模型。微调的模型从自监督预训练和监督微调中学习语义知识，对于语义蒸馏的工作做的更好。</p><h3 id="Acoustic-Tokenizers"><a href="#Acoustic-Tokenizers" class="headerlink" title="Acoustic Tokenizers"></a>Acoustic Tokenizers</h3><p>这个部件用于为BEATs生成每轮迭代的离散标签。在第一轮迭代中，考虑到教师模型不可用（就是SSL model没训练），用随机投影标记器（什么玩意）将连续的声学特征聚类到离散的标签中作为冷启动</p><p>第二轮开始，训练一个自蒸馏标记器，使用从上次迭代中获得的预训练/微调音频SSL模型中提取的语音感知知识生成精细的离散标签。</p><h4 id="Cold-Start-Random-Projection-Tokenizer"><a href="#Cold-Start-Random-Projection-Tokenizer" class="headerlink" title="Cold Start: Random-Projection Tokenizer"></a>Cold Start: Random-Projection Tokenizer</h4><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20231011190012224.png" alt="image-20231011190012224"></p><p>架构如图</p><p>按照图的样子，首先，输入是 $X = \{x_t\}^T_{t=1}$（corresponding acoustic features），就当是语谱图好了，将语谱图分成小块，通过一个线性层 $W$ ，$W$ 的参数是<strong>随机生成</strong>的，得到向量 $Wx_t$ 。</p><p>然后引入一个 <code>frozen Codebook Embeddings</code>  ，相当于一个<strong>嵌入参考码本</strong>，定义为 $V=\{v_i\}^K_{i=1}$ ，K 是码本大小，其中的每个向量 $v_i$ 的值都是随机生成的。</p><p>接下来，需要计算向量 $Wx_t$ 与 $V$ 中的每个向量的二阶范数，然后将每个输入向量的离散标签定义为：二阶范数最小的码本向量的下标：</p><script type="math/tex; mode=display">\hat z_t= \underset{i}{\arg\min} \Vert v_i-Wx_t\Vert_2^2\qquad(1)</script><h4 id="Iteration-Self-Distilled-Tokenizer"><a href="#Iteration-Self-Distilled-Tokenizer" class="headerlink" title="Iteration: Self-Distilled Tokenizer"></a>Iteration: Self-Distilled Tokenizer</h4><p>第二次迭代，使用上一次迭代的SSL模型作为教师，可以是预训练或者微调模型，来教授当前轮的迭代标记器学习。我们称为 <code>Self-Distilled Tokenizer</code> ，为每个输入音频生成 patch-level 的离散标签。</p><p>具体结构如下图</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20231011201429823.png" alt="image-20231011192524254"></p><p>这里和冷启动又是一套不同的东西。首先对于输入，还是一样的格式 $X = \{x_t\}^T_{t=1}$ ，送入一个 12层的Transformer-based tokenizer encoder，得到编码向量序列 $E=\{e_t\}^T_{t=1}$ </p><p>然后应该是同样计算向量距离，不过这里计算的码本向量是一个叫 <code>Learnable Codebook Embeddings</code>的东西，不再是之前那个随机生成的而是一个可学习的，得到离散标签，距离计算规则如下：</p><script type="math/tex; mode=display">\hat z_t = \underset{i}{\arg\min} \Vert \ell_2(v_i)-\ell_2(e_t)\Vert_2^2\qquad(2)</script><p>L2正则化的目的是提高码本利用率</p><p>以量化向量序列 $E^q=\{v_{\hat z_t}\}^T_{t=1}$ 作为输入，使用一个3层的 Transformer estimator来预测上一层教师模型的输出 $\{\hat O_t\}^T_{t=1}$</p><p>为了解决向量量化不可微的问题，采用 <code>Straight-Through Gradients</code>机制，在反向传播过程中，直接将梯度从 $E^q$ 中复制到 $E$</p><p>这个 <code>Self-distilled tokenizer</code>的总体训练目标定义为 <code>Tokenizer estimator</code> 和 教师模型的输出之间的 <code>余弦相似度</code> 还有 $E$ 与 $E^q$ 之间的 <code>均方误差</code></p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20231011192524254.png" alt="image-20231011201429823"></p><p><code>sg</code> 是 stopgradient operator</p><p> 为什么是这样处理，后面两项是干嘛的</p><p>使用指数移动平均进行码本嵌入优化，以实现更稳定的标记器训练。</p><p>在推断时，舍弃<code>tokenizer estimator</code> ，并利用预训练的标记器编码器和码本嵌入将每个输入音频 X 转换为离散标签，如公式(2) 所示。</p><h3 id="Audio-SSL-Model"><a href="#Audio-SSL-Model" class="headerlink" title="Audio SSL Model"></a>Audio SSL Model</h3><h4 id="Backbone"><a href="#Backbone" class="headerlink" title="Backbone"></a>Backbone</h4><p>使用ViT架构作为主干网络，结构看图</p><h4 id="Pre-Training"><a href="#Pre-Training" class="headerlink" title="Pre-Training"></a>Pre-Training</h4><p>提出了一个 掩盖音频模型（Masked Audio Modeling）任务来进行预训练，如下图：</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20231013163709407.png" alt="image-20231012161311295"></p><p>不同于其他预训练方法，本模型是通过预测patch-level的离散标签来进行优化</p><p>给定输入patch序列 $X = \{x_t\}^T_{t=1}$ 和对应的离散声学标签（使用之前的tokenizer生成的） $\hat Z=\{\hat z_t\}^T_{t=1}$ </p><p>随机掩盖 75% 的输入小块（patches），表示为 $M = \{1,\dots,T\}^{0.75T}$ ，然后将未掩盖的块送入ViT encoder，得到表示 $R^U$ ，然后将未被掩盖的块的表示 和 被掩盖的位置的特征 并在一起送入Label Predictor</p><p>和 $\hat Z$ 做交叉熵算Loss</p><p>（感觉文章里好多错误）</p><h4 id="Fine-Tuning"><a href="#Fine-Tuning" class="headerlink" title="Fine-Tuning"></a>Fine-Tuning</h4><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20231013170901829.png" alt="image-20231013102456908"></p><p>在微调阶段，在最后放弃了标签预测器，改用一个特定于任务的（task-specific）线性分类器。以生成下游分类任务的标签。</p><p>首先在时域和频域随机的掩盖声学特征（和spec-augmentation的做法一样，但这个又是什么做法）然后展开成小块序列，和预训练不同的是，不再是将未掩盖的块送入ViT encoder中，而是将全部块都送入，得到表示，最后，使用一个线性分类器来计算每个类别的概率。概率计算如下（线性层出来还有两步图上没有，分别是一个池化和一个softmax）</p><script type="math/tex; mode=display">p(C) = softmax(MeanPool(W_cR))</script><p>采用二元交叉熵损失作为多标签分类任务或混合增强</p><h2 id="Experiment"><a href="#Experiment" class="headerlink" title="Experiment"></a>Experiment</h2><h3 id="Datasets"><a href="#Datasets" class="headerlink" title="Datasets"></a>Datasets</h3><p>在完整的AudioSet训练集中训练，在六个下游任务中评估，包括三个音频分类任务（AS-2M, AS-20K, ESC-50）三个语音分类任务（KS1, KS2, ER）</p><p>记一下几个不熟悉的数据集</p><p>ESC-50（Environmental Sound Classification）：是音频分类数据集，包含2000个5秒的环境录音，共50个类别，每个录音只有一个类别注释</p><p>KS2（Speech Commands V2）：是一个关键字发现数据集，包括105829个1秒的单词片段，用35个常用词类注释。被细分未训练集，验证集和测试集。</p><p>KS1（Speech Commands V1）：数据集和KS2一样，但是只包含10类关键字，1个silence，1个unknown类</p><p>ER（IEMOCAP）：是一个情感识别数据集，包含大约12小时的情感语音片段，并标注了4个类。</p><h3 id="Implementation-Details"><a href="#Implementation-Details" class="headerlink" title="Implementation Details"></a>Implementation Details</h3><p>讲了预训练网络层数和维度</p><p>声学特征提取，16000采样率，128组梅尔滤波器，25ms Povey窗函数，10ms步长</p><p>标准化为0均值，0.5标准差，展成16乘16小块</p><p>在AS-2M数据集上进行了3轮迭代预训练，分别得到4个模型：$BERTs_{iter1},BEATs_{iter2},BEATs_{iter3},BEATs_{iter3+}$</p><p>iter1是使用随机投射标记器生成的离散标签预训练的，从第二轮迭代开始，标记器不再是随机投射的而是训练的，iter2就是用训练的标记器生成的离散标签预训练的，iter3使用iter1和iter2作为老师自监督训练。</p><p>$BEATs_{iter3+}$ 预训练用的标记器是使用监督微调的$BEATs_{iter2}$作为老师训练的。</p><p>和其他 BEATs模型相比，3+在微调和预训练两个阶段都利用了下游任务的监督数据，</p><h3 id="Comparing-with-the-SOTA-Single-Models"><a href="#Comparing-with-the-SOTA-Single-Models" class="headerlink" title="Comparing with the SOTA Single Models"></a>Comparing with the SOTA Single Models</h3><p>第一轮迭代的模型 $BEATs_{iter1}$ ，使用的是随机投影标记器生成的离散标签，在6个任务中的5个任务上已经获得了比以前工作更好的性能，这表明了离散标签预测损失与重建损失相比的优越性。</p><p>对于第三次迭代，2和3 的性能相似，这说明自蒸馏标记器对不同给的SSL教师模型具有鲁棒性。并且如果使用经过微调的BEAT2模型作为教师模型，BEAT3+可以在as2m和as20k任务上带来显著的性能提升，通过在迭代训练中引入监督微调数据，Tokenizer和SSL model相互学习更多特定于任务的语义知识，这将有效提高在下游任务的性能。</p><h3 id="Comparing-Different-BEATs-Tokenizers"><a href="#Comparing-Different-BEATs-Tokenizers" class="headerlink" title="Comparing Different BEATs Tokenizers"></a>Comparing Different BEATs Tokenizers</h3><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20231013164319872.png" alt="image-20231013163709407"></p><p>可以看出，自蒸馏标记器比随机投影标记器的表现更好，特别是数据量少的情况下更为明显。</p><p>这是因为具有简单特征聚类过程的随机投影标记器<strong>不足以提供具有高级音频语义抽象的标签</strong>，而自提取标记器能够从预训练良好的音频SSL模型中提取语义知识到生成的离散标签。</p><p>另外，自蒸馏标记器，对不同的自监督学习老师模型不敏感，但是对不同的监督学习老师敏感。</p><h3 id="Comparing-Differrent-Pre-Training-Targets-via-Visualization"><a href="#Comparing-Differrent-Pre-Training-Targets-via-Visualization" class="headerlink" title="Comparing Differrent Pre-Training Targets via Visualization"></a>Comparing Differrent Pre-Training Targets via Visualization</h3><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20231012161311295.png" alt="image-20231013164319872"></p><p>使用ESC-50的音频样本，来比较不同SSL模型的预训练目标</p><p>上面三个图分别是，基于重建损失的SSL模型的声学特征，使用自监督学习预训练的老师学习的标记器量化的表示，使用监督学习微调的老师学习的标记器量化的表示</p><p>同一个颜色代表同一个类别，同一个颜色的不同点代表对原始数据添加的不同干扰，比如混响和噪声。</p><p>我的理解：</p><p>可以看出，对tokenizer的训练中引入监督学习微调，会提高表示之间的距离，语义信息更加丰富</p><h3 id="Comparing-with-the-SOTA-Ensemble-Models"><a href="#Comparing-with-the-SOTA-Ensemble-Models" class="headerlink" title="Comparing with the SOTA Ensemble Models"></a>Comparing with the SOTA Ensemble Models</h3><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20231013102456908.png" alt="image-20231013170901829"></p><p>第一次了解到 ensemble models的概念，大概就是把训练的几个模型的结果汇总，然后用一些方法计算最终结果，比如投票机制，均值机制等</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>BEATs，一个预训练框架，一个自监督学习模型。</p><p>提出了 self-distilled tokenizer，在预训练中，使用tokenizer生成的离散标签代替重建损失。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>BEATS-Audio Pre-Training with Acoustic Tokenizers</title>
      <link href="/2023/10/11/BEATS-Audio-Pre-Training-with-Acoustic-Tokenizers/"/>
      <url>/2023/10/11/BEATS-Audio-Pre-Training-with-Acoustic-Tokenizers/</url>
      
        <content type="html"><![CDATA[<h1 id="BEATs-Audio-Pre-Training-with-Acoustic-Tokenizers"><a href="#BEATs-Audio-Pre-Training-with-Acoustic-Tokenizers" class="headerlink" title="BEATs: Audio Pre-Training with Acoustic Tokenizers"></a>BEATs: Audio Pre-Training with Acoustic Tokenizers</h1><h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p>自监督学习这几年用的很好，当离散标签预测(dicrete label prediction)被广泛运用于其他领域，最先进的音频SSL模型仍然使用重建损失进行预训练。与重建损失相比，语义丰富的离散标签预测鼓励SSL像人类感知一样抽象高级音频语义并丢弃冗余细节。但是这种token比较难获得。</p><p>本文提出了一个新的框架，BEATs(Bidirectional Encoder representation from Audio Transformers)</p><p>一个迭代音频预训练框架，用于从Audio Transformers(这是什么东西)学习双向编码表示</p><p>其中声学标记器（acoustic tokenizer）和音频SSL模型是通过迭代优化的</p><p><strong>tokenizer：</strong></p><p>可以理解为一个切割的东西，把音频信号分为处理的最小元素</p><p>在第一次迭代中，我们使用随机投影作为声学标记器，以掩码和标签预测的方式训练音频SSL模型。然后，我们通过从预训练或微调的音频SSL模型中提取语义知识来训练下一次迭代的声学标记器。重复迭代，希望声学标记器和音频SSL模型相互促进。</p><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>然而，人们普遍认为重建损失只考虑了低层次时频特征的正确性，而忽略了高层次的音频语义抽象</p><p>由于以下原因，离散标签预测可能是比重建更好的音频预训练目标。</p><ul><li>第一，从生物学角度看，人类通过抽取和聚类高级的<strong>语义信息</strong>而不是关注低级的时频细节来理解音频。</li><li>第二，从建模效率来看，重建损失可能会浪费音频模型参数容量和预训练资源来预测语义无关信息，而离散标签预测鼓励模型丢弃冗余细节，可以提高音频建模效率。</li><li>第三，更适配多模态预训练。</li></ul><p>离散标签预测的应用仍然很困难，主要有两个原因：</p><ul><li>第一，由于音频信号是连续的，同一声事件在不同场合可能有不同的持续时间，因此不像语音处理那样直接将音频分割成语义上有意义的token</li><li>另一方面，与语音不同，一般音频信号包含的数据变化过大，包括各种非语音声学事件和环境声音，无法直接应用常用的语音分词器进行音素信息提取</li></ul><p>然后用本文提出的这个BEATs来解决上面的问题</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20231011111452071.png" alt="image-20231011111452071"></p><p>就是这么一个循环迭代器，在每轮迭代中，首先用 声学标记器 生成未标记的音频的离散标签，并使用它们来优化带有掩码和离散标签预测损失的音频SSL模型。</p><p>经过收敛后，音频SSL模型充当教师的角色，引导声学标记器通过知识蒸馏学习音频语义</p><p>在第一次迭代中，我们使用随机投影声学标记器来生成离散标签作为冷启动。</p><h2 id="Related-Work"><a href="#Related-Work" class="headerlink" title="Related Work"></a>Related Work</h2><p>本文提出的框架优点：</p><p>使用少量标记样本，自监督学习</p><p>创新点：</p><ul><li><p>在自监督预训练方法中第一次使用掩蔽离散标签预测（masked discrete label prediction objective）</p></li><li><p>一个新的tokenizer：在上一轮SSL模型的监督下训练声学分词器，和之前的自动编码（对应reconstruction loss）和adhoc聚类方法不同（之前的我也不懂）</p></li></ul><h2 id="BEATs"><a href="#BEATs" class="headerlink" title="BEATs"></a>BEATs</h2><h3 id="Iterative-Audio-Pre-training"><a href="#Iterative-Audio-Pre-training" class="headerlink" title="Iterative Audio Pre-training"></a>Iterative Audio Pre-training</h3><p>就还是上面那张图那个大流程，对于图中的音频SSL模型，可以用一个预训练的SSL模型或者一个微调的SSL模型。微调的模型从自监督预训练和监督微调中学习语义知识，对于语义蒸馏的工作做的更好。</p><h3 id="Acoustic-Tokenizers"><a href="#Acoustic-Tokenizers" class="headerlink" title="Acoustic Tokenizers"></a>Acoustic Tokenizers</h3><p>这个部件用于为BEATs生成每轮迭代的离散标签。在第一轮迭代中，考虑到教师模型不可用（就是SSL model没训练），用随机投影标记器（Random-Projection Tokenizer）将连续的声学特征聚类到离散的标签中作为冷启动</p><p>第二轮开始，训练一个自蒸馏标记器（Self-Distilled Tokenizer），使用从上次迭代中获得的预训练/微调音频SSL模型中提取的语音感知知识生成精细的离散标签。</p><h4 id="Cold-Start-Random-Projection-Tokenizer"><a href="#Cold-Start-Random-Projection-Tokenizer" class="headerlink" title="Cold Start: Random-Projection Tokenizer"></a>Cold Start: Random-Projection Tokenizer</h4><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20231011190012224.png" alt="image-20231011190012224"></p><p>架构如图</p><p>按照图的样子，首先，输入是 $X = \{x_t\}^T_{t=1}$（corresponding acoustic features），就当是语谱图好了，将语谱图分成小块，通过一个线性层 $W$ ，$W$ 的参数是<strong>随机生成</strong>的，得到向量 $Wx_t$ 。</p><p>然后引入一个 <code>frozen Codebook Embeddings</code>  ，相当于一个<strong>嵌入参考码本</strong>，定义为 $V=\{v_i\}^K_{i=1}$ ，K 是码本大小，其中的每个向量 $v_i$ 的值都是随机生成的。</p><p>接下来，需要计算向量 $Wx_t$ 与 $V$ 中的每个向量的二阶范数，然后将每个输入向量的离散标签定义为：二阶范数最小的码本向量的下标：</p><script type="math/tex; mode=display">\hat z_t= \underset{i}{\arg\min} \Vert v_i-Wx_t\Vert_2^2\qquad(1)</script><h4 id="Iteration-Self-Distilled-Tokenizer"><a href="#Iteration-Self-Distilled-Tokenizer" class="headerlink" title="Iteration: Self-Distilled Tokenizer"></a>Iteration: Self-Distilled Tokenizer</h4><p>第二次迭代，使用上一次迭代的SSL模型作为教师，可以是预训练或者微调模型，来教授当前轮的迭代标记器学习。我们称为 <code>Self-Distilled Tokenizer</code> ，为每个输入音频生成 patch-level 的离散标签。</p><p>具体结构如下图<br><img src="/2023/10/11/BEATS-Audio-Pre-Training-with-Acoustic-Tokenizers/image-20240308114123461.png" alt=""></p><p>这里和冷启动又是一套不同的东西。首先对于输入，还是一样的格式 $X = \{x_t\}^T_{t=1}$ ，送入一个 12层的Transformer-based tokenizer encoder，得到编码向量序列 $E=\{e_t\}^T_{t=1}$ </p><p>然后应该是同样计算向量距离，不过这里计算的码本向量是一个叫 <code>Learnable Codebook Embeddings</code>的东西，不再是之前那个随机生成的而是一个可学习的，得到离散标签，距离计算规则如下：</p><script type="math/tex; mode=display">\hat z_t = \underset{i}{\arg\min} \Vert \ell_2(v_i)-\ell_2(e_t)\Vert_2^2\qquad(2)</script><p>L2正则化的目的是提高码本利用率</p><p>以量化向量序列 $E^q=\{v_{\hat z_t}\}^T_{t=1}$ 作为输入，使用一个3层的 Transformer estimator来预测上一层教师模型的输出 $\{\hat O_t\}^T_{t=1}$</p><p>为了解决向量量化不可微的问题，采用 <code>Straight-Through Gradients</code>机制，在反向传播过程中，直接将梯度从 $E^q$ 中复制到 $E$</p><p>这个 <code>Self-distilled tokenizer</code>的总体训练目标定义为 <code>Tokenizer estimator</code> 和 教师模型的输出之间的 <code>余弦相似度</code> 还有 $E$ 与 $E^q$ 之间的 <code>均方误差</code><br><img src="/2023/10/11/BEATS-Audio-Pre-Training-with-Acoustic-Tokenizers/image-20240308152947443.png" alt=""><br><code>sg</code> 是 stopgradient operator</p><p> 为什么是这样处理，后面两项是干嘛的</p><p>使用指数移动平均进行码本嵌入优化，以实现更稳定的标记器训练。<br>在推断时，舍弃<code>tokenizer estimator</code> ，并利用预训练的标记器编码器和码本嵌入将每个输入音频 X 转换为离散标签，如公式(2) 所示。</p><h3 id="Audio-SSL-Model"><a href="#Audio-SSL-Model" class="headerlink" title="Audio SSL Model"></a>Audio SSL Model</h3><h4 id="Backbone"><a href="#Backbone" class="headerlink" title="Backbone"></a>Backbone</h4><p>使用ViT架构作为主干网络，结构看图</p><h4 id="Pre-Training"><a href="#Pre-Training" class="headerlink" title="Pre-Training"></a>Pre-Training</h4><p>提出了一个 掩盖音频模型（Masked Audio Modeling）任务来进行预训练，如下图：</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20231013163709407.png" alt="image-20231012161311295"></p><p>不同于其他预训练方法，本模型是通过预测patch-level的离散标签来进行优化</p><p>给定输入patch序列 $X = \{x_t\}^T_{t=1}$ 和对应的离散声学标签（使用之前的tokenizer生成的） $\hat Z=\{\hat z_t\}^T_{t=1}$ </p><p>随机掩盖 75% 的输入小块（patches），表示为 $M = \{1,\dots,T\}^{0.75T}$ ，然后将未掩盖的块送入ViT encoder，得到表示 $R^U$ ，然后将未被掩盖的块的表示 和 被掩盖的位置的特征 并在一起送入Label Predictor</p><p>和 $\hat Z$ 做交叉熵算Loss</p><p>（感觉文章里好多错误）</p><h4 id="Fine-Tuning"><a href="#Fine-Tuning" class="headerlink" title="Fine-Tuning"></a>Fine-Tuning</h4><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20231013170901829.png" alt="image-20231013102456908"></p><p>在微调阶段，在最后放弃了标签预测器，改用一个特定于任务的（task-specific）线性分类器。以生成下游分类任务的标签。</p><p>首先在时域和频域随机的掩盖声学特征（和spec-augmentation的做法一样，但这个又是什么做法）然后展开成小块序列，和预训练不同的是，不再是将未掩盖的块送入ViT encoder中，而是将全部块都送入，得到表示，最后，使用一个线性分类器来计算每个类别的概率。概率计算如下（线性层出来还有两步图上没有，分别是一个池化和一个softmax）</p><script type="math/tex; mode=display">p(C) = softmax(MeanPool(W_cR))</script><p>采用二元交叉熵损失作为多标签分类任务或混合增强</p><h2 id="Experiment"><a href="#Experiment" class="headerlink" title="Experiment"></a>Experiment</h2><h3 id="Datasets"><a href="#Datasets" class="headerlink" title="Datasets"></a>Datasets</h3><p>在完整的AudioSet训练集中训练，在六个下游任务中评估，包括三个音频分类任务（AS-2M, AS-20K, ESC-50）三个语音分类任务（KS1, KS2, ER）</p><p>记一下几个不熟悉的数据集</p><p>ESC-50（Environmental Sound Classification）：是音频分类数据集，包含2000个5秒的环境录音，共50个类别，每个录音只有一个类别注释</p><p>KS2（Speech Commands V2）：是一个关键字发现数据集，包括105829个1秒的单词片段，用35个常用词类注释。被细分未训练集，验证集和测试集。</p><p>KS1（Speech Commands V1）：数据集和KS2一样，但是只包含10类关键字，1个silence，1个unknown类</p><p>ER（IEMOCAP）：是一个情感识别数据集，包含大约12小时的情感语音片段，并标注了4个类。</p><h3 id="Implementation-Details"><a href="#Implementation-Details" class="headerlink" title="Implementation Details"></a>Implementation Details</h3><p>讲了预训练网络层数和维度</p><p>声学特征提取，16000采样率，128组梅尔滤波器，25ms Povey窗函数，10ms步长</p><p>标准化为0均值，0.5标准差，展成16乘16小块</p><p>在AS-2M数据集上进行了3轮迭代预训练，分别得到4个模型：$BERTs_{iter1},BEATs_{iter2},BEATs_{iter3},BEATs_{iter3+}$</p><p>iter1是使用随机投射标记器生成的离散标签预训练的，从第二轮迭代开始，标记器不再是随机投射的而是训练的，iter2就是用训练的标记器生成的离散标签预训练的，iter3使用iter1和iter2作为老师自监督训练。</p><p>$BEATs_{iter3+}$ 预训练用的标记器是使用监督微调的$BEATs_{iter2}$作为老师训练的。</p><p>和其他 BEATs模型相比，3+在微调和预训练两个阶段都利用了下游任务的监督数据，</p><h3 id="Comparing-with-the-SOTA-Single-Models"><a href="#Comparing-with-the-SOTA-Single-Models" class="headerlink" title="Comparing with the SOTA Single Models"></a>Comparing with the SOTA Single Models</h3><p>第一轮迭代的模型 $BEATs_{iter1}$ ，使用的是随机投影标记器生成的离散标签，在6个任务中的5个任务上已经获得了比以前工作更好的性能，这表明了离散标签预测损失与重建损失相比的优越性。</p><p>对于第三次迭代，2和3 的性能相似，这说明自蒸馏标记器对不同给的SSL教师模型具有鲁棒性。并且如果使用经过微调的BEAT2模型作为教师模型，BEAT3+可以在as2m和as20k任务上带来显著的性能提升，通过在迭代训练中引入监督微调数据，Tokenizer和SSL model相互学习更多特定于任务的语义知识，这将有效提高在下游任务的性能。</p><h3 id="Comparing-Different-BEATs-Tokenizers"><a href="#Comparing-Different-BEATs-Tokenizers" class="headerlink" title="Comparing Different BEATs Tokenizers"></a>Comparing Different BEATs Tokenizers</h3><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20231013164319872.png" alt="image-20231013163709407"></p><p>可以看出，自蒸馏标记器比随机投影标记器的表现更好，特别是数据量少的情况下更为明显。</p><p>这是因为具有简单特征聚类过程的随机投影标记器<strong>不足以提供具有高级音频语义抽象的标签</strong>，而自提取标记器能够从预训练良好的音频SSL模型中提取语义知识到生成的离散标签。</p><p>另外，自蒸馏标记器，对不同的自监督学习老师模型不敏感，但是对不同的监督学习老师敏感。</p><h3 id="Comparing-Differrent-Pre-Training-Targets-via-Visualization"><a href="#Comparing-Differrent-Pre-Training-Targets-via-Visualization" class="headerlink" title="Comparing Differrent Pre-Training Targets via Visualization"></a>Comparing Differrent Pre-Training Targets via Visualization</h3><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20231012161311295.png" alt="image-20231013164319872"></p><p>使用ESC-50的音频样本，来比较不同SSL模型的预训练目标</p><p>上面三个图分别是，基于重建损失的SSL模型的声学特征，使用自监督学习预训练的老师学习的标记器量化的表示，使用监督学习微调的老师学习的标记器量化的表示</p><p>同一个颜色代表同一个类别，同一个颜色的不同点代表对原始数据添加的不同干扰，比如混响和噪声。</p><p>我的理解：</p><p>可以看出，对tokenizer的训练中引入监督学习微调，会提高表示之间的距离，语义信息更加丰富</p><h3 id="Comparing-with-the-SOTA-Ensemble-Models"><a href="#Comparing-with-the-SOTA-Ensemble-Models" class="headerlink" title="Comparing with the SOTA Ensemble Models"></a>Comparing with the SOTA Ensemble Models</h3><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20231013102456908.png" alt="image-20231013170901829"></p><p>第一次了解到 ensemble models的概念，大概就是把训练的几个模型的结果汇总，然后用一些方法计算最终结果，比如投票机制，均值机制等</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>BEATs，一个预训练框架，一个自监督学习模型。</p><p>提出了 self-distilled tokenizer，在预训练中，使用tokenizer生成的离散标签代替重建损失。</p>]]></content>
      
      
      <categories>
          
          <category> 论文笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SED </tag>
            
            <tag> 论文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>声音事件检测综述</title>
      <link href="/2023/09/28/%E5%A3%B0%E9%9F%B3%E4%BA%8B%E4%BB%B6%E6%A3%80%E6%B5%8B%E7%BB%BC%E8%BF%B0/"/>
      <url>/2023/09/28/%E5%A3%B0%E9%9F%B3%E4%BA%8B%E4%BB%B6%E6%A3%80%E6%B5%8B%E7%BB%BC%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="声音事件检测综述"><a href="#声音事件检测综述" class="headerlink" title="声音事件检测综述"></a>声音事件检测综述</h1><p>cocktail part effect: 我们的日常环境由许多声源组成，这些声源产生了复杂的混合音频信号。人类的听觉感知在分离声源和引导注意力到感兴趣的声源方面是高度专业化的。</p><h2 id="Challenges-in-SED"><a href="#Challenges-in-SED" class="headerlink" title="Challenges in SED"></a>Challenges in SED</h2><p>声音的采集很困难，某些声音很短促，而且一般会和其他事件同时发生。目标事件的发生离麦克风很远，采集到的声压级很小，声传递函数对目标声事件的影响较大，可能会有其他更大声的事件在周围发生</p><p>不同声音同时发生还会产生谐波，改变声音基频</p><p>声音事件的种类是无穷的，对一个事件的描述是模糊的</p><p>SED系统因为这些复杂性，对于每个特定的应用场景，都需要数据收集和系统开发来满足其特定需求</p><h2 id="The-general-machine-learning-approach-for-SED"><a href="#The-general-machine-learning-approach-for-SED" class="headerlink" title="The general machine learning approach for SED"></a>The general machine learning approach for SED</h2><p>主要在用监督学习的方法解决SED任务</p><p>注释以二进制方式包含关于每个目标声音类的时间活动的信息，描述每个时间单位的类是否处于活动状态。这里想表达的应该是以One-hot的形式，叫做event roll</p><p>系统如图所示</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/v2-b0175ebd3419f9a11a3d0d8b00e28675_1440w.webp" alt="image-20230928160220264"></p><p>后面讲分帧处理相关的事，比如分帧会导致帧间较短的事件丢失等</p><p>早期的SED方法借用语音辨识和音乐信息提取的方法，比如高斯混合模型（GMMs）隐马尔可夫模型（HMMs），然而，声音事件不像语音和音乐，有那么明确的元素，所以这些方法不是那么适用。</p><p>然后讲DNN很好用</p><h3 id="Neural-Networks-for-Audio-Classification"><a href="#Neural-Networks-for-Audio-Classification" class="headerlink" title="Neural Networks for Audio Classification"></a>Neural Networks for Audio Classification</h3><p>他给我介绍什么是深度神经网络，我哭死 <span class="github-emoji" style="display:inline;vertical-align:middle"><span>😢</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f622.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p>使用给的激活函数一般都是非线性的，如此才能让模型拟合输入和输出之间复杂的，非线性的关系。</p><p>然后讲sigmoid，softmax，对于单标签分类，用一个softmax处理输出，得到每个label的概率</p><p>对于多类别多标签的分类，对每个输出使用一个分开的sigmoid函数。</p><p>然后讲cnn和rnn</p><p>CNN要注意的是，对于两个不同任务SED和音频分类，由于SED需要估计声音的时间活动，用于SED的CNN通常只用频域池化，也不对时域进行重采样。而音频分类需要队每个音频片段进行单个决策，没有必要保留时间轴。</p><p>RNN，这个之前没有了解过，这里详细看看</p><p>循环神经网络，按时间线展开，t时刻的输入得到的输出会与t-1时刻的输入相关见 <a href="https://zhuanlan.zhihu.com/p/30844905">链接</a></p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20231006192342057.png" alt="img"></p><p>like this</p><p>然后又讲到LSTM，这个出现过好多次了，但是没有具体看</p><p><strong>LSTM</strong></p><p>简单RNN会遇到长期以来问题，即只能处理我们需要较接近的上下文的情况，对于上下文离得很远的情况就束手无策，而且简单RNN还经常出现梯度消失和梯度爆炸问题</p><p>Long short term memory: 只有一部分的信息需要长期的记忆，而有的信息可以不记下来</p><p>还是看上面的链接吧，图太多懒得写笔记了</p><p>把cnn和rnn组合起来，适用于时间序列建模有利的任务，例如SED。卷积层充当特征提取器，循环层用于学习信号的时间演化</p><h2 id="Data"><a href="#Data" class="headerlink" title="Data"></a>Data</h2><p>对监督学习需要很多带标签数据，然后对SED问题，数据的特异性很大，因此，没有普遍适用的声学模型或SED数据集，而是针对手头的问题收集了许多数据集。</p><p>然后对数据的采集要尽可能覆盖该声音类别的所有特征变异性</p><p>strong labels：对短时间段的音频事件的注释，即标明事件是从哪个时间发生哪个时间结束</p><p>weak label：只指出事件发生，不说明发生时间，对应音频也相对较长</p><p>一个朴素的打标方法是给每一个有声音活动的片段详细的标签来注释所有可听到的声音，这种方法会导致产生很多标签，而样本数量不足，无法训练某些类别的声学模型。一个好的策略是提前选出目标类别，并且给这些类别的标签形式做出规定</p><p>打标签可以由专业注释者或者找牛马（crowdsourcing），从嘈杂或缺失的标签中学习需要特定的机器学习技术或成本函数，这些技术或成本函数能够补偿标签的不可靠性。</p><p>创建强标签最可靠的方法是合成，但是也会有种种问题，比如目前的合成方法没有选择声音时间组合的规则，生成的数据可能导致不自然的组合，或者可能无法捕捉现实环境的复杂性</p><p>然后介绍了一下各类数据集</p><h2 id="Signal-processing-methods-for-SED"><a href="#Signal-processing-methods-for-SED" class="headerlink" title="Signal processing methods for SED"></a>Signal processing methods for SED</h2><p>SED任务包括两个主要阶段，特征表示和分类，此外，该系统可能涉及一些预处理，例如，从声音中去除噪声。在训练阶段，通常使用一种称为数据增强的过程来产生更多的训练数据并增加其多样性。</p><h4 id="Data-augmentation"><a href="#Data-augmentation" class="headerlink" title="Data augmentation"></a>Data augmentation</h4><p>这里用的是augmentation，而不是enhencement，指的是通过合成等方法增加数据的数量。在SED中，操作和组合可用的音频允许创建重叠事件的新组合。此外，可以利用多种噪声和脉冲响应条件，通过与原始数据的混合和卷积来补充数据。所有这些技术都通过将声学变异性添加到训练数据中来提高声学建模过程的鲁棒性。</p><p>SED中用于数据增强的方法包括从基本的信号操作，如时间拉伸、基音移动和动态范围压缩，到更复杂的操作，如各种脉冲响应的卷积(模拟各种麦克风和声学环境)、子帧时移、块混频、混频，以及通过在改变信噪比的同时添加背景噪声来模拟一组噪声条件</p><p>在对强标签数据进行data augmentation时，要注意在做信号处理之后对标签也进行相应处理。</p><h4 id="Feature-representation"><a href="#Feature-representation" class="headerlink" title="Feature representation"></a>Feature representation</h4><p>目前，SED中最常用的特征是对数梅尔能量谱，在处理和表示自动语音识别，音乐信息检索，SED和声学场景分类方面被证明是有用的</p><p>然后讲mel谱是什么，这个看之前的笔记</p><p>DCT变换得到MFCC系数，在古早的GMMs方法中常用，因为他们支持使用对角线而不是全协方差矩阵，从而导致模型参数较少</p><p>在早期的环境声分类研究中，MFCCs是主要的特征选择。随着向深度学习的转变和计算资源和数据集的增加，通常使用深度神经网络以获得最佳精度。因为DNNs有能力学习相关的特征，DCT引入的去相关特征就不需要了。虽然神经网络能够从原始数据中学习，工程时频域表示仍然用的更加广泛，因为端到端的方法需要更多的数据集，对SED来说不合适。</p><p>一个推荐的特征表示是40个梅尔滤波器，用40ms的窗口大小计算的梅尔谱，提供了一个足够细节，但是维度不高的表示。</p><p>除了频谱图和梅尔谱图，还有其他表示方法，例如把频谱图分解为谐波和冲激，分别分析两部分。另一种可用于SED的时频表示是 constant-Q transform(CQT) 类似mel，不过把频率尺度改为不同基音频率。常用于音乐分析。</p><p>不同类型声音受益于不同的时间和频率分辨率，比如短促的声音，在分析中高时间分辨率的表示法更好，而又谐波成分的声音比如鸟叫声，高频率分辨率的表示法更好</p><p>最近研究的一种替代上述手工特征的方法是特征学习，无监督特征学习。将非负矩阵分解方法应用于CQT，将球面k-means聚类用于mel谱图，成功的应用于声学场景和声音分类。但是在SED这边，对于复音SED（polyphonic）直接从原始波形中学习滤波器组和等效时频表示的尝试并不优于基于手工替代方案的等效系统。</p><h2 id="Machine-learning-for-SED"><a href="#Machine-learning-for-SED" class="headerlink" title="Machine learning for SED"></a>Machine learning for SED</h2><p>DNN在许多领域带来了巨大的进步，如图像识别和语音识别，并且近年来也成为环境声音分析和分类的主要方法。他们的主要缺点是需要大量的数据进行训练。这种对大型数据集的需求对SED来说是一个问题，因为该领域仍然缺乏强标记数据的大型数据集。涉及弱标签和迁移学习的高级训练策略为处理数据中的缺陷提供了合适的解决方案，但一般的系统架构通常不会发生显着变化。</p><h3 id="Convolutional-recurrent-neural-networks"><a href="#Convolutional-recurrent-neural-networks" class="headerlink" title="Convolutional recurrent neural networks"></a>Convolutional recurrent neural networks</h3><p>SED常用的模型架构是CRNN，包含卷积层和循环层，扮演不同的角色。</p><p>卷积层作为特征提取器，通过连续卷积和对时频表示的非线性变换来学习判别特征。</p><p>循环层的作用是学习其输入处呈现的特征序列中的时间依赖性。</p><p>然后给了个示例图：</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20230928160220264.png" alt="image-20231005161337659"></p><p>还蛮酷的</p><p>然后讲了下这个图，RNN用的是Gated recurrent units（GRU）同之前看的LSTM不是一个东西</p><p>最后一个卷积快的输出叠加在频率轴上，产生一个2D的特征表示。</p><p>前馈层的作用是根据最后一个循环层的输出产生声音事件活动概率。最后再给定一个阈值输出二进制活动指示器序列。</p><p>在SED任务中，使用交叉熵作为损失函数，计算正确类别和其他类别概率分布的交叉熵。</p><p>然后讲怎么训练，超参数的设置，要避免过拟合，例如使用dropout正则化技术来随机抛弃隐藏层每个节点的输出。</p><p>lr的设置上通常使用衰减学习率，batch的默认值通常为32。</p><p>网络架构需要根据任务选择，当数据序列建模和预测时包含循环层，而在分类任务中不需要保留时间信息，因此网络通常只包含卷积块。执行SED的网络体系最长遇到的是具有2-5个卷积层的架构，而之后的循环层和全连接层的数量通常为1到2个。对于20-40小时的数据集，常见的是7到9层卷积层。</p><h3 id="Advanced-methods"><a href="#Advanced-methods" class="headerlink" title="Advanced methods"></a>Advanced methods</h3><p>迁移学习为数据稀缺问题提供了一种不同的解决方案，作为数据扩充的替代方案。主要思想是利用有大量数据的特定任务来解决目标任务。具体的做法是训练一个用于解决<code>Pretext task</code>的神经网络（这里不知道怎么翻译更好），然后得到的预训练权重被用来继续构建目标任务的网络。由预训练层提供的表示叫做embeddings，可以视为是下游任务的输入特征。</p><p>现在能用来计算嵌入的预训练模型有VGGish，SoundNet，L^3^-Net</p><p>另一个方法是用弱标签或噪声标签，噪声标签是指可能被错误归属的标签，如自动生成的标签或非策划标签，用弱标签的话就要用无监督学习的方法，对系统的要求更强。</p><p>弱监督学习的一种常见方法是多实例学习（multiple-instance learning）信号的帧以包（bags）的形式被当作训练实例。一个 bag 是由多个帧（实例）组成的完整的弱标签样本。因此弱标签是打在bags上，而不是每个bag的实例。bags是目标类别的正负例样本，负bags只包括负的帧，而正bags可以同时包括正的帧和负的帧。</p><p>在多实例学习中，神经网络在帧（实例）级预测类别的概率，池化函数将帧级信息聚合到bag level，然后loss也在bag level做。</p><p>其他用于弱监督学习的方案包括基于注意力的神经网络，就是在训练过程中加一层作为注意力层，注意机制的作用是帮助模型在特定的SED任务中区分音频片段的相关部分和不相关部分。</p><p>对于噪声标签，大量用户生成的音频材料可以作为网络音频提供，其标签可以从用户生成的元数据中推断出来。这样的数据被称为有噪声标签，因为不能保证标签是正确的。比如Audio set中，对于30%的类，估计标签错误率高于50%</p><p>还可以用训练好的大模型的输出来训练小模型，以达到压缩大模型的目的。</p><p>在弱标记、半监督的SED问题中，会遇到学生-教师模型。</p><p>该任务被视为两个独立的子任务:一个是音频标记，另一个是边界检测。提出的一种解决方案是在粗分辨率上训练教师模型，使其在音频标记方面表现良好，并使用未标记的数据指导学生模型在更精细的分辨率下学习边界检测。</p><p>另一种方法采用学生网络和教师网络，每个网络都有两个分支:一个用于音频标记的粗时间分辨率分支和一个用于边界检测任务的细分辨率分支，教师模型中的每个分支都教授学生模型中相应的分支</p><h2 id="Performance-evaluation"><a href="#Performance-evaluation" class="headerlink" title="Performance evaluation"></a>Performance evaluation</h2><p>许多SED系统的输出时间分辨率与分析分辨率相似，只差几十毫秒，这在实际应用中并不重要，但是在此分辨率下进行计算还是会产生误差。一种方法是在一个粗粒度的固定的时间网格上比较系统输出和reference annotation。这被称为基于分段的评估（segment-based evaluation）</p><p>评估过程如图：</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20231005161337659.png" alt="image-20231006192342057"></p><p>然后得到的那个矩阵，TP, FP, TN, FN的个数，可以计算精准率，召回率，错误率等等。</p><p>后面讲各种评估方法，只能说具体问题具体分析，不想看了</p><p>一个比赛：The international evaluation challenge on Detection and Classification of Acoustic Scenes and Events (DCASE) </p><h2 id="Related-research-problems"><a href="#Related-research-problems" class="headerlink" title="Related research problems"></a>Related research problems</h2><p>SED与一些分类任务(如声学场景分类、音乐类型分类和说话人识别)的最大区别在于，分类用一个类别标签来描述整个音频记录，而SED旨在估计音频记录中声音类别的时间活动。这需要机器学习架构在连续的片段中产生分类输出，而不是在整个测试音频期间产生单个分类输出。尽管存在这种差异，用于分类的机器学习技术可以通过对分类器架构进行一些更改来适应SED，通常从神经网络的结构中省略时间池操作，以便系统在多个时间点产生输出。</p><p>SED的目标是多个重叠的声源，所以输出也是polyphonic的。</p><p>许多在其他领域使用的数据增强方法也适用于SED。SED与其他一些领域的不同之处在于存在许多不同的重叠声音组合。因此，现有数据及其注释的混合段可以在SED中使用，但不一定用于其他音频任务</p><p>声音事件的分类法还没有建立起来，因此，收集大规模SED数据集的社区联合努力受到了很大的限制。每个应用程序都有稍微不同的声音类和注释需求，并且在不同的环境中使用。</p><p>本文重点介绍的是单通道方法，对于多通道可以潜在的提高检测精度，也有一些其他处理方法：多通道SED系统(或联合定位和检测系统)要么使用表示输入音频空间属性的通道内特征，要么单独计算每个通道的低级特征，然后使用机器学习模型来促进空间属性的学习。空间特征包括空间音频处理中常用的特征，如信道间互相关和时间差。</p><h2 id="Future-perspectives"><a href="#Future-perspectives" class="headerlink" title="Future perspectives"></a>Future perspectives</h2><p>大概是这么几个方向</p><p>主动学习：学习算法选出一个未标记的音频样本让标记者来标记。</p><p>考虑数据隐私的联邦学习，数据传输的隐私保护。</p><p>之前看图像分类提到的zero-shot学习也可以迁移到SED</p><p>迁移SED系统的时候，用新数据重新训练或者调参数让模型匹配。</p><p>稳健性和其他相关任务最近在DCASE公共评估活动中得到了解决。随着该领域研究的深入，应该引入新的基准测试方法来解决技术的局限性。</p>]]></content>
      
      
      <categories>
          
          <category> 声学相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 声音事件检测 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>声纹识别相关调研</title>
      <link href="/2023/09/23/%E5%A3%B0%E7%BA%B9%E8%AF%86%E5%88%AB%E7%9B%B8%E5%85%B3%E8%B0%83%E7%A0%94/"/>
      <url>/2023/09/23/%E5%A3%B0%E7%BA%B9%E8%AF%86%E5%88%AB%E7%9B%B8%E5%85%B3%E8%B0%83%E7%A0%94/</url>
      
        <content type="html"><![CDATA[<h1 id="声纹"><a href="#声纹" class="headerlink" title="声纹"></a>声纹</h1><p>英文写作Voiceprint，是对语音中所蕴含的、能表征和标识说话人的语音特征，以及基于这些特征（参数）所建立的语音模型的总称</p><p>2019中国声纹识别产业发展白皮书中，将声纹识别细分为如下几类</p><ol><li>声纹确认：即给定一个说话人的声纹模型和一段只含一名说话人的语音，判断该段语音是否是该说话人所说。</li><li>声纹辨认：即给定一组候选说话人的声纹模型和一段语音，判断该段语音是哪个说话人所说。</li><li>声纹检出：即给定一个说话人的声纹模型和一些语音，判断目标说话人是否在给定的语音中出现。</li><li>声纹追踪：即给定一个说话人的声纹模型和一些语音，判断目标说话人是否在给定的语音中出现，若出现，则标示出对话语音中目标说话人所说的语音段的位置。</li></ol><p>根据声纹识别与待识别语音的文本内容的关系，可以分为：</p><ol><li>文本无关，对语音文本内容无任何要求</li><li>文本相关，需要按照实现指定的文本内容进行发音</li><li>文本提示，从说话人的训练文本库中，随机提取若干词汇组合后提示用户发音</li></ol><h2 id="中国声纹识别产业发展白皮书"><a href="#中国声纹识别产业发展白皮书" class="headerlink" title="中国声纹识别产业发展白皮书"></a>中国声纹识别产业发展白皮书</h2><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20230923124136485.png" alt="image-20230923122653473"></p><p>所以应该会有伪造攻击声纹系统之类的研究，之后可以关注下，安全就是攻击和防御</p><p>应用场景：</p><p>国家公共安全：监听和跟踪</p><p>泛金融：声纹识别声音认证服务</p><p>社会保险：社会保险代领冒领，用声纹识别可以降低普查成本</p><p>智能安防及个新华语音交互：字面意思</p><h3 id="技术和挑战"><a href="#技术和挑战" class="headerlink" title="技术和挑战"></a>技术和挑战</h3><p> <img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20230923122653473.png" alt="image-20230923124136485"></p><p><strong>背景噪声</strong></p><p>确实蛮重要的，刚看到的时候在想，那就不要在背景噪声强的地方用声纹识别系统呗</p><p>但是比如语音助手这些应用方向，就会涉及类似的应用场景</p><blockquote><p>目前，一些研究者语音增强的方法。一些方法在信号层对噪声进行估计，并尝试对其进行消除，在稳定噪声信号下得到了不错的效果，但对于非稳定信号效果不佳。另有一些研究者者尝试在特征域、模型域和分数域，对噪声造成的影响进行抑制。还有一些研究者通过数据增强的方法，通过模拟方法在训练数据中加入噪声。</p></blockquote><p><strong>跨信道</strong></p><p>声音从发出后到达声纹识别系统，需要经过好几个信道，信道会对语音信号产生畸变，对不同信道采集到的语音，会有很大的差别。这种差别会影响声纹识别系统的识别性能</p><p><strong>短语音</strong></p><p>在较短语音长度的情况下，提高系统的识别性能</p><p><strong>假冒攻击</strong></p><p>主要是伪造和重放</p><p><strong>真实意图</strong></p><p>真实意图检测，即检测验证者在进行验证时，是否具有真实的被验证的意愿。呃呃，好抽象</p><p><strong>时变</strong></p><p>年龄变化会导致声音特征的变化，会影响系统的识别准确率</p><p><strong>身体状况</strong></p><p>感冒发烧发声器官会改变，声音特性也会改变</p><p><strong>发音方式</strong></p><p>语速快慢，音量大小，语气变化</p><p><strong>低语</strong></p><p>声带不震动，只有气流激励，在需要低声说话的情景下进行声纹识别</p><p><strong>语音掩盖</strong></p><blockquote><p>在特殊情况下，有些人不想自己的声音被别人认出，就会对声音进行掩盖，如使用假声说话，使用变声器等。此类情况即成为语音掩盖。</p></blockquote><p>这个应用场景感觉有点牵强</p><p><strong>多说话人</strong></p><p>多说话人分离</p>]]></content>
      
      
      <categories>
          
          <category> 声学相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 声纹识别 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>latex语法笔记</title>
      <link href="/2023/09/18/latex%E8%AF%AD%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/09/18/latex%E8%AF%AD%E6%B3%95%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>s</p><h1 id="latex语法笔记"><a href="#latex语法笔记" class="headerlink" title="latex语法笔记"></a>latex语法笔记</h1><p>各种字体：</p><script type="math/tex; mode=display">\mathrm{Aa},\mathnormal{Aa},\mathit{Aa},\mathbf{Aa},\mathbb{Na},\mathcal{NAa},\mathscr{Aa},\mathfrak{Aa},\mathsf{Aa},\mathtt{Aa}</script><p>连乘</p><script type="math/tex; mode=display">\prod</script><p>运算符号上下加文字</p><script type="math/tex; mode=display">\overset{1}{\arg\min}\\\\\underset{2}{\arg\max}</script><p>双竖线和单竖线</p><script type="math/tex; mode=display">\Vert\qquad \vert</script><p>波浪号</p><script type="math/tex; mode=display">\sim, \widetilde A</script><p>定义</p><script type="math/tex; mode=display">\triangleq</script><p>赋值</p><script type="math/tex; mode=display">\coloneqq</script><p>约等于</p><script type="math/tex; mode=display">\approx</script><p>带圈符号</p><script type="math/tex; mode=display">\odot \otimes \oplus</script><p>矩阵转置</p><script type="math/tex; mode=display">E^\top</script><p>特殊的小写 L</p><script type="math/tex; mode=display">\ell</script><p>逻辑符号</p><script type="math/tex; mode=display">\forall\quad \exists\quad \neg\quad \wedge\quad \vee</script>]]></content>
      
      
      <categories>
          
          <category> 查阅用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> latex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动手学深度学习笔记</title>
      <link href="/2023/09/14/%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/09/14/%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="动手学深度学习笔记"><a href="#动手学深度学习笔记" class="headerlink" title="动手学深度学习笔记"></a>动手学深度学习笔记</h1><h2 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h2><h3 id="基本运算"><a href="#基本运算" class="headerlink" title="基本运算"></a>基本运算</h3><p>主要记一些常用的函数的使用方法</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">x = torch.arange(<span class="number">12</span>)<span class="comment"># 得到一个大小为12的tensor，初始化为0~11</span></span><br><span class="line">x.shape<span class="comment"># 得到一个tensor的形状</span></span><br><span class="line">x.numel()<span class="comment"># 得到tensor中所有元素的个数</span></span><br><span class="line">x = x.reshape(<span class="number">3</span>, <span class="number">4</span>)<span class="comment"># 修改张量的形状</span></span><br><span class="line">torch.zeros((<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>))<span class="comment"># 生成指定形状的tensor并将所有元素初始化为0</span></span><br><span class="line">torch.ones((<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>))<span class="comment"># 初始化为1</span></span><br><span class="line">torch.randn(<span class="number">3</span>,<span class="number">4</span>)<span class="comment"># 创建一个指定形状的张量，每个元素为标准高斯分布的随机采样</span></span><br><span class="line">torch.tensor(<span class="built_in">list</span>)<span class="comment"># 将list转化为tensor类型</span></span><br><span class="line"><span class="comment"># 按元素运算</span></span><br><span class="line">x + y, x - y, x * y, x / y, x ** y, torch.exp(x)</span><br><span class="line"></span><br><span class="line">torch.cat((X,Y), dim = <span class="number">0</span>)<span class="comment">#将X，Y在第0维连接</span></span><br><span class="line">X.<span class="built_in">sum</span>()<span class="comment"># 返回值为所有元素的和的单元素张量</span></span><br></pre></td></tr></tbody></table></figure><h3 id="线性代数"><a href="#线性代数" class="headerlink" title="线性代数"></a>线性代数</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">A = torch.arange(<span class="number">20</span>).reshape(<span class="number">5</span>, <span class="number">4</span>)<span class="comment"># 定义一个5行4列的矩阵</span></span><br><span class="line">A.T<span class="comment"># 获得矩阵的转置</span></span><br><span class="line">X+a, X*a, X-a, X/a<span class="comment"># 标量与张量的计算，标量会与矩阵的每个元素进行运算</span></span><br><span class="line">A_sum_axis0 = A.<span class="built_in">sum</span>(axis = <span class="number">0</span>)<span class="comment"># 沿轴0通过求和降低维度</span></span><br><span class="line"><span class="comment"># x,y 是两个d维向量，x,y的点积</span></span><br><span class="line">torch.dot(x,y)</span><br></pre></td></tr></tbody></table></figure><p>计算 $\boldsymbol{Ax=b}$</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">torch.mv(A,x)</span><br></pre></td></tr></tbody></table></figure><p>计算矩阵相乘 $\boldsymbol{AB=C}$ </p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">torch.mm(A, B)</span><br></pre></td></tr></tbody></table></figure><p>计算范数</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">torch.norm(u)<span class="comment"># L2范数</span></span><br><span class="line">torch.<span class="built_in">abs</span>(u).<span class="built_in">sum</span><span class="comment"># L1范数</span></span><br><span class="line">torch.norm(X)<span class="comment"># 矩阵的Frobenius范数</span></span><br></pre></td></tr></tbody></table></figure><h3 id="微积分"><a href="#微积分" class="headerlink" title="微积分"></a>微积分</h3><p>没什么好记的</p><h3 id="自动微分"><a href="#自动微分" class="headerlink" title="自动微分"></a>自动微分</h3><p>对于一个tensor，计算其在某个函数上的导数，得到的是向量每个分量的偏导数，存储在该tensor的grad属性中</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x.requires_grad_(<span class="literal">True</span>)<span class="comment"># 通过设置这个属性，x的偏导数值会一直储存在grad属性中</span></span><br><span class="line">x.grad<span class="comment"># 默认值是None，通过调用指定函数的backward为该属性赋值</span></span><br><span class="line">y.backward()</span><br><span class="line">x.grad</span><br></pre></td></tr></tbody></table></figure><p>在默认情况下，PyTorch会<strong>累积</strong>梯度，我们需要清除之前的值</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x.grad.zero_()</span><br><span class="line">y = torch.exp(x).<span class="built_in">sum</span>()</span><br><span class="line">y.backward()</span><br><span class="line">x.grad</span><br></pre></td></tr></tbody></table></figure><p>对于非标量变量，如上面的<code>y=torch.exp(x)</code>返回的就是一个形状和x相同的向量，对于高阶和高维的y和x，求导的结果可以是一个高阶张量，但是在机器学习中，更为通常的做法是计算一批训练样本中每个组成部分的损失函数的导数（算是每个分量？）这里，我们的目的不是计算微分矩阵， 而是单独计算批量中每个样本的偏导数之和。</p><p><strong>分离计算</strong></p><p>大概理解了一下，就是对于链式求导，应该是这样的：</p><script type="math/tex; mode=display">y = f(x)\\\\z = g(y,x)\\\\\frac{\partial z}{\partial x}=g'_y(y,x)\cdot y'+g'_x(y,x)</script><p>但由于某种原因，希望将y视为一个常数，并只考虑到x在y被计算出来后发挥的作用（就是要用x计算y，但是不让x参与微分），这里可以分离y来返回一个新变量u，该变量与y具有相同的值，但丢弃计算图中如何计算y的任何信息。例子如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x.grad.zero_()</span><br><span class="line">y = x * x</span><br><span class="line">u = y.detach()<span class="comment"># 分离变量，转化为常量</span></span><br><span class="line">z = u * x</span><br><span class="line">z.<span class="built_in">sum</span>().backward()</span><br><span class="line">x.grad == u</span><br></pre></td></tr></tbody></table></figure><h2 id="线性神经网络"><a href="#线性神经网络" class="headerlink" title="线性神经网络"></a>线性神经网络</h2><h3 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h3><p>和以前学的所有线性回归一样，对预测值 $\hat y$ ，使用以下形式来表达模型：</p><script type="math/tex; mode=display">\hat y=\boldsymbol w ^T\boldsymbol x + b</script><p>训练模型，需要两个东西</p><ul><li>模型质量的度量方式（Loss function）</li><li>更新模型提高模型预测质量的方法（梯度下降）</li></ul><p><strong>损失函数</strong></p><p>回归问题中最常用的损失函数是平方误差函数，如下，其中$\hat y ^{(i)}$是样本$i$的预测值</p><script type="math/tex; mode=display">l^{(i)}(\boldsymbol{w},b)=\frac12\left(\hat y ^{(i)}-y ^{(i)}\right)^2</script><p>这个$\frac12$加不加不会带来本质的区别，但是在求导之后系数为1更方便</p><p>为了度量模型在整个数据集上的质量，使用的是n个样本上的损失均值</p><script type="math/tex; mode=display">L(\boldsymbol w, b)=\frac1n\sum^n_{i=1}l^{(i)}(\boldsymbol{w},b)</script><p>在训练模型时，要找满足如下条件的参数，能最小化总损失</p><script type="math/tex; mode=display">\boldsymbol w^*,b^* = \mathop{\arg\min}\limits_{\boldsymbol w,b} \,L(\boldsymbol w, b)</script><p><strong>随机梯度下降</strong></p><p>梯度下降最简单的用法是计算损失函数（数据集中所有样本的损失均值）关于模型参数的导数（在这里也可以称为梯度）。但是样本太多了，每算一次就要遍历一次数据集，所以通常会随机抽取一小批样本，这种变体叫做小批量随机梯度下降</p><p>一个问题，为什么是减梯度，复习了一下梯度，见<a href="https://zhuanlan.zhihu.com/p/613651124">通俗理解方向导数、梯度|学习笔记 - 知乎 </a></p><blockquote><p>因此我们可以知道，<strong>梯度是指函数值增长最快的方向。</strong> ——来自上面的链接</p></blockquote><p>所以要减梯度，得到最小的loss</p><script type="math/tex; mode=display">(\boldsymbol w, b)\leftarrow(\boldsymbol w,b)-\frac{\eta}{|\mathcal{B}|}\sum_{i\in\mathcal{B}}\partial_{ (\boldsymbol w,b)}l^{(i)}(\boldsymbol w,b)</script><p>迭代公式如上，$|\mathcal{B}|$为每个小批量的样本数，$\eta$称为学习率(learning rate)</p><p>批量大小和学习率的值通常都是手动预先设定，而不是通过模型训练得到的，这些可以调整但不在训练过程中更新的参数称为超参数（hyperparameter）。</p><p><strong>正态分布与平方损失</strong></p><p>均方误差损失函数可以用于线性回归的一个原因是：我们假设了观测中包含噪声，其中噪声服从正态分布</p><script type="math/tex; mode=display">y=\boldsymbol w^T \boldsymbol x + b +\epsilon \qquad \qquad \epsilon \sim \mathcal{N}(0,\sigma^2)</script><p>移个项，则 $y-\boldsymbol w^T \boldsymbol x - b$服从正态分布，对于观测值 $\boldsymbol x$ 的似然函数：</p><script type="math/tex; mode=display">L(\boldsymbol w) =\prod^n_{i=1}p(y^{(i)}|\boldsymbol x ^{(i)})</script><p>求负对数似然的最小值，最后得到的公式如下（太长不想打了）</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20230918203855410.png" alt="image-20230918203855410"></p><p>然后后面那项和平方损失一样</p><h3 id="从0开始实现一个线性回归"><a href="#从0开始实现一个线性回归" class="headerlink" title="从0开始实现一个线性回归"></a>从0开始实现一个线性回归</h3><p>这里用到了一个Tensor乘法库，我想起来书里之前用的好像不是这个</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">torch.matmul()</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">torch.mm()</span><br></pre></td></tr></tbody></table></figure><p>mm一般用来处理矩阵（2维Tensor），然后matmul可以算高维的而且有那个广播机制</p><h2 id="softmax回归"><a href="#softmax回归" class="headerlink" title="softmax回归"></a>softmax回归</h2><p>对于分类问题，用一个全连接层的输出做一个softmax计算：</p><script type="math/tex; mode=display">\boldsymbol o = \boldsymbol{Wx} + \boldsymbol b\\\\\boldsymbol {\hat y} = softmax(\boldsymbol o)\;\;其中\;\;\hat y_j=\frac{\exp(o_j)}{\sum_k \exp(o_k)}</script><p>其中，样本$\boldsymbol x$的特征维度为d，输出类别为q，即向量$\boldsymbol o$为q维，$\boldsymbol W$为全连接层，$\boldsymbol b$为偏置</p><h3 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h3><p><strong>负对数似然</strong></p><p>就是交叉熵</p><script type="math/tex; mode=display">l(\boldsymbol y,\boldsymbol{\hat y})=-\sum^q_{j=1}y_j\,log\hat y_j=\log\sum^q_{k=1}\exp(o_k)-\sum^q_{j=1}y_jo_j</script><p>对 $o_j$ 求导：</p><script type="math/tex; mode=display">\partial_{o_j}l(\boldsymbol y,\boldsymbol{\hat y})=softmax(\boldsymbol o)_j-y_i</script><h2 id="多层感知机"><a href="#多层感知机" class="headerlink" title="多层感知机"></a>多层感知机</h2><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20231008095028604.png" alt="image-20230922114455720"></p><p>这个东西，就是把几层全连接层堆起来，但是<strong>这样没什么用</strong></p><script type="math/tex; mode=display">H = XW^1+b^1\\\\O=HW^2+b^2\\\\O = (XW^1+b^1)W^2+b^2=XW^1W^2+b^1W^2+b^2=XW+b</script><p>为了发挥多层架构的潜力，我们还需要一个额外的关键要素，在仿射变换之后对每个隐藏单元应用非线性的激活函数$\sigma$。</p><script type="math/tex; mode=display">H=\sigma(XW^1+b^1)\\O=HW^2+b^2</script><p>激活函数通常不仅按行操作，也按元素操作，即对每个线性计算之后的都计算一个活性值</p><h3 id="那什么是激活函数呢"><a href="#那什么是激活函数呢" class="headerlink" title="那什么是激活函数呢"></a>那什么是激活函数呢</h3><p>激活函数（activation function）通过计算加权和并加上偏置来确定神经元是否应该被激活，它们将输入信号转换为输出的可微运算。</p><blockquote><p> <strong>激活函数决定了某个神经元是否被激活，这个神经元接受到的信息是否是有用的，是否该留下或者是该抛弃</strong></p></blockquote><h4 id="RELU函数"><a href="#RELU函数" class="headerlink" title="RELU函数"></a>RELU函数</h4><script type="math/tex; mode=display">ReLU(x) = \max(x,0)</script><p>通俗地说，ReLU函数通过将相应的活性值设为0，仅保留正元素并丢弃所有负元素。</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20230926153538186.png" alt="image-20230923145934950"></p><p>其求导小于0的部分为0，大于0的部分为1，所以要么让参数消失，要么让参数通过</p><p>也有许多变体，比如参数化ReLU</p><script type="math/tex; mode=display">pReLU(x)=\max(0,x)+\alpha\min(0,x)</script><h4 id="sigmoid函数"><a href="#sigmoid函数" class="headerlink" title="sigmoid函数"></a>sigmoid函数</h4><p>是一个将实数集映射到区间$(0,1)$的函数</p><script type="math/tex; mode=display">sigmoid(x)=\frac{1}{1+exp(-x)}</script><p>导数为：</p><script type="math/tex; mode=display">\frac{d}{dx}sigmoid(x)=\frac{exp(-x)}{(1+exp(-x))^2}=sigmoid(x)(1-sigmoid(x))</script><h4 id="tanh函数"><a href="#tanh函数" class="headerlink" title="tanh函数"></a>tanh函数</h4><p>双曲正切函数，将实数域映射到 $(-1,1)$ 上</p><script type="math/tex; mode=display">tanh(x)=\frac{1-exp(-2x)}{1+exp(-2x)}</script><p>导数是</p><script type="math/tex; mode=display">\frac{d}{dx}tanh(x)=1-tanh^2(x)</script><h4 id="k折交叉验证"><a href="#k折交叉验证" class="headerlink" title="k折交叉验证"></a>k折交叉验证</h4><p>训练数据稀缺时，可能无法提供足够的数据来构成一个合适的验证集。就会用这个验证方法来评估误差</p><blockquote><p>原始训练数据被分成K个不重叠的子集。然后执行K次模型训练和验证，每次在K − 1个子集上进行训练，并在剩余的⼀个子集（在该轮中没有用于训练的子集）上进行验证。最后，通过对K次实验的结果取平均来估计训练和验证误差。</p></blockquote><p><strong>数据集大小</strong></p><p>对于许多任务，深度学习只有在有数千个训练样本时才优于线性模型。</p><h4 id="权重衰减"><a href="#权重衰减" class="headerlink" title="权重衰减"></a>权重衰减</h4><p>在训练参数化机器学习模型时，权重衰减（weight decay）是最广泛使用的正则化的技术之一，它通常也被称为$L_2$正则化。</p><p>在线性模型中，$L_2$正则化线性模型构成经典的岭回归（ridge regression）算法，使用$L_2$范数的一个原因是它对权重向量的大分量施加了巨大的惩罚，这使得我们的学习算法偏向于在大量特征上均匀分布权重的模型，而$L_1$惩罚回导致模型将权重集中在以下部分特征上，而将其他权重清除为0，这称为特征选择(feature selection)</p><h4 id="暂退法"><a href="#暂退法" class="headerlink" title="暂退法"></a>暂退法</h4><p>也是为了解决过拟合的问题，经典泛化理论认为，为了缩小训练和测试性能之间的差距，应该以简单的模型为目标。简单性的另一个角度是平滑性。函数不应该对其输入的微小变化敏感。</p><blockquote><p>在训练过程中，他们建议在计算后续层之前向网络的每一层注入噪声</p></blockquote><p>通常在测试时不用暂退法</p><p>在从零实现里看代码，就是随机去除一些隐藏层的节点，让下一层不会过度依赖本层的任何一个节点</p><h3 id="前向传播、反向传播和计算图"><a href="#前向传播、反向传播和计算图" class="headerlink" title="前向传播、反向传播和计算图"></a>前向传播、反向传播和计算图</h3><h4 id="前向传播"><a href="#前向传播" class="headerlink" title="前向传播"></a>前向传播</h4><p>指按顺序（从输入层到输出层）计算和存储神经网络中每层的结果</p><p>将这个计算过程的输入、输出、中间变量和操作符符号化，可以绘制一张计算图</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20230923145934950.png" alt="image-20230926153538186"></p><h4 id="反向传播"><a href="#反向传播" class="headerlink" title="反向传播"></a>反向传播</h4><p>指的是计算神经网络参数梯度的方法</p><p>书上是对含两个隐藏层的网络进行推导演示的，太复杂了不写了，就是链式求导法则</p><h4 id="训练神经网络"><a href="#训练神经网络" class="headerlink" title="训练神经网络"></a>训练神经网络</h4><p>前向传播和反向传播交替进行，互相使用各自过程产生的中间值，避免重复计算，这导致我们需要存储中间值，直到训练完成，所以训练比预测所需要的内存更大。</p><h3 id="数值稳定性和模型初始化"><a href="#数值稳定性和模型初始化" class="headerlink" title="数值稳定性和模型初始化"></a>数值稳定性和模型初始化</h3><p>糟糕的选择参数的初始值可能会在训练时遇到梯度爆炸或梯度消失</p><h4 id="参数初始化"><a href="#参数初始化" class="headerlink" title="参数初始化"></a>参数初始化</h4><p>不指定初始化方法，框架将使用默认的随机初始化方法</p><p><strong>Xavier初始化</strong></p><p>对一个没有非线性的全连接层输出：</p><script type="math/tex; mode=display">o_i=\sum^{n_{in}}_{j=1}w_{ij}x_j</script><p>权重 $w_{ij}$ 独立同分布，均值为0，方差为 $\sigma^2$</p><p>假设层 $x_j$ 的输入也具有0均值和方差 $\gamma^2$ ，互相独立</p><p>考虑前向传播过程，可以算得输出的方差为：</p><script type="math/tex; mode=display">War[o_i]=n_{in}\sigma^2\gamma^2</script><p>要使得输出的方差不变，可以设置 $n_{in}\sigma^2=1$ </p><p>反向传播过程中，对参数的输出的方差也会增大，除非 $n_{out}\sigma^2=1$ 但是不可能同时满足，所以退而求其次，只需满足</p><script type="math/tex; mode=display">\frac{1}{2}(n_{in}+n_{out})\sigma^2=1</script><p>这只是参数选择的皮毛，还有很多种参数初始化方法</p><h3 id="环境和分布偏移"><a href="#环境和分布偏移" class="headerlink" title="环境和分布偏移"></a>环境和分布偏移</h3><p> 大部分是实例，书里的概念是这么说的：</p><blockquote><p>假设训练数据是从某个分布 $P_S(x,y)$ 中采样的，但是测试数据将包含从不同分布$P_T(x,y)$中抽取的未标记样本</p></blockquote><p>介绍了三个细分类别：</p><ul><li><p>协变量偏移：虽然输入的分布可能随时间而改变， 但标签函数（即条件分布$P(y|x)$）没有改变。</p></li><li><p>标签偏移：标签偏移（label shift）描述了与协变量偏移相反的问题。这里我们假设标签边缘概率$P(y)$可以改变，但是类别条件分布$P(x|y)$在不同的领域之间保持不变。</p></li><li>概念偏移：标签的定义发生变化。</li></ul><p>在模型训练过程中，训练数据的特征和相关的标签经过迭代，在每一个小批量之后更新模型f的参数，对每个样本的损失函数求和算平均，叫做经验风险，但是在实际情况中，每个样本的出现概率不是均等的，整个分布的损失期望应该是损失函数乘上每个样本的分布概率做积分，这被称为真实风险。</p><p>然而在实践中，我们通常无法获得总体数据，因此经验风险最小化是一种使用的机器学习策略。</p><p>经验风险：</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20231008095050032.png" alt="image-20231008095028604"></p><p>真实风险：</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20231008105248858.png" alt="image-20231008095050032"></p><p> <strong>协变量偏移纠正</strong></p><p>假设对于带标签的数据 $(\mathbf x_i, y_i)$ ，我们要评估 $P(y|\mathbf x)$。然而观测值 $\mathbf x_i$ 是从某些源分布 $q(\mathbf x)$ 中得出的，而不是从目标分布 $p(\mathbf x)$ 中得出的。（简而言之就是我们得到的数据分布和真实世界中的数据分布不一致）幸运的是，依赖性假设意味着条件分布不变，即：$p(y|\mathbf x)=q(y|\mathbf x)$</p><p>如果源分布是错误的，我们可以通过在真实风险的计算中，使用以下简单的恒等式进行纠正：</p><script type="math/tex; mode=display">\int\int l(f(\mathbf x),y)p(y|\mathbf x)p(\mathbf x)\,d\mathbf xdy=\int\int l(f(\mathbf x),y)q(y|\mathbf x)q(\mathbf x)\frac{p(\mathbf x)}{q(\mathbf x)}d\mathbf x dy</script><p>也就是需要根据数据来自正确分布与来自错误分布的概率之比，重新衡量每个数据样本的权重：</p><script type="math/tex; mode=display">\beta_i \overset{\text {def}}=\frac{p(\mathbf x_i)}{q(\mathbf x_i)}</script><p>有一种非常有效的方法可以得到几乎与原始方法一样好的结果：对数几率回归，对两个分布中抽取的数据，分别给不同的值1，-1，然后使用对数几率回归对其进行二分类。混合数据集中的概率如下：</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20231008104728881.png" alt="image-20231008104728881"></p><p>然后在逻辑回归中又有<img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20230922114455720.png" alt="image-20231008105237014"></p><p>所以</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20231008105237014.png" alt="image-20231008105248858"></p><p>最后得到纠正协变量偏移的典型算法：</p><ul><li><p>生成一个二元分类训练集：$\{(\mathbf x_1,-1),\dots,(\mathbf x_n,-1),(\mathbf u, 1),\dots,(\mathbf u_n,1)\}$</p></li><li><p>用对数几率回归训练二元分类器得到函数$h$</p></li><li><p>使用$\beta_i=\exp(h(\mathbf x_i))$或更好的$\beta_i=\min(\exp(h(\mathbf x_i)),c)$（c为常量）对训练数据进行加权</p></li><li><p>使用权重进行训练</p></li></ul><p><strong>标签偏移纠正</strong></p><p>标签分布随时间变化 $q(y)\neq p(y)$ ，但是类别条件分布保持不变：$q(\mathbf x | y) = p(\mathbf x | y)$</p><p>也是用加权重的方法来修正loss：</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20231008152233059.png" alt="image-20231008152233059"></p><p>重要性权重将对应于标签似然比率：</p><script type="math/tex; mode=display">\beta_i\overset{\text{def}}{=}\frac{p(y_i)}{q(y_i)}</script><p>阿巴阿巴好复杂不太想看</p><h2 id="深度学习计算"><a href="#深度学习计算" class="headerlink" title="深度学习计算"></a>深度学习计算</h2><p>前两节在将初始化的内容，还有怎么用框架定义层和块。</p><h3 id="延后初始化"><a href="#延后初始化" class="headerlink" title="延后初始化"></a>延后初始化</h3><p>直到数据第一次通过模型传递时，框架才会动态地推断出每个层的大小。比如在cnn中，由于输入维度，即图像的分辨率将影响每个后继层的维数，有了该技术将会更加方便。</p><h2 id="卷积神经网络"><a href="#卷积神经网络" class="headerlink" title="卷积神经网络"></a>卷积神经网络</h2><p>卷积层可以写为：</p><script type="math/tex; mode=display">[\mathbf H]_{i,j}=u+\sum^{\Delta}_{a=-\Delta}\sum^{\Delta}_{b=-\Delta}[\mathbf V]_{a,b}[\mathbf X]_{i+a,j+b}</script><p>其中，V 被称为卷积核，或者滤波器</p><p>以前，多层感知机可能需要数十亿个参数来表示网络中的⼀层，而现在卷积神经网络通常只需要几百个参数，而且不需要改变输入或隐藏表示的维数。参数大幅减少的代价是，我们的特征现在是平移不变的，并且当确定每个隐藏活性值时，每⼀层只包含局部的信息。以上所有的权重学习都将依赖于归纳偏置。</p><p>在实际计算过程中，卷积核对输入执行的其实是互相关运算，但是这种运算和离散卷积运算只是少了一步卷的过程，因为卷积核的权重是在学习中获得的，所以正的乘再学和卷了之后乘再学，输出是一样的。弄着弄着就把互相关运算称为卷积运算了。</p><p>此外，对于卷积核张量上的权重，我们称其为元素。</p><p>在卷积神经网络中，对于某一层的任意元素x，其感受野（receptive field）是指在前向传播期间可能影响x计算的所有元素（来自所有先前层）。</p><p>而现实可能更为复杂一些，因为每个通道不是独立学习的，而是为了共同使用而优化的。因此，多输出通道并不仅是学习多个单通道的检测器。</p><h3 id="多输入多输出通道"><a href="#多输入多输出通道" class="headerlink" title="多输入多输出通道"></a>多输入多输出通道</h3><p>用 $c_i,c_o$ 表示输入和输出通道的数目，并让 $k_h,k_w$ 为卷积核的高度和宽度。为了获得多个通道的输出，我们可以为每个输出通道创建一个形状为 $c_i\times k_h \times k_w$ 的卷积核张量，这样卷积核的形状是 $c_o \times c_i \times k_h \times k_w$</p><p> 1 × 1卷积层通常用于调整网络层的通道数量和控制模型复杂性</p><p>本节将介绍汇聚（pooling）层，它具有双重目的：降低卷积层对位置的敏感性，同时降低对空间降采样表示 的敏感性。</p><p>在处理多通道输入数据时，汇聚层在每个输入通道上单独运算，而不是像卷积层⼀样在通道上对输入进行汇 总。这意味着汇聚层的输出通道数与输入通道数相同。</p><h2 id="现代卷积神经网络"><a href="#现代卷积神经网络" class="headerlink" title="现代卷积神经网络"></a>现代卷积神经网络</h2><h3 id="AlexNet与VGG"><a href="#AlexNet与VGG" class="headerlink" title="AlexNet与VGG"></a>AlexNet与VGG</h3><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20231016155243996.png" alt="image-20231016105909619"></p><p>LeNet、AlexNet和VGG都有一个共同的设计模式：通过一系列的卷积层与汇聚层来提取空间结构特征；然后通过全连接层对特征的表征进行处理。</p><h3 id="网络中的网络NiN"><a href="#网络中的网络NiN" class="headerlink" title="网络中的网络NiN"></a>网络中的网络NiN</h3><p>如果使用了全连接层，可能会完全放弃表征的空间结构，网络中的网络（NiN）提供了⼀个非常简单的解决方案：在每个像素的通道上分别使用多层感知机，从空间层面上来看，可以将其视为1×1卷积层。</p><p>然后还有个并行块的GoogLeNet</p><h3 id="批量规范化"><a href="#批量规范化" class="headerlink" title="批量规范化"></a>批量规范化</h3><p>batch normalization</p><p>作用：对于输入的各种特征，其大小，分布等并不是相同的，这里不单单指数值的大小，还包括其对于输出来说，占比多大，因此，首先需要对每个特征的值域规范化。在规范化之后，对于不同的特征，还要考虑各类特征之间影响大小关系，这里用比例系数和比例偏移来解释。</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20231016105909619.png" alt="image-20231016155243996"></p><h4 id="批量规范化层"><a href="#批量规范化层" class="headerlink" title="批量规范化层"></a>批量规范化层</h4><p>由于批量规范化在完整的小批量上运行，因此不能像以前在引入其他层时那样忽略批量大小。</p><p>在全连接层中，将批量规范化置于仿射变换和激活函数之间</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20231016160424873.png" alt="image-20231016160424873"></p><p>在卷积层中，会在卷积操作之后，非线性激活函数之前应用批量规范化。对于多个通道，会在每个通道都执行一遍，且每个通道互不影响，有自己的比例系数和比例偏移</p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lombard相关工作</title>
      <link href="/2023/09/06/Lombard%E7%9B%B8%E5%85%B3%E5%B7%A5%E4%BD%9C/"/>
      <url>/2023/09/06/Lombard%E7%9B%B8%E5%85%B3%E5%B7%A5%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="Lombard相关工作"><a href="#Lombard相关工作" class="headerlink" title="Lombard相关工作"></a>Lombard相关工作</h1><p>提取四个特征：F0, F1, loudness, alpha ratio</p><p>使用opensmile工具的GeMAPS特征集的v01b变体</p><p>数据集分为男，女，<img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20230906114345378.png" alt="image-20230906114345378"></p><p>后面数字为speaker id</p><p>每个文件夹里有四组</p><p>用json存了，这个格式</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">feature = {</span><br><span class="line">    <span class="string">'speakerID'</span>: <span class="string">'str'</span>,</span><br><span class="line">    <span class="string">'SSN'</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="string">'F0'</span>:<span class="number">0.0</span>,</span><br><span class="line">    <span class="string">'F1'</span>:<span class="number">0.0</span>,</span><br><span class="line">    <span class="string">'loudness'</span>:<span class="number">0.0</span>,</span><br><span class="line">    <span class="string">'alpha ratio'</span>:<span class="number">0.0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>高斯分布</p><p>横轴是大小，纵轴是概率</p><p>画每个人的plain语音和lombard语音的分布曲线</p><h3 id="差异性明显的图"><a href="#差异性明显的图" class="headerlink" title="差异性明显的图"></a>差异性明显的图</h3><p>对于单个说话人，女性中的F01, F09</p><p>男性中的M06</p><h3 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h3><p>把Mandarin数据集分成男性女性两组来拟合</p><p>网上找的代码改一改，用的是torch里的nn.Linear</p><p>然后每次运行得到的准确率都不一样，从0.44到0.52不等</p>]]></content>
      
      
      <categories>
          
          <category> 声学相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Lombard </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Securing liveness Detection for Voice Authentication via Pop Noises</title>
      <link href="/2023/09/05/Securing%20liveness%20Detection%20for%20Voice%20%20Authentication%20via%20Pop%20Noises/"/>
      <url>/2023/09/05/Securing%20liveness%20Detection%20for%20Voice%20%20Authentication%20via%20Pop%20Noises/</url>
      
        <content type="html"><![CDATA[<h1 id="Securing-liveness-Detection-for-Voice-Authentication-via-Pop-Noises"><a href="#Securing-liveness-Detection-for-Voice-Authentication-via-Pop-Noises" class="headerlink" title="Securing liveness Detection for Voice  Authentication via Pop Noises"></a>Securing liveness Detection for Voice  Authentication via Pop Noises</h1><h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p>在本文中，我们在智能手机上设计并实现了一种新颖的纯软件反欺骗系统。我们的系统利用了Pop noise，当用户在麦克风附近说密码时，它是由口腔气流产生的。pop noise很微妙，受用户多样性的影响，很难被一定距离以外的重放攻击记录下来，也很难被模仿者精确地模仿。具体来说，我们设计了一种新的pop noise检测方案，在音位级定位流行噪声，在此基础上建立理论模型，从语音信号中计算声压级，得到估计的压力信号，然后分析从pop noise中提取的压力信号与实际压力信号的一致性。</p><font color="red">问题：pop noise是什么东西，总不可能是pop music</font><h2 id="1-introduction"><a href="#1-introduction" class="headerlink" title="1 introduction"></a>1 introduction</h2><p>通过语音来进行身份验证的场合越来越多，然后主流的两种攻击方式：重放攻击和模拟攻击（replay attacks and inpersonation attacks）</p><p>前人工作总结：有用time-difference-of-arrive的，就是根据到两个mic的时间差异；有利用多普勒效应的，要求要移动麦克风位置，有使用额外硬件设备的，很麻烦。本文提出的方法只要尽可能靠近麦克风就行</p><p>该团队之前的工作开发了一个叫做 VoicePop+的东西，然后这篇文章的工作升级了这个东西</p><p>我们的观察结果有两个方面:1)Pop noise受用户多样性的影响;2)录制的声音样本几乎不含Pop noise，因为呼吸的声音比说话的声音温和，超过一定距离就会消失。</p><p>由于pop noise表现为来自口腔气流的气压，我们可以从声压级计算出估计的压力信号，然后分析其与pop noise的一致性。大概就是从给定的录制的音频，从说话的声音声压级计算人在这么说话的时候产生的口腔气流的pop noise是怎样的，再与他们通过音素分割对pop noise定位提取得到的信号进行对比，看是否匹配，不匹配则可能来自重放攻击</p><p>对于模拟伪造攻击，我们利用每个人独特的音素和pop noise之间的关系构建一个phoneme-pop序列，如果语音样本的这个序列与注册的合法序列相同，则可以认为是合法的，否则认为是模仿伪造攻击</p><p>蒽，大概了解一下怎么做的就行</p>]]></content>
      
      
      <categories>
          
          <category> 论文笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 活体检测 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>标准中文的噪声诱导类lombard语料库</title>
      <link href="/2023/09/01/%E6%A0%87%E5%87%86%E4%B8%AD%E6%96%87%E7%9A%84%E5%99%AA%E5%A3%B0%E8%AF%B1%E5%AF%BC%E7%B1%BBlombard%E8%AF%AD%E6%96%99%E5%BA%93/"/>
      <url>/2023/09/01/%E6%A0%87%E5%87%86%E4%B8%AD%E6%96%87%E7%9A%84%E5%99%AA%E5%A3%B0%E8%AF%B1%E5%AF%BC%E7%B1%BBlombard%E8%AF%AD%E6%96%99%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1 id="Mandarin-Lombard-Grid-A-Noise-Induced-Lombard-Grid-Like-Corpus-of-Standard-Chinese"><a href="#Mandarin-Lombard-Grid-A-Noise-Induced-Lombard-Grid-Like-Corpus-of-Standard-Chinese" class="headerlink" title="Mandarin Lombard Grid: A Noise Induced Lombard-Grid-Like Corpus of Standard Chinese"></a>Mandarin Lombard Grid: A Noise Induced Lombard-Grid-Like Corpus of Standard Chinese</h1><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>这篇文章描述了团队在建立第一个中文的开源lombard语料库做出的贡献：the Mandarin Lombard Grid</p><p>分为三部分：</p><ul><li>根据不同的背景噪声水平分类普通话Lombard style</li><li>建立包含每种风格的语料库</li><li>分析普通话Lombard效应和英语的区别</li></ul><p>找到了三种临界的Lombard style，声压级从30dB到85dB，构建了包含三种风格和一个参考plain style的语料库</p><p>对这个语料库的分析表明和英语的既有一致性又有差异性</p><h2 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1. Introduction"></a>1. Introduction</h2><p>​    Lombard效应是指说话者在噪声环境中自动调整发声力度以促进语音理解的自然过程，是人的一种条件反射。由于背景噪声的变化，可大幅度调整语音特征的Lombard效应很难与真实场景相匹配。</p><p>前人做了很多工作，又很多不同声压级的语料库，但是尚不清楚这些所有的声压级是否都与不同的Lombard风格相关。Lombard语音集合强调耳朵和发声力度，可能导致听力损伤和听觉疲劳，这不禁让我们想到，我们真的需要搜集所有不同声压级的噪声来建立一个完备的Lombard语料库吗？</p><p>因此，找到一个基于的背景噪声水平的基本单位来确定临界Lombard styles非常紧急</p><p>这个基本单元是一个临界区间，一个背景噪声水平区间 that 根据它所代表的水平变换，假设表示同一个临界的Lombard style</p><p>​    前人的研究所构建的20个lombard语料库里室友一个非开源的广东话语料库，用孤立的单音节引出Lombard效应。但是没有普通话的语料库，普通话和英语之间在发音上相差很大，普通话是一种声调语言，用音素的音高来区分单词。相反，英语使用音高的变化来表达情感。我们仍需了解Lombard效应在连续的汉语语音上的影响。如果Lombard 效应在提高发生力度上其普遍作用，我们预计会在普通话上看到类似的效果，或者以一种更复杂的方式表现，我们会得到不同的影响</p><p>​    为了应对上述限制，我们将我们的主要贡献总结如下:</p><ul><li>用了一种新的评估方法</li><li>建立了第一个普通话 Lombard 语料库 that 覆盖了每个 临界Lombard style 起源于之前的分类和一个参考plain style</li><li>我们采用了Lombard Grid 语料库，唯一一个公开的英语Lombard语料库，其中包含一一对应的plain speech和Lombard speech，很好的促进了Lombard效应的分析。还提取了一些声学特征来比较普通话和英语的Lombard语料库的Lombard效应</li></ul><p><strong>问题：</strong></p><ul><li>critical 指的是什么，style指的是什么，style和SPL之间是什么关系</li></ul><h2 id="2-Lombard-Style-Classification"><a href="#2-Lombard-Style-Classification" class="headerlink" title="2. Lombard Style Classification"></a>2. Lombard Style Classification</h2><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20230901161134723.png" alt="image-20230901161134723"></p><p>这个b图是整个的流程，可以看到大致分为两个路径，其中的Self-feedback voice model 是用来模拟人的听觉反馈的，一对STOI-based 检测用于检测显著差异来区分临界Lombard style。</p><h3 id="2-1-Lombard-speech-collection"><a href="#2-1-Lombard-speech-collection" class="headerlink" title="2.1. Lombard speech collection"></a>2.1. Lombard speech collection</h3><h4 id="2-1-1-Sentence-selection"><a href="#2-1-1-Sentence-selection" class="headerlink" title="2.1.1. Sentence selection"></a>2.1.1. Sentence selection</h4><p>接下来，我们将语料库中的句子以类似“网格(grid)”的格式组织起来。句子由名称(name)、动词(verb)、分类词(classifier)、形容词(adjective)、名词(noun)五部分组成。每个组成部分有20个音素平衡候选词，随机选择这些词来构建句子。我们为每个说话者创建了一组独特的30个“网格”式句子，分成三个长组，每组10个句子。</p><h4 id="2-1-2-Speaker-recruitment"><a href="#2-1-2-Speaker-recruitment" class="headerlink" title="2.1.2. Speaker recruitment"></a>2.1.2. Speaker recruitment</h4><p>我们招募了四名说话者(两名女性和两名男性)来读这些句子。所有参与者都是母语为普通话的人，没有或只有轻微的口音。受试者需在飞利浦听力测试官方网站进行在线听力测试。他们戴上耳机，将音量调到50%，同时确保周围没有令人分心的声音。然后问了四个情景问题，以确保他们没有听力障碍。我们为所有参与者的贡献支付了报酬。</p><h4 id="2-1-3-Recording-setup"><a href="#2-1-3-Recording-setup" class="headerlink" title="2.1.3. Recording setup"></a>2.1.3. Recording setup</h4><p>大概讲了实验环境和录制条件，录制过程啥的</p><h3 id="2-2-Self-feedback-voice-model"><a href="#2-2-Self-feedback-voice-model" class="headerlink" title="2.2. Self-feedback voice model"></a>2.2. Self-feedback voice model</h3><p>用了一个two-parameter self-feedback voice model来模拟人耳听见的混合信号，分别是空气传导和骨传导</p><h3 id="2-3-STOI-based-significance-test"><a href="#2-3-STOI-based-significance-test" class="headerlink" title="2.3 STOI-based significance test"></a>2.3 STOI-based significance test</h3><p>使用STIO score作为 intelligibility的评价标准来判断背景噪声的声音强度对Lombard语音的影响</p><h3 id="2-4-SPL-based-Lombard-style-classification"><a href="#2-4-SPL-based-Lombard-style-classification" class="headerlink" title="2.4. SPL-based Lombard style classification"></a>2.4. SPL-based Lombard style classification</h3><p>这个表的每一项分别是两个不同强度的背景噪声，t_statistics，p应该是两组样本的STOI score做t检验相似概率，由结果选定几个SPL作为 critical Lombard style</p><h2 id="3-Mandarin-Lombard-Corpus"><a href="#3-Mandarin-Lombard-Corpus" class="headerlink" title="3. Mandarin Lombard Corpus"></a>3. Mandarin Lombard Corpus</h2><p>讲语料库的构成</p><h2 id="4-Analysis-of-Lombard-Effect"><a href="#4-Analysis-of-Lombard-Effect" class="headerlink" title="4. Analysis of Lombard Effect"></a>4. Analysis of Lombard Effect</h2><p>从Plain speech和Lombard speech中提取元音，共振峰，声学参数来研究Lombard效应。</p><p>用 平均元音持续时间，和元音持续时间与总的说话时间的占比来表征元音特征</p><p>使用Praat来估计第一和第二个共振峰频率(F1和F2)</p><p>使用 openSMILE 来提取三个声学参数：</p><ul><li>基本频率相关参数 F0</li><li>能量相关参数 the loudness mean</li><li>一个频谱参数：alpha ratio mean（没懂是什么东西）</li></ul><h3 id="4-1-Lombard-effect-analysis-of-the-Mandarin-Corpus"><a href="#4-1-Lombard-effect-analysis-of-the-Mandarin-Corpus" class="headerlink" title="4.1. Lombard effect analysis of the Mandarin Corpus"></a>4.1. Lombard effect analysis of the Mandarin Corpus</h3><p>元音持续时间和F2频率在所有相邻对中均呈现不显著的整体增加。除F1频率外，所有参数在30和55 dB-SPLs之间均无显著增加。</p><p>所有相邻对的F1频率总体上显著增加。我们验证了所有已分类的Lombard style的显著差异。</p><p>Vowel-to-utterance ratio、F0频率、响度和alpha ratio在相邻的两个较高的语音对(55 vs. 70,70 vs. 80)之间总体上显著增加，在30和50 dB-SPLs之间总体上不显著增加。这可能表明，在较高的dB-SPLs下，伦巴第语的语音特征变化很大。</p><h3 id="4-2-Lombard-effect-comparison-between-the-Mandarin-and-English-corpus"><a href="#4-2-Lombard-effect-comparison-between-the-Mandarin-and-English-corpus" class="headerlink" title="4.2. Lombard  effect comparison between the Mandarin and English corpus"></a>4.2. Lombard  effect comparison between the Mandarin and English corpus</h3><ul><li>中文的vowel-to-utterance ratio更大，这与中文的元音实现更充分有关，中文在vowel duration中的增加更少，这可能是因为受试者慢慢熟悉文本，说话不拖沓</li><li>中文的F1频率增加更多，而英文的响度增加更多</li><li>普通话的旅行比男性alpha ratio上升更多，相比之下，英语中没有这种性别差异</li></ul><h2 id="5-Conclusion"><a href="#5-Conclusion" class="headerlink" title="5. Conclusion"></a>5. Conclusion</h2><p>巴拉巴拉的总结</p>]]></content>
      
      
      <categories>
          
          <category> 声学相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lombard </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>音频信号处理</title>
      <link href="/2023/08/23/%E9%9F%B3%E9%A2%91%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86/"/>
      <url>/2023/08/23/%E9%9F%B3%E9%A2%91%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="音频信号处理"><a href="#音频信号处理" class="headerlink" title="音频信号处理"></a>音频信号处理</h1><h2 id="采样"><a href="#采样" class="headerlink" title="采样"></a>采样</h2><p>模拟信号采样，转变成数字信号再使用计算机处理</p><p>对于每个采样点，都是离散的值，对于计算机存储来说很不方便，所以会用到量化</p><p>一般有三种方式</p><ul><li>零记忆量化</li><li>分组量化</li><li>序列量化</li></ul><p><strong>短时加窗处理</strong></p><p>在看tfgrednet的代码时，看到了汉明窗和汉宁窗两个概念，书里给出了这两种窗函数的公式，</p><p>评价窗函数的指标：泄露指数（对应旁瓣泄露现象），主瓣宽度，旁瓣衰减，旁瓣滚降率</p><p>不懂</p><h2 id="python实践"><a href="#python实践" class="headerlink" title="python实践"></a>python实践</h2><p>一直看书感觉懵的，上手实践一下感觉会好一点</p><p>使用 <code>librosa</code> 库读取wav文件</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">samples, sr = librosa.load(wavefile, sr=<span class="number">8000</span>)</span><br></pre></td></tr></tbody></table></figure><p>函数原型：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(function) <span class="keyword">def</span> <span class="title function_">load</span>(<span class="params"></span></span><br><span class="line"><span class="params">    path: <span class="built_in">str</span> | <span class="built_in">int</span> | PathLike[<span class="type">Any</span>] | SoundFile | AudioFile | BinaryIO,</span></span><br><span class="line"><span class="params">    *,</span></span><br><span class="line"><span class="params">    sr: <span class="built_in">float</span> | <span class="literal">None</span> = <span class="number">22050</span>,</span></span><br><span class="line"><span class="params">    mono: <span class="built_in">bool</span> = <span class="literal">True</span>,</span></span><br><span class="line"><span class="params">    offset: <span class="built_in">float</span> = <span class="number">0</span>,</span></span><br><span class="line"><span class="params">    duration: <span class="built_in">float</span> | <span class="literal">None</span> = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    dtype: DTypeLike = np.float32,</span></span><br><span class="line"><span class="params">    res_type: <span class="built_in">str</span> = <span class="string">"soxr_hq"</span></span></span><br><span class="line"><span class="params"></span>) -&gt; <span class="type">Tuple</span>[ndarray, <span class="built_in">float</span>]</span><br></pre></td></tr></tbody></table></figure><p>库中的函数注释：</p><blockquote><p>Load an audio file as a floating point time series.</p><p>Audio will be automatically resampled to the given rate (default <code>sr=22050</code>).</p><p>To preserve the native sampling rate of the file, use <code>sr=None</code>.</p></blockquote><p>该函数在指定采样率的时候会对wav文件进行重采样，不传入sr参数的时候默认是22050，传入<code>sr=None</code>时，按照文件默认采样率读入</p><p>返回值是一个元组，分别为wav采样点的序列（支持多通道）和采样率</p><h3 id="使用自相关函数计算信号的周期"><a href="#使用自相关函数计算信号的周期" class="headerlink" title="使用自相关函数计算信号的周期"></a>使用自相关函数计算信号的周期</h3><p>找了一段之前录的电动车报警声的音频，截取了一段周期性强的作为目标音频文件</p><p>按音频本身的采样率读入</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">y,sr = librosa.load(wavfile, sr=<span class="literal">None</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计算自相关函数得到周期</span></span><br><span class="line">acf = np.correlate(y,y,mode=<span class="string">'full'</span>)[-<span class="built_in">len</span>(y):]</span><br></pre></td></tr></tbody></table></figure><p>在这段代码中，<code>np.correlate</code>函数计算了时间序列数据<code>y</code>的自相关函数，<code>mode='full'</code>表示使用完全相关模式。<code>[-len(data):]</code>用于截取出与原始数据长度相同的自相关函数值。</p><p>得到的acf序列是在偏移<code>lag</code>个采样点之后计算的自相关值，画出图，第二大的地方就是周期：</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20230825105350812.png" alt="image-20230825105350812"></p><p>0的时候自己和自己重合所以自然大</p><h2 id="失真"><a href="#失真" class="headerlink" title="失真"></a>失真</h2><p>分为线性与非线性失真：线性失真指的是在振幅或相位上有变化但不会增加新频率的失真。 而当有新的频率分量被激发时的失真是非线性失真。非线性失真才是人们通常说的“失真”。</p><p>非线性失真又分为谐波失真与非谐波失真：谐波失真中基频的所有整数倍频率都被考虑进来。这就是被称为 THD （总谐波失真）的经典失真测量。在某些特殊应用中，会考虑一些特定谐波的数量。</p><p>非谐波失真是那些频率不是基频倍数的失真，也就是 IMD （互调失真）的情况。</p><h2 id="幅频响应与相频响应"><a href="#幅频响应与相频响应" class="headerlink" title="幅频响应与相频响应"></a>幅频响应与相频响应</h2><p>见 <a href="https://zhuanlan.zhihu.com/p/111762941">https://zhuanlan.zhihu.com/p/111762941</a></p><p>大概就是信号在通过一个双端系统时，输出端的信号会随着输入端的不同信号成分的频率产生相位和幅度的变化</p><h2 id="预加重"><a href="#预加重" class="headerlink" title="预加重"></a>预加重</h2><p>见 <a href="https://zhuanlan.zhihu.com/p/34798429">https://zhuanlan.zhihu.com/p/34798429</a></p><p>简单点的结论就是：介质作为声能量的载体，在声源尺寸一定的情况下，<strong>频率越高，介质对声能量的损耗越严重</strong>。这里涉及到声音辐射阻抗等知识，太物理学了就不看了</p><p>为了弥补这个损耗，采用预加重</p><h2 id="各种图"><a href="#各种图" class="headerlink" title="各种图"></a>各种图</h2><p>时域波形通过傅里叶变换得到频域图</p><p>时域波形通过stft得到语谱图</p><p>语谱图的频率部分将线性距离修改为对数距离得到对数谱</p><p>语谱图的振幅（amplitude）做对数运算改用db，可以得到功率谱</p><p>将功率谱的频率标度用Mel标度表示，得到梅尔谱图，<a href="https://zhuanlan.zhihu.com/p/198900624">https://zhuanlan.zhihu.com/p/198900624</a></p><p><img src="https://img-blog.csdnimg.cn/f40338ded2e34ad19a38e73c0bd69bd0.png" alt="在这里插入图片描述"></p><h1 id="youtube网课"><a href="#youtube网课" class="headerlink" title="youtube网课"></a>youtube网课</h1><p>MIDI 音阶，A4对应的频率是440HZ，相邻半音的频率比是 $F(p)/F(p-1)=2^{\frac{1}{12}}$ </p><p><strong>Sound Power 声音功率</strong></p><p>Energy per unit of time emitted by a sound source in all directions</p><p>单位 瓦(W)</p><p><strong>Sound Intensity 声音强度</strong></p><p>Sound power per unit area</p><p>单位 $W/m^2$</p><p><strong>人的听觉对声音强度的阈值</strong></p><script type="math/tex; mode=display">Threshold\;of\; hearing: TOH=10^{-12}W/m^2 \\\\Threshold\;of\;pain:10\cdot W/m^2</script><p>分贝是用来衡量Sound intensity level 的单位，设Sound intensity为 $I$</p><script type="math/tex; mode=display">dB(I)=10\cdot \log_{10}(\frac{I}{I_{TOH}})</script><p><strong>Frequency to Mel Scale</strong></p><script type="math/tex; mode=display">m= 2595\cdot log_{10}(1+\frac{f}{700})\\\\f=700\cdot (10^{m/2595}-1)</script><ul><li>Choose number of mel bands</li></ul><p>这里的band好像是翻译成频段，在AI audio的文章里经常被作为一个hyper parameter设置，常取40，60，90，128，类比键盘上的88个黑白键覆盖了一段很长的频域，mel bands也是这样类似的东西，在频率范围映射的mel频率范围中等分（然后量化？我猜的）</p><ul><li><p>Construct mel filter banks</p></li><li><p>又有五小步</p><ul><li>首先，将stft变换后的频率的min和max转换到mel频率（使用上面的公式）</li><li>假设取了M个mel bands，包括min,max共M+2个点，将上面的min和max的mel频带分成M+1份</li><li>然后把这M个点使用上面的mel2freq转换回频率</li><li>然后把这些频率近似到最近的frequency bin（stft中每个采样点取的离散频率）</li><li>然后按照这些得到的映射在频率单位的点构建三角滤波器（好复杂不想看）</li></ul></li><li><p>Apply mel filter banks to spectrogram</p></li></ul><p>这里有两个矩阵，一个是梅尔滤波矩阵，乘上功率谱矩阵，就得到了梅尔谱图</p><h3 id="Mel-Frequency-Cepstral-Coefficients"><a href="#Mel-Frequency-Cepstral-Coefficients" class="headerlink" title="Mel-Frequency Cepstral Coefficients"></a>Mel-Frequency Cepstral Coefficients</h3><p>计算cepstrum（倒谱率）</p><script type="math/tex; mode=display">C(x(t))=F^{-1}[log(F[x(t)])]</script><p>其中 $x(t)$ 是时域信号，$F[\cdot]$ 是傅里叶变换，不是很懂为什么这里明明是傅里叶的逆变换但是视频里说相当于对频谱图做了一次傅里叶变换得到了 the spectrogram of the spectrogram</p><p>先给了一个结论，语音就是声道频率响应和声门激励的卷积</p><p>时域信号:  $x(t)=e(t)\cdot h(t)$</p><p>频域信号:  $X(t)=E(t)\cdot H(t)$ </p><p>e和h分别是声门激励(glotta pulse)和声道频率响应(vocal tract frequency response)</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20230831162304687.png" alt="image-20230831154825951"></p><p>对上面那个公式两边取对数</p><script type="math/tex; mode=display">log(X(t))=log(E(t))+log(H(t))</script><p>可以把这两个部分分开</p><p>然后我们语音分析所要的信息，音色，语义等都包含在声道频率响应里，对mel频谱进行逆变换后得到的倒谱系数 $h(t)$ 就称为Mel频率倒谱系数，简称MFCC</p><p>然后有一种不用iDFT的方法，叫做离散余弦变换（DCT, Discrete Cosine Transform）</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20230831154825951.png" alt="image-20230831162304687"></p><p>因为不需要iDFT之后的虚数部分，只要实数</p>]]></content>
      
      
      <categories>
          
          <category> 声学相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信号处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数学知识</title>
      <link href="/2023/08/02/%E6%95%B0%E5%AD%A6%E7%9F%A5%E8%AF%86/"/>
      <url>/2023/08/02/%E6%95%B0%E5%AD%A6%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="学习过程中遇到的数学知识"><a href="#学习过程中遇到的数学知识" class="headerlink" title="学习过程中遇到的数学知识"></a>学习过程中遇到的数学知识</h1><h2 id="傅里叶变换"><a href="#傅里叶变换" class="headerlink" title="傅里叶变换"></a>傅里叶变换</h2><p>网上已经有很多关于傅里叶变换在信号处理中的应用了，大概就是用一堆正弦余弦函数的叠加去模拟任何<strong>周期函数</strong>（必须满足狄利克雷条件）</p><blockquote><p>狄利克雷条件</p><ol><li>在一个周期内，连续或只有有限个第一类间断点</li><li>在一个周期内，极大值和极小值的数目应是有限个</li><li>在一个周期内，函数是绝对可积的</li></ol></blockquote><p>先搞懂傅里叶级数是干嘛的：</p><p>对于一个振荡系统，可以表述为：</p><script type="math/tex; mode=display">f(t)=A\sin(\omega t+\psi)</script><p>其中$t,A,\omega,\psi$分别为时间，振幅，角速度，初相，其中的角速度也可以用周期表示：$\omega=\frac{2\pi}{T}$</p><p>类比线性代数中的n维向量空间的正交基，对n维向量空间中的任意一个向量$\boldsymbol\eta$，总可以用标准正交基的线性组合表示</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20230802145529990.png" alt="image-20230802145529990"></p><blockquote><p>函数正交的定义：如果两个函数在[a,b]正交，就是两个函数在[a,b]区间的每一个点的函数值相乘的和为零。</p></blockquote><p>将傅里叶级数写为一般公式：</p><script type="math/tex; mode=display">f(x)=\frac{a_0}{2}+\sum^{\infty}_{n=1}\left(a_n\,\cos\frac{2\pi nx}{T}+b_n\,\sin\frac{2\pi nx}{T}\right)\qquad(1)\\a_n=\frac{2}{T}\int^{x_0+T}_{x_0}f(x)\cos\frac{2\pi nx}{T}dx\\b_n=\frac{2}{T}\int^{x_0+T}_{x_0}f(x)\sin\frac{2\pi nx}{T}dx</script><p>$a_n$推导如下，$b_n$类似，对公式(1)两边同乘$\sin\frac{2\pi kx}{T}$，再做(0,T)的积分：</p><script type="math/tex; mode=display">\int_0^T f(x)\sin\frac{2\pi kx}{T}dx = \int_0^T\frac{a_0}{2}\sin\frac{2\pi kx}{T}dx+\sum^\infty_{n=1}\left(\int_0^Ta_n\cos\frac{2\pi nx}{T}\sin\frac{2\pi kx}{T}dx+\int_0^Tb_n\sin\frac{2\pi n x}{T}\sin\frac{2\pi kx}{T}dx\right)</script><p>由上面那个正交积分为0的结论：</p><script type="math/tex; mode=display">\int_0^T\frac{a_0}{2}\sin\frac{2\pi kx}{T}dx=0\\\int_0^Ta_n\cos\frac{2\pi nx}{T}\sin\frac{2\pi kx}{T}dx=0\\\int_0^Tb_n\sin\frac{2\pi n x}{T}\sin\frac{2\pi kx}{T}dx=0\qquad n\neq k</script><p>化简得到：</p><script type="math/tex; mode=display">\int_0^T f(x)\sin\frac{2\pi kx}{T}dx = \int_0^Tb_n\left(\sin\frac{2\pi nx}{T}\right)^2 dx\\=\int_0^Tb_n\frac{1-\cos\frac{4\pi nx}{T}}{2}dx\\=\frac{T}{2}b_n</script><p><strong>傅里叶级数与幅度相位之间的关系</strong></p><script type="math/tex; mode=display">c_n=\sqrt{a_n^2+b_n^2}\\\varphi=\arctan\left(-\frac{b_n}{a_n}\right)</script><p>接下来推到离散形式的傅里叶级数：</p><p>又有欧拉公式，连接复数域与三角的桥梁：</p><script type="math/tex; mode=display">e^{i\varphi}=\cos\varphi + i\,\sin\varphi</script><p>关于这个复数 i 的理解，可以见下面这篇文章的说法，在实数轴中旋转90°，将实数轴变成复平面</p><p>概念理解：<a href="https://zhuanlan.zhihu.com/p/317237264">通俗易懂的理解傅里叶变换</a></p><p>将上面公式的相位 $\varphi$ 用 $\omega t$ 替换</p><script type="math/tex; mode=display">e^{i\omega t} = \cos \omega t+ i\,\sin\omega t</script><p>设一组三角函数，频率为 $\cos \omega t$的n倍，那么可以定义这一组三角函数为：</p><script type="math/tex; mode=display">\cos\,n\omega t=\frac{e^{in\omega t}+e^{-in\omega t}}{2}\\\sin\,n\omega t=\frac{e^{in\omega t}-e^{-in\omega t}}{2i}</script><p>代回式(1)中，得到（这里把自变量换成t了）：</p><script type="math/tex; mode=display">f(t)=\frac{a_0}{2}+\sum^\infty_{n=1}\left(a_n\frac{e^{in\omega t}+e^{-in\omega t}}{2}+b_n\frac{e^{in\omega t}-e^{-in\omega t}}{2i}\right)</script><p>合并同类项得：</p><script type="math/tex; mode=display">f(t)=\frac{a_0}{2}+\sum^{\infty}_{n=1}\left[\left(\frac{a_n}{2}+\frac{b_n}{2i}\right)\,e^{in\omega t}+\left(\frac{a_n}{2}-\frac{b_n}{2i}\right)\,e^{-in\omega t}\right]\quad(2)</script><p>又有：</p><script type="math/tex; mode=display">a_{-n}=\frac{2}{T}\,\int_0^Tf(x)\,\cos -n\omega x\,dx=a_n\\b_{-n}=\frac{2}{T}\,\int_0^Tf(x)\,\sin -n\omega x\,dx=-b_n</script><p>所以式（2）可以变换为：</p><script type="math/tex; mode=display">f(t)=\frac{a_0}{2}+\sum^\infty_{n=1}\left(\frac{a_n}{2}+\frac{b_n}{2i}\right)e^{in\omega t}+\sum^\infty_{n=1}\left(\frac{a_{-n}}{2}+\frac{b_{-n}}{2i}\right)e^{-in\omega t}\\=\frac{a_0}{2}+\sum^\infty_{n=1}\left(\frac{a_n}{2}+\frac{b_n}{2i}\right)e^{in\omega t}+\sum_{-\infty}^{n=-1}\left(\frac{a_{n}}{2}+\frac{b_{n}}{2i}\right)e^{in\omega t}\\</script><p>这里直流分量 $\frac{a_0}{2}$ 对应的是n=0的情况，所以上式可化简为：</p><script type="math/tex; mode=display">f(t) =\sum^\infty_{-\infty}\left(\frac{a_n}{2}+\frac{b_n}{2i}\right)e^{in\omega t}</script><p>高中就学过 $i^2=-1$ ，所以 $\frac{b_n}{2i}=-\frac{ib_n}{2}$ ，最终得到：</p><script type="math/tex; mode=display">f(t) =\sum^\infty_{-\infty}\frac{\left(a_n-ib_n\right)}{2}e^{in\omega t}</script><p>令 <script type="math/tex">c_n=\frac{(a_n-ib_n)}{2}</script> ，最终得到：</p><script type="math/tex; mode=display">f(t)=\sum^\infty_{-\infty}c_n\,e^{in\omega t} \qquad (3)</script><p>可同样由正交性推导到$c_n$的公式：</p><script type="math/tex; mode=display">c_n=\frac1T\int^T_0f(t)e^{-in\omega t}dt</script><p>这个公式表达的意思，按照我的理解，就是一个信号频率和幅度的分布</p><p>首先这是一堆值的连加，频率由第二项中的$\omega$反映，$f=\frac{\omega}{2\pi}$ ，幅度由 $c_n$ 反映</p><script type="math/tex; mode=display">\left|c_n\right|=\frac12\sqrt{a_n^2+b_n^2}=\frac12c_n</script><p>而通过对其虚部与实部反正切,就可以求得该频率波的相位</p><p><strong>注意注意注意！上面那个只是复数形式的傅里叶级数</strong></p><p><img src="https://pic4.zhimg.com/80/v2-aa528e3bd3871dfc7292242ed282bce3_1440w.webp" alt="img"></p><p>上面来源知乎的图，说明了傅里叶级数到傅里叶变换的关系</p><ul><li><p>周期函数可以根据傅里叶级数画出频域图</p></li><li><p>当周期函数周期变大，频率图逐渐变得密集</p></li><li>$T=\infty$, 得到傅里叶变换，频域图变为连续的曲线</li></ul><p>我们把公式 (3) 用周期的形式重写一遍：</p><script type="math/tex; mode=display">f(x)=\sum^\infty_{n=-\infty}\;c_n\cdot e^{i\frac{2\pi nx}{T}} \qquad (4)</script><p>这里套用最开头说的N维空间正交基的概念，$e^{i\frac{2\pi nx}{T}}$是正交基， $c_n$ 是基坐标</p><p>当 $T\rightarrow \infty$ 时，$n \rightarrow \infty$ 频域的一个个离散的线变的连续，对每个线段的累加就变成了对整个频域的积分</p><p>由上面推导的 $c_n$ 的公式，带入(4) 中：</p><script type="math/tex; mode=display">\lim_{T\rightarrow \infty}f(t)=\lim_{T\rightarrow \infty}\sum^\infty_{n=-\infty}\; \frac1T\int^T_0f(t)e^{\frac{-in 2\pi t}{T}}dt\cdot e^{i\frac{2\pi nx}{T}} \qquad (5)</script><p><del>推不出来</del></p><p>把 $\frac{2\pi}{T}$ 写成 $\omega$ , 当 $T\rightarrow\infty$ 时，$\omega \rightarrow \infty$ ，引入一个 $\Delta \omega=(n+1)\omega - n\omega=\omega$ 的概念</p><script type="math/tex; mode=display">(5)=\lim_{T\rightarrow \infty}\sum^\infty_{n=-\infty}\; \frac{\Delta \omega}{2\pi}\int^T_0f(t)e^{-in\omega t}dt\cdot e^{in\omega t}</script><p>把 $n\omega$ 看成 W，把 $\Delta \omega$ 当作积分，得到：</p><script type="math/tex; mode=display">f(t)=\frac{1}{2\pi}\int^{+\infty}_{-\infty}(\int^{+\infty}_{-\infty}f(t)e^{-iWt}dt)e^{iWt}dW</script><p>其中 $\int^{+\infty}_{-\infty}f(t)e^{-tWt}dt$ 的积分变量是t，是W的函数，令</p><script type="math/tex; mode=display">F(W)=\int^{+\infty}_{-\infty}f(t)e^{-iWt}dt\qquad (6)</script><p>(6) 就是 $f(t)$ 的傅里叶变换，把 $F(W)$ 带入，得到傅里叶变换的逆变换</p><script type="math/tex; mode=display">f(t)=\frac{1}{2\pi}\int^{+\infty}_{-\infty}F(W)e^{iWt}dW</script><h2 id="离散傅里叶变换"><a href="#离散傅里叶变换" class="headerlink" title="离散傅里叶变换"></a>离散傅里叶变换</h2><p>由于计算机是一个离散系统，而上面的傅里叶变换及其逆变换是一个连续的积分，为了在计算机中进行信号分析，引入了离散傅里叶变换</p><p>首先了解离散时间傅里叶变换</p><h3 id="离散时间傅里叶变换"><a href="#离散时间傅里叶变换" class="headerlink" title="离散时间傅里叶变换"></a>离散时间傅里叶变换</h3><p>对连续信号 $x(t)$ ，使用采样频率 $f_s$ 进行采样，采样点时间间隔为 $T_s=\frac{1}{f_s}$ 冲击采样序列为：</p><script type="math/tex; mode=display">\delta_s(t)=\sum^{\infty}_{n=-\infty}\delta(t-nT_s)</script><p>取样后的信号为：</p><script type="math/tex; mode=display">x_s(t)=\sum^{\infty}_{n=-\infty}x(t)\delta(t-nT_s)</script><p>连续信号的傅里叶变换公式是(6)，则采样后的形式为：</p><script type="math/tex; mode=display">F(W)=\int^{\infty}_{-\infty}(\sum^{\infty}_{n=-\infty}x(t)\delta(t-nT_s))e^{-i\omega t}dt</script><p>交换积分和求和的顺序，然后由 $\delta(t)$ 的筛选性（冲击函数在 $x=0$ 处的取值为正无穷，然后在整个时域上的积分为1，所以乘一个函数在整个时域上的积分就会等于这个函数在冲激函数取0时对应的值？）</p><script type="math/tex; mode=display">\int^{+\infty}_{-\infty}f(x)\delta(x-x_0)dx=f(x_0)</script><p>得</p><script type="math/tex; mode=display">F_s(W)=\sum^{\infty}_{n=-\infty}x(nT_s)e^{-i\omega n T_s}</script><p>在python中，我们读入的波形文件是一个按照采样率得到的时序序列 $x(n)$ ，每个采样点间的时间间隔为 $\frac{1}{sampling\,rate}$ ，最后用这个时序序列替代上面的方程，最后得到：</p><script type="math/tex; mode=display">X_s(\omega)=\sum^{\infty}_{n=-\infty}x(n)e^{-i\omega n T_s}\qquad (7)</script><p>式(7) 称为离散时间傅里叶变换，简称DTFT</p><h3 id="离散傅里叶变换-1"><a href="#离散傅里叶变换-1" class="headerlink" title="离散傅里叶变换"></a>离散傅里叶变换</h3><p>我们的目标是将连续的信号转换为计算机能够处理的数据，而式(7)中虽然对时域信号离散化了，但是在频域上是对无穷个采样点进行类和，而计算机只能处理有限的数据，所以频域的处理是将无限变成有限，DFT的处理是将无限长的离散信号进行截短至N个采样点，然后将这N个采样点进行周期延拓，变成周期信号，这样其频率就离散了</p><p>对连续信号进行N次采样后的 $x_s(t)$ ，进行周期延拓，其周期为 $T=N\times T_s$ ，频率为 $f=\frac{2\pi}{T}$ 在一个周期T内，表达式为：</p><script type="math/tex; mode=display">x_s(t)=\sum^{\infty}_{n=-\infty}x(t)\delta(t-nT_s)</script><p>令 $\omega=f=\frac{2\pi}{T}$ 对式 (6) ，将积分区间限制为单个周期，信号 $f(t)$ 用上面采样的 $x_s(t)$ 进行替换，且将连续频率使用基准频率 $f$ 的倍数来表示：</p><script type="math/tex; mode=display">X[k\omega]=\frac{1}{T}\int^T_0(\sum^{N-1}_{n=0}x(t)\delta(t-nT_s))e^{-i\frac{2\pi}{T}kt}dt</script><p>然后套用冲击函数的筛选性，最后得到：</p><script type="math/tex; mode=display">X[k\omega]=\frac{1}{T}\sum ^{N-1}_{n=0}x(nT_s)e^{-i\frac{2\pi}{NT_s}knT_s}=\frac{1}{NT_s}\sum^{N-1}_{n=0}x(nT_s)e^{-i\frac{2\pi}{N}kn}</script><p>令</p><script type="math/tex; mode=display">X[k\omega]\cdot T_s=X[k]</script><p>得</p><script type="math/tex; mode=display">X[k]=\frac1N\sum^{N-1}_{n=0}x[n]e^{-i\frac{2\pi}{N}kn}\qquad(8)</script><p>这就是离散周期信号的傅里叶变换</p><p>同时由 $\omega$ 的定义，离散周期傅里叶变换后的第k个数对应的频率是为 $f_k=\frac{k\omega}{2\pi}$</p><script type="math/tex; mode=display">k\omega=kf=k\frac{2\pi}{T}=k\frac{2\pi}{NT_s}=\frac{k}{N}2\pi f_s</script><p>其中 $f_s$ 是采样频率，所以</p><script type="math/tex; mode=display">f_k=\frac kN f_s</script><h2 id="短时傅里叶变换"><a href="#短时傅里叶变换" class="headerlink" title="短时傅里叶变换"></a>短时傅里叶变换</h2><p>涉及到分帧加窗的概念，对于非平稳信号，傅里叶变换无法体现信号在时间上的变化信息，只有仅仅关心信号中是否包含某个频率分量而不关心它出现的时间的时候，傅里叶变换才可以用于处理非平稳信号</p><p>而STFT就是在傅里叶变换中加了一维的自由度（帧），对每帧进行傅里叶变换，使频谱可以反映其不同时间所处的频率状态</p><p>直接考虑在计算机中离散的情况，提出一个窗函数 $w[n]$ （一般有矩形窗，汉明窗，汉宁窗）</p><p>加窗的操作就是在傅里叶变换的基础上乘一个窗函数：</p><script type="math/tex; mode=display">X[k]=\sum^{N-1}_{n=0}w[n]x[n+iH]e^{-j\frac{2\pi}{N}kn}</script><p>H 是窗函数每次取帧移动的步长，一般为窗长的 25%-50%，N不再是总的采样次数而是窗长，因为是在每帧中做傅里叶变换，i是第几个窗</p><h2 id="范数"><a href="#范数" class="headerlink" title="范数"></a>范数</h2><p>是一种类似距离的定义，写作 $\Vert \boldsymbol x\Vert$ 或 $\Vert \boldsymbol X\Vert$ ，分别表示向量和矩阵</p><p>为方便统一，一般将任意向量 $\boldsymbol x$ 的 $l_p$ 范数定义为</p><script type="math/tex; mode=display">\Vert \boldsymbol x\Vert_p = \sqrt[p]{\sum_i\vert x_i\vert^p}</script><p>当 $p=0$ 时，$\Vert \boldsymbol x\Vert_0$  表示向量 $\boldsymbol x$ 中非0元素的个数</p><p>为了解决过拟合问题，会在损失函数后面加上一个 $l_1$ 范数，挺复杂的，见 <a href="https://www.zhihu.com/tardis/zm/art/26884695?source_id=1005">链接</a></p><p>对于矩阵，使用Frobenius范数来描述类似的东西</p><script type="math/tex; mode=display">\Vert \boldsymbol X \Vert_F = \sqrt{\sum^m_{i=1}\sum^n_{j=1}x_{ij}^2}</script><h2 id="等错误率-EER"><a href="#等错误率-EER" class="headerlink" title="等错误率 EER"></a>等错误率 EER</h2><p>首先，给出结论，EER值越低，生物识别系统的准确度越高</p><p>以下将逐步引导给出EER的定义</p><h4 id="混淆矩阵"><a href="#混淆矩阵" class="headerlink" title="混淆矩阵"></a>混淆矩阵</h4><p>对于一个分类问题，模型给出的每个样本的预测为一个概率值，我们需要选择一个阈值 $\tau$ ，超出该阈值则为正例，低于则为反例，由此得到混淆矩阵</p><p>针对预测值和真实值之间的关系，可以将样本分为四个部分，分别是:</p><ul><li>真正例（True Positive, TP），预测值为1，真实值为1</li><li>假正例（False Positive, FP），预测值为1，真实值为0</li><li>真负例（True Negative, TN），预测值为0，真实值为0</li><li>假负例（False Negative, FN），预测值为0，真实值为1</li></ul><p>混淆矩阵定义为：</p><div class="table-container"><table><thead><tr><th>真实/预测</th><th>1</th><th>0</th></tr></thead><tbody><tr><td>1</td><td>TP</td><td>FN</td></tr><tr><td>0</td><td>FP</td><td>TN</td></tr></tbody></table></div><h4 id="ROC曲线"><a href="#ROC曲线" class="headerlink" title="ROC曲线"></a>ROC曲线</h4><p>ROC曲线的横纵坐标分别为假正例率（False Positive Rate）与真正例率（True Positive Rate），如下：</p><script type="math/tex; mode=display">TPR=\frac{TP}{TP+FN}\\FPR=\frac{FP}{TN+FP}</script><p>以FPR为x轴，TPR为y轴画图，就得到了ROC曲线。</p><p><img src="https://ask.qcloudimg.com/http-save/yehe-2144603/3vgpjjb0hm.png" alt="img"></p><h4 id="等错误率"><a href="#等错误率" class="headerlink" title="等错误率"></a>等错误率</h4><p>预测正确的概率（TPR）和预测错误的概率（TNR）相同时的TPR和TNR，TNR=1-FPR</p>]]></content>
      
      
      <categories>
          
          <category> 查阅用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 傅里叶变换 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TF-grident说话人分离</title>
      <link href="/2023/07/30/TF-grident%E8%AF%B4%E8%AF%9D%E4%BA%BA%E5%88%86%E7%A6%BB/"/>
      <url>/2023/07/30/TF-grident%E8%AF%B4%E8%AF%9D%E4%BA%BA%E5%88%86%E7%A6%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="TF-GRIDNET-MAKING-TIME-FREQUENCY-DOMAIN-MODELS-GREAT-AGAIN-FOR-MONAURAL-SPEAKER-SEPARATION"><a href="#TF-GRIDNET-MAKING-TIME-FREQUENCY-DOMAIN-MODELS-GREAT-AGAIN-FOR-MONAURAL-SPEAKER-SEPARATION" class="headerlink" title="TF-GRIDNET: MAKING TIME-FREQUENCY DOMAIN MODELS GREAT AGAIN FOR MONAURAL SPEAKER SEPARATION"></a>TF-GRIDNET: MAKING TIME-FREQUENCY DOMAIN MODELS GREAT AGAIN FOR MONAURAL SPEAKER SEPARATION</h1><p>来源：ICASSP 2023，CMU，Language Technology Institute</p><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>提出了 TF-GridNet ，一个新的，工作在时域和频域的多路深度神经网络，用于无回声条件下的单通道talk-independent（这个不知道什么概念）说话人分离</p><p>模型堆叠了几个多通道的块，每个块都包括一个帧内模型，一个子带时域模型，一个全频段自注意力模型</p><p>用复数频谱做映射，用实部和虚部（RI）做输入，预测目标的RI，引入了一个新的loss规则</p><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>由于深度聚类和PIT（是一种多通道音频分离任务的深度学习技术），单声道说话人分离技术又很大的进展，早期的研究在幅度谱上训练模型做分离，有的做了基于幅度谱的相位重建，随后的研究在复数TF域上用 complex ratio masking的方法做分离，或者在时域上用 TasNet提出的 <code>encoder-separator-decorder</code>做分离</p><h3 id="本文的方法"><a href="#本文的方法" class="headerlink" title="本文的方法"></a>本文的方法</h3><ul><li><p>提出在无回声条件下，用复数频谱映射做说话人分离</p></li><li><p>提出了一个新的DNN结构，叫TF-GridNet</p></li><li>基于流行的SI-SDR loss，设计了一个新的时域loss</li></ul><h2 id="Proposed-algorithm"><a href="#Proposed-algorithm" class="headerlink" title="Proposed algorithm"></a>Proposed algorithm</h2><p>给定一个C个说话人的混合录音，时域的物理模型可以用方程<script type="math/tex">y[n]=\sum^C_{c=1}s^{(c)}[n]</script>表示，y表示混合信号，<script type="math/tex">s^{(c)}</script>表示原始信号c，n索引N次取样。</p><p>在短时傅里叶变换域，物理模型可以用方程 $Y(t,f)=\sum^C_{c=1}S^{(c)}(t,f)$ 表示，其中，$Y$ 和 $S^{(c)}$ 分别代表复数谱的 $y$和$s^{(c)}$，t 索引 T 帧，f 索引 F 频率的集合</p><p>在本研究中，C是假设已知的，我们的目标是基于 $y$ 还原每个源说话人 $s^{(c)}$</p><p>网络结构：</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20230827225747037.png" alt="image-20230803175606680"></p><p>原始信号做STFT变换，然后做2维卷积（二维分别是实部和虚部？）+ gLN（组归一化，一种特征处理的方法）</p><h3 id="2-1-复数谱映射"><a href="#2-1-复数谱映射" class="headerlink" title="2.1 复数谱映射"></a>2.1 复数谱映射</h3><p>$Y$ 的 RI 分量 串联作为输入特征，预测每个说话人的 RI 分量</p><p>损失函数是基于合成后的每个预测的RI分量的时域信号定义的</p><p>将时域混合的样本方差归一化为1，使用相同的缩放因子对每个干净源进行缩放</p><h3 id="2-2-TF-GridNet"><a href="#2-2-TF-GridNet" class="headerlink" title="2.2 TF-GridNet"></a>2.2 TF-GridNet</h3><p>给定一个$2\times T \times F$ 的输入张量，2是因为把RI分量叠起来了</p><p>首先用一个2维的卷积，窗口大小为 $3\times 3$ ，随后使用 gLN 为每个 T-F unit 计算一个 D维的embedding，得到一个 $D\times T \times F$ 大小的张量</p><p>随后把这个张量输入 B 个 TF-GridNet 块，每个块都包括了一个 帧内谱模块，一个子带时域模块，一个全频带自注意力模块，以逐渐利用局部和全局的时域频域信息来优化 TF 嵌入</p><p>最后，一个使用 $3\times 3$的kernel的有 2C个输出通道的 2维的反卷积层，加上一个线性激活来得到预测的RI分量，iSTFT用于信号重建</p><h4 id="2-2-1-帧内谱模块"><a href="#2-2-1-帧内谱模块" class="headerlink" title="2.2.1 帧内谱模块"></a>2.2.1 帧内谱模块</h4><p>由图可知这个模块共四个步骤</p><p>将输入到第b个TF-FridNet 的 block的张量 $R_b \in \mathbb{R}^{D\times T\times F}$ 视为 <font color="red">T 个独立的序列</font>，每个序列的长度为 F</p><p>并使用一个单层的双向长短期记忆网络（BLSTM）对每个帧的局部的频谱信息进行建模</p><ol><li>首先使用 kernel size 为 $I$ ，步长为 $J$ 的窗口执行 unfold，来堆叠每一步相邻的嵌入，然后对频率维度进行 0填充，$F’=\lceil\frac{F-I}{J}\rceil\times J + I$ （没看懂这个公式啥意思），得到 $\dot{R_b}$</li><li>然后在通道维度（第一维）使用层归一化(LN) ，再对每个 direction做单层 H个units的 BLSTM，来对每帧内的频间信息进行建模，得到 $\ddot{R_b}$</li><li>然后对BLSTM隐藏的嵌入，做1维的反卷积，kernel size I,stride size J, input channel 2H and output channel D ，得到$\dddot{R_b}$</li><li>在移除0填充之后，通过残差连接将这个张量与输入张量相加，得到输出张量 $U_b$</li></ol><h4 id="2-2-2-子带时域模块"><a href="#2-2-2-子带时域模块" class="headerlink" title="2.2.2 子带时域模块"></a>2.2.2 子带时域模块</h4><p>和帧内谱模块类似，不过输入是把 $U_b$ 当作<font color="red"> F 个长度为 T 的独立的序列</font>，然后BLSTM用于对每个子带内的时域信息进行建模，输出用 $Z_b$ 表示</p><h4 id="2-2-3-全频带自注意力模块"><a href="#2-2-3-全频带自注意力模块" class="headerlink" title="2.2.3 全频带自注意力模块"></a>2.2.3 全频带自注意力模块</h4><p>结构如图：</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20230827230911835-1693148953424-1.png" alt="image-20230804161240050"></p><p>输入为上个模块的 $Z_b$ ，首先基于每帧的T-F嵌入计算帧级嵌入，然后在这些帧级嵌入上使用全序列 self-attention 来捕捉长序列全局的信息，动机是帧内和子带的 BLSTM 只能对局部信息进行建模，一个全序自注意力模块能够使每个帧关注任何感兴趣的帧来利用长序列信息</p><p>自注意力机制和之前提出的不同在于：</p><ol><li>使用多头自注意力机制</li><li>使用双路径模型</li></ol><p>具体来说：</p><p>自注意力模块有L个头，每个头 l，使用一个 二维卷积加上一个激活函数 PReLU，在channel和频率维度做归一化后得到一个 $E\times F \times  T$ 的tensor(第三个block的不一样)，再经过一个 Reshape操作，得到三个2D的tensor</p><p>分别是</p><p>query: $Q_l \in \mathbb{R}^{T\times(F\times E)}$ </p><p>key: $K_l \in \mathbb{R}^{T\times(F\times E)}$</p><p>value: $V_l \in \mathbb{R}^{T\times(F\times D/L)}$</p><p>用于获取query和key张量的Conv2D层都具有E个输出channel，再每帧内叠加TF嵌入后，最终输出 $F\times E$ 维的向量，同样，用于计算 value张量的Conv2D层有 D/L 输出通道，所以得到的value张量有D/L 个channel</p><p>最后得到的注意力输出 $A_l \in \mathbb{R}^{T\times(F\times D/L)}$ ：</p><script type="math/tex; mode=display">a_l=softmax(\frac{Q_lK_l^\intercal}{\sqrt{F\times E}})V_l</script><p>然后沿着第二维度将L个头连接起来，重塑回 $D\times T \times F$ 维张量，再走一遍卷积+激活函数+归一化来聚合 cross-head 的信息，然后通过残差连接添加到输入张量中，得到输出张量 $R_{b+1}$ ，被喂到下一个block</p><p>两个优点：</p><ol><li>引入参数少</li><li>计算量少</li></ol><h3 id="2-3-Loss-Function"><a href="#2-3-Loss-Function" class="headerlink" title="2.3 Loss Function"></a>2.3 Loss Function</h3><p>模型使用 utterance-level PIT(uPIT)方法训练</p><blockquote><p>uPIT: PIT是一种训练的方法，全称为Permutation Invariant Training。这种训练方式就可以end-to-end去训练，总体思想很直觉，就是我先随便假设一个speakers对应于输出的的顺序，稍微train几下，得到一个model。然后，下一次train的时候，我会算两次SI-SDR之类的评价指标，分别是红1，蓝2和蓝1，红2，然后把Loss小的那个作为排序，然后按这个顺序train下去</p><p>uPIT 相当于在上述所有permutation组合的情况中，找一种最优的输出。</p></blockquote><p>有两种相同的SI-SDR的方法，一种是缩放目标以使其能量水平与生成的语音的的能量水平相同，另一种是反过来</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20230803175606680.png" alt="image-20230827225747037"></p><p>$\hat S^{(c)}$ 是预测得到的RI分量重建后的信号， $\hat \alpha ^{(c)} = (\hat S^{(c)})^\intercal S^{(c)}/(\hat S^{(c)})^\intercal \hat S^{(c)}$  </p><p>这个loss function让收敛更快</p><p>还在混合和缩放后的预测源之间加了一个混合约束，如下：</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20230804161240050.png" alt="image-20230827230911835"></p><p>然后后面就是讲这么设置得到的结果为什么更好</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>看了，写了注释，跑hugging face上的模型的时候说要数据集，没弄到</p>]]></content>
      
      
      <categories>
          
          <category> 论文笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> speaker_seperation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习笔记</title>
      <link href="/2023/07/08/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/07/08/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h1><p>随笔类型，想到什么写什么</p><h2 id="Loss-function"><a href="#Loss-function" class="headerlink" title="Loss function"></a>Loss function</h2><h3 id="交叉熵"><a href="#交叉熵" class="headerlink" title="交叉熵"></a>交叉熵</h3><p>在cnn中，输出层计算Loss用的Cross-Entropy，叫交叉熵，见<a href="https://zhuanlan.zhihu.com/p/149186719">这个</a>，之后再详细研究</p><p>上面那个图的水印很傻逼，之后看的这个<a href="https://zhuanlan.zhihu.com/p/115277553">损失函数：交叉熵详解</a></p><p>为了获取事件的最短平均编码，根据事件的普遍程度来分配付出的码字空间<code>cost</code>，假设整个码字空间的大小为1，那么这个<code>cost</code>就等于事件的发生概率</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20230712143227869.png" alt="image-20230712143227869"></p><p>根据上面的公式，可以得到编码 $x$ 的平均长度是：</p><script type="math/tex; mode=display">L(x)=log_2 \frac{1}{p(x)}</script><p>当每个码字 $x$ 出现的概率都是 $p(x)$ 时，最短的平均码字的长度是：</p><script type="math/tex; mode=display">H(p)&=&\sum_x^{x\in X}p(x)\times L(x)\\&=&\sum_x^{x\in X}p(x)\times log_2(\frac{1}{p(x)})\\&=&-\sum_x^{x\in X}p(x)\times log_2\, p(x)</script><p>这里的 $H(p)$ 就是熵（<em>Entropy</em>）</p><p>交叉熵的概念在上面那篇文章中讲的很好，对于同一个事件集合的不同概率分布，交叉熵可以用来描述两个概率分布之间的距离（差异程度）</p><blockquote><p>该长度（把来自一个分布q的消息使用另一个分布p的最佳代码传达的平均消息长度）称为交叉熵。 形式上，我们可以将交叉熵定义为：</p></blockquote><script type="math/tex; mode=display">H_p(q)=\sum_x^{ x\in X}q(x)log_2(\frac{1}{p(x)})=-\sum_x^{ x\in X}q(x)log_2p(x)</script><p>注意，交叉熵<strong>不是对称的</strong>。</p><hr><p>7.25</p><p>今天开始看西瓜书，之前那个感觉全是公式，一点也不通俗易懂</p><p><strong>常用的度量模型好坏的方法：F1度量</strong></p><script type="math/tex; mode=display">F1=\frac{2\times P \times R}{P+R}=\frac{2\times TP}{样例总数+TP-TN}</script><p>其中，P为查准率，R为查全率，TP（True Positive）为真正例，TN（True Negtive）为真反例。</p><p>F1度量是基于查准率与查全率的调和平均定义的：</p><script type="math/tex; mode=display">\frac1{F1}=\frac{1}{2}\cdot (\frac{1}{P}+\frac{1}{R})</script><p>根据对查全率与查准率的偏好要求，引申出F1度量的一般形式 $F_\beta$ ，定义为：</p><script type="math/tex; mode=display">F_\beta=\frac{(1+\beta^2)\times P \times R}{(\beta^2\times P+R)}</script><p>是根据P和R的加权调和平均得到的，β&gt;1时，查全率有更大影响；β&lt;1时，查准率有更大影响。</p><p><strong>ROC与AUC</strong></p><p>ROC曲线是从按阈值分类的角度研究学习器泛化性能的有力工具</p><p>很多学习器对于分类任务，是为测试样本产生一个概率或实值，然后将这个预测值与一个分类阈值进行比较，若大于则为正类，小于则为反类，我们可以根据自己对查全率与查准率的需求，设定这个阈值，若要求查准率，则可以提高阈值，若要求查全率，则可降低阈值</p><p>ROC曲线的横纵坐标分别为假正例率（False Positive Rate）与真正例率（True Positive Rate），如下：</p><script type="math/tex; mode=display">TPR=\frac{TP}{TP+FN}\\FPR=\frac{FP}{TN+FP}</script><p><strong>代价敏感错误率与代价曲线</strong></p><p>在分类与回归任务中，不同的错误类型所导致的后果不同，耗费的代价也不一样，为了在模型评估中引入对不同错误类型代价的度量，可为错误赋予“非均等代价”</p><p>对于分类任务，可以将把第i类样本分类为第j类样本的代价记作 $cost_{ij}$ ，如此可得一个代价矩阵：</p><div class="table-container"><table><thead><tr><th>真实类别</th><th>预测类别</th><th></th></tr></thead><tbody><tr><td></td><td>第0类</td><td>第1类</td></tr><tr><td>第0类</td><td>0</td><td>$cost_{01}$</td></tr><tr><td>第1类</td><td>$cost_{10}$</td><td>0</td></tr></tbody></table></div><p>然后可以根据这个表算代价敏感错误率，对于m个样例，D为样例集合，D^+^为正例子集，D^-^为反例子集，</p><script type="math/tex; mode=display">E(f;D;cost)=\frac1m \left(\sum_{x_i\in D^+} \mathbb{I}(f(x_i)\neq y_i)\times cost_{01} + \sum_{x_i\in D^-}\mathbb{I}(f(x_i)\neq y_i)\times cost_{10}\right)</script><p><strong>比较检验</strong></p><h2 id="最大似然估计"><a href="#最大似然估计" class="headerlink" title="最大似然估计"></a>最大似然估计</h2><p>先补充一点概率论的基础知识</p><p>书柜里找了本概率论的书看，看了一遍大数定律和中心极限定律</p><p>大数定律大概就是对<strong>独立同分布随机变量序列Xn</strong>，均值会收敛到数学期望</p><p>中心极限定律就是对<strong>独立同分布随机变量序列Xn</strong>，对序列的和做一些运算，得到的式子会近似的服从正态分布，以下为列维-宁德伯格中心极限定律：</p><script type="math/tex; mode=display">\lim_{n\rightarrow\infty}\left( P\left( \frac{1}{\sqrt{n}\sigma}\left(\sum^n_{k=1}X_k-n\mu\right)\right)\leq x\right)=\frac{1}{\sqrt{2\pi}}\int_{-\infty}^x e^{-\frac{t^2}{2}}\,dt</script><p>其中，<script type="math/tex">\mu, \sigma</script>分别为期望和标准差</p><p><strong>最大似然原理：</strong></p><p>就是对一件已经发生的事情，或者说一个已知的独立随机变量采样序列，求出最有可能得到这个序列的概率模型的参数</p><p><strong>似然函数：</strong></p><p>设 <script type="math/tex">x_1,x_2,\cdots,x_n</script>是样本观察值，令</p><script type="math/tex; mode=display">L(\theta)=L(\theta,x_1,\cdots,x_n)=\begin{cases}\prod^n_{i=1}\,p(x_i;\theta),离散型\\\prod^n_{i=1}\,f(x_i;\theta),连续型\end{cases}</script><p>这个公式的直观意义就是对独立同分布随机变量序列 <script type="math/tex">X_1,\cdots,X_n</script>，取值为 <script type="math/tex">x_1,\cdots,x_n</script>的概率</p><p>这个公式的变量是<script type="math/tex">\theta</script>，要得到使随机变量序列取上述值的概率最大的概率模型的参数，就是求上面似然函数的最大值点<script type="math/tex">\hat{\theta}</script>，因为似然函数是连乘的形式，且<script type="math/tex">L(\theta),\ln\,L(\theta)</script>的最值点是相同的，所以可以取对数，得到蛮族最大似然估计<script type="math/tex">\hat{\theta}</script>的方程，也叫似然方程(<script type="math/tex">\theta</script>可以是多个参数组成的向量)：</p><script type="math/tex; mode=display">\frac{\partial\,\ln L(\theta)}{\partial\,\theta_i}=0</script>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>研0笔记</title>
      <link href="/2023/06/02/%E7%A0%940%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/06/02/%E7%A0%940%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="研0笔记"><a href="#研0笔记" class="headerlink" title="研0笔记"></a>研0笔记</h1><p>带宽：信号具有的频带宽度.信号的带宽是指该信号所包含的各种不同频率成分所占据的 频率范围.，也就是信号的最高频率分量与最低频率分量之差，单位：HZ.</p><p><a href="https://zhuanlan.zhihu.com/p/68831015">各类噪声</a></p><p><a href="https://zhuanlan.zhihu.com/p/26732433">什么是倍频程</a></p><h2 id="树莓派ffmpeg推流"><a href="#树莓派ffmpeg推流" class="headerlink" title="树莓派ffmpeg推流"></a>树莓派ffmpeg推流</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -f alsa -i hw:1,0 -c:a aac -b:a 128k rtsp -rtsp_transport tcp rtsp://192.168.15.150/live/test</span><br></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -f alsa -thread_queue_size 1024 -ac 2-ar 44100 -i hw:1,0 -acodec aac -f flv rtmp://192.168.31.229/audio</span><br></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CANDIDATE=<span class="string">"192.168.15.150"</span></span><br><span class="line">docker run --<span class="built_in">rm</span> -it -p 1935:1935 -p 1985:1985 -p 8080:8080 \</span><br><span class="line">    --<span class="built_in">env</span> CANDIDATE=<span class="variable">$CANDIDATE</span> -p 8000:8000/udp \</span><br><span class="line">    registry.cn-hangzhou.aliyuncs.com/ossrs/srs:4 ./objs/srs -c conf/rtmp2rtc.conf</span><br></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -ar 8000 -ac 2 -f alsa -i hw:1,0 -b:a 128k -f rtsp rtsp://192.168.15.150/live/test</span><br></pre></td></tr></tbody></table></figure><ul><li>-ar 8000：设置音频采样率为 8000 Hz。</li><li>-ac 1：设置音频通道数为 1。</li><li>-f alsa：指定音频输入设备为 ALSA。</li><li>-i hw:1,0：指定 ALSA 音频输入设备的名称，其中 hw:1,0 表示第二个硬件设备的第一个子设备。</li><li>-acodec mp2：指定音频编码格式为 MP2。</li><li>-b:a 128k：设置音频比特率为 128 kbps。</li><li>-f rtp：指定输出格式为 RTP。</li><li>rtp://xxx.xxx.x.xx:4444：指定输出地址和端口号，其中 xxx.xxx.x.xx 是目标 IP 地址，4444 是目标端口号。</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -ar 8000  -ac 6 -f alsa -i hw:1,0 -ac 1 -acodec mp2 -b:a 128k -f rtsp rtsp://192.168.31.48/live/test</span><br></pre></td></tr></tbody></table></figure><p>上面这个是能用的，修改一下参数</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -ar 16000  -ac 6 -f alsa -i hw:3,0 -f rtsp rtsp://localhost/live/test</span><br></pre></td></tr></tbody></table></figure><p>一个问题:<font color="red">在有背景噪音的情况下，前景声过小，背景声会越来越大</font></p><p>用的rtsp服务器是<code>ZLMediaKit</code>，同时也支持其他协议</p><h2 id="将SED布置在树莓派上运行"><a href="#将SED布置在树莓派上运行" class="headerlink" title="将SED布置在树莓派上运行"></a>将SED布置在树莓派上运行</h2><p>首先需要pytorch环境，之前装的是32位的系统，看网上说32位pytorch好多不支持，就刷成64位的</p><p>然后用那个etcher刷镜像老是出错，就用树莓派官方的烧录程序，然后可以自己选系统版本，一开始用的64位无桌面服务器版本，发现局域网搜索不到，没desktop也接不了显示器，就换成了有桌面版的</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20230713130845646.png" alt="image-20230713130845646"></p><p>接显示器可以有UI配这配那的</p><p>然后是在python里用ffmpeg读取本地的音频流，那个input方法就是命令行ffmpeg参数的换了个形式</p><p>如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开本地接入的USB麦克风的实时音频流数据</span></span><br><span class="line">stream = ffmpeg.<span class="built_in">input</span>(<span class="string">'hw:3,0'</span>,f=<span class="string">"alsa"</span>,ac=<span class="number">6</span>,ar=<span class="number">16000</span>)</span><br></pre></td></tr></tbody></table></figure><p>然后运行那个release的代码，要装下面这些东西，因为flask和mql讲道理应该是不要的，这里先记录一下我全install了哪些package</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pip install bcrypt</span><br><span class="line">pip install pymysql</span><br><span class="line">pip install flask_sqlalchemy</span><br><span class="line">pip install flask_marshmallow</span><br><span class="line">pip install omegaconf</span><br><span class="line">pip install pyaudio</span><br></pre></td></tr></tbody></table></figure><p>在安装pyaudio的时候报错：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR: Could not build wheels <span class="keyword">for</span> pyaudio <span class="built_in">which</span> use PEP 517 and cannot be installed directly</span><br></pre></td></tr></tbody></table></figure><p>说是pip版本过低，要升级，另外这个系统自带的python版本是3.9</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m pip install --upgrade pip</span><br></pre></td></tr></tbody></table></figure><p>升级完成又缺少依赖</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR: Could not build wheels <span class="keyword">for</span> pyaudio, <span class="built_in">which</span> is required to install pyproject.toml-based projects</span><br></pre></td></tr></tbody></table></figure><p>在stack overflow上找到说要装这个</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install portaudio19-dev</span><br></pre></td></tr></tbody></table></figure><p>确实是，装了上面的就安装成功了</p><p>继续安装剩余的package</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install soundfile</span><br><span class="line">pip install pyloudnorm</span><br><span class="line">pip install librosa</span><br></pre></td></tr></tbody></table></figure><p>然后可以正常运行，就是好像调用了多次麦克风接口，会报如下的错误：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[alsa @ 0x5599994be0] cannot open audio device hw:3,0 (Device or resource busy)</span><br><span class="line">hw:3,0: Input/output error</span><br></pre></td></tr></tbody></table></figure><p>然后用postman测试可以得到返回数据，就是数据更新的没有我在自己电脑上快</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20230713135537361.png" alt="image-20230713135537361"></p><p>树莓派的cpu使用率如下：</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20230713135612461.png" alt="image-20230713135612461"></p><p>发现运行了一段时间之后，会有如下的错误：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Application provided invalid, non monotonically increasing dts to muxer <span class="keyword">in</span> stream 0: 13045884 &gt;= 13045884</span><br></pre></td></tr></tbody></table></figure><p>说是什么非单调递增的帧，在自己电脑上测试就没这个问题，可能是麦克风的问题，但是问题不大</p><p>听wsy说改那个json文件，我改了只剩一个，就解决了上面的四个请求的问题（翻了下我好像没写，就是程序调用了四次ffmpeg 去读取设备）修改之后，CPU使用率变低了好多</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20230713145234467.png" alt="image-20230713145234467"></p><p>torch忘记写了，看网上说自己编译很麻烦，然后用的方法是自己下编译好的wheel然后直接pip install</p><p>在这里下的：<a href="https://torch.kmtea.eu/whl/stable.html">https://torch.kmtea.eu/whl/stable.html</a></p><h2 id="接入快鱼拾音器"><a href="#接入快鱼拾音器" class="headerlink" title="接入快鱼拾音器"></a>接入快鱼拾音器</h2><p>树莓派没有3.5mm输入</p><p>在电脑里测试拾音器能连通，现在想在自己电脑上用ffmpeg推流到树莓派上的rtsp服务器，在树莓派上装的服务器还是之前那个：<a href="https://github.com/ZLMediaKit/ZLMediaKit/wiki/%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B">https://github.com/ZLMediaKit/ZLMediaKit/wiki/%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B</a></p><p>然后本地windows用ffmpeg推流</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -f dshow -i audio=<span class="string">"麦克风 (Realtek(R) Audio)"</span> -ac 2 -ab 96k -f rtsp rtsp://192.168.31.229/live/test</span><br></pre></td></tr></tbody></table></figure><p>后来拾音器又连不通了，全是电流音</p><p>发现是我自己电脑华硕的硬件驱动搞的，麻烦死了，关掉之后就不会了</p><p>在树莓派上开启rtsp服务器，把代码改成从服务器获取流，就可以了</p><h3 id="购物清单"><a href="#购物清单" class="headerlink" title="购物清单"></a>购物清单</h3><ul><li>讯为RK3568开发板（连接器版本，含4G模块，10‘1寸屏，商业级8G+32G）暂定还没挑好，不知道要啥版本的，冗余接口太多了</li><li>USB免驱声卡</li><li>4g上网模块</li><li>3.5双头音频线</li><li>多路电源模块</li><li>云服务器</li><li>一些导线</li></ul><h3 id="突发奇想用cqhttp做通信"><a href="#突发奇想用cqhttp做通信" class="headerlink" title="突发奇想用cqhttp做通信"></a>突发奇想用cqhttp做通信</h3><p>签名服务器docker：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --restart=always --name qsign -p 8080:8080 -e ANDROID_ID=27eca7244b4e1b7f xzhouqd/qsign:8.9.63</span><br></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --restart=always --name qsign -p 8080:8080 -e ANDROID_ID=79b050895d588960 xzhouqd/qsign:8.9.63</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="鲁班猫开发板"><a href="#鲁班猫开发板" class="headerlink" title="鲁班猫开发板"></a>鲁班猫开发板</h3><p>先按照商家给的教程装了ubuntu 20.04，然后装了运行SED代码需要的python库</p><p>然后接灰色的拾音器做测试，先检测麦克风的连通性，使用ffmpeg推流到树莓派的rtsp服务器</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -ar 16000  -ac 1 -f alsa -i hw:0,0 -f rtsp rtsp://192.168.31.229/live/test</span><br></pre></td></tr></tbody></table></figure><p>没有声音捏</p><h3 id="后续结果处理"><a href="#后续结果处理" class="headerlink" title="后续结果处理"></a>后续结果处理</h3><p>每周返回统计数据，打算另起一个程序，通过轮询调用来监控</p><p>需要数据库？但是读写太频繁了，得研究一下大概多少秒查一次好</p><p>指标：</p><p>每小时，每天，每月？</p><p>频次，每次记录持续时间，返回一个热力图</p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 研0 </tag>
            
            <tag> 语音信号处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>旅游攻略</title>
      <link href="/2023/05/18/%E6%97%85%E6%B8%B8%E6%94%BB%E7%95%A5/"/>
      <url>/2023/05/18/%E6%97%85%E6%B8%B8%E6%94%BB%E7%95%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="旅游攻略"><a href="#旅游攻略" class="headerlink" title="旅游攻略"></a>旅游攻略</h1><p>出行</p><p>至温州南站，再转9号公交🚌到洞头</p><p>岛上都有公交</p><p><strong>6/11</strong></p><p>南航CZ6707 10:40-12:20</p><p>到了吃饭等lxy</p><p>轨道交通S1线到瓯江口，转乘洞头9路公交车</p><p>日落 月半弯沙滩</p><p>日出 金沙滩</p><p>温州看海｜温州洞头仙叠岩</p><p>天气好的时候一定要去洞头看海，大海的浪漫能治愈一切！！<br>tips‼️：一定要穿舒服的鞋 注意防晒 全程走完大概要2.5-3小时左右</p><p>🎫：47r/人     🅿️：15r</p><p>路线：西入口➡️玻璃栈道➡️临海栈道➡️南炮台山➡️戚继光雕像</p><p>📍海上月堤<br>🖇灯塔，月亮，拍照打卡<br>💰免费，路边有车位</p><p>📍东岙（ao）沙滩<br>🖇挖沙，趟趟水，有民宿，吃饭的地方。<br>💰门票免费，停车费10元</p><p>📍洞头鸽尾礁婚纱摄影基地<br>🖇可以看到真的蓝色的大海，还有各种场景摆设可以拍照凹造型。<br>💰免费，路边有车位</p><p>📍洞头小洱海<br>🖇太有名了不想介绍了，打卡必来<br>💰免费，收停车费</p><p>📍大门岛<br>🖇海总体比洞头干净很多，有熟路的人带你看风景还不错<br>💰免费，有车位</p>]]></content>
      
      
      <categories>
          
          <category> 玩 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 旅游攻略 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu服务器上安装python3.11</title>
      <link href="/2023/04/19/ubuntu%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E5%AE%89%E8%A3%85python3-11/"/>
      <url>/2023/04/19/ubuntu%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E5%AE%89%E8%A3%85python3-11/</url>
      
        <content type="html"><![CDATA[<h1 id="ubuntu服务器上安装python3-11"><a href="#ubuntu服务器上安装python3-11" class="headerlink" title="ubuntu服务器上安装python3.11"></a>ubuntu服务器上安装python3.11</h1><p>见链接：</p><p><a href="https://aruljohn.com/blog/install-python/">How to install Python 3.11.1 from source (aruljohn.com)</a></p><p>国内基本搜不到，傻逼网络墙</p>]]></content>
      
      
      <categories>
          
          <category> 技术问题记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毕设日志</title>
      <link href="/2023/04/07/%E6%AF%95%E8%AE%BE%E6%97%A5%E5%BF%97/"/>
      <url>/2023/04/07/%E6%AF%95%E8%AE%BE%E6%97%A5%E5%BF%97/</url>
      
        <content type="html"><![CDATA[<h1 id="毕设日志"><a href="#毕设日志" class="headerlink" title="毕设日志"></a>毕设日志</h1><h2 id="需要修改，优化的部分和代办"><a href="#需要修改，优化的部分和代办" class="headerlink" title="需要修改，优化的部分和代办"></a>需要修改，优化的部分和代办</h2><ul><li>[ ] 把端口扫描中的ping用 <code>net</code> 包重写</li><li>[x] 做好MQ</li><li>[ ] 提供更多的地址输入方式和地址端口组合</li></ul><h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><p><strong>2023/4/7 星期五</strong></p><p>今天差不多写完了portscan服务，可以扫描主机和tcp端口，udp端口和socks5不知道要不要弄，感觉如果是做网页的指纹识别的话，注重tcp就行了，毕竟就http和https，做了三个api接口，分别是ip，ipseg，ipport，然后还新建了一下assign的rpc服务，明天开始写这个rpc</p><p><strong>2023/4/9 星期日</strong></p><p>今天做好了assign 和 portscan 服务之间的rpc交互，在rpc测试过程中，对<code>IP:port</code>模式，rpc调用可以正常返回，但是对<code>IP,IPseg</code>模式不行，一开始以为是单机系统，传的太快处理不过来，因为还没做消息队列，但是加了延时，延时了一秒还是return false，目前不知道是哪里出错了 </p><p><strong>2023/4/10 星期一</strong></p><p><a href="https://blog.csdn.net/xzchaoo/article/details/109024987">https://blog.csdn.net/xzchaoo/article/details/109024987</a></p><p>昨天那个问题可能是因为这个引起的</p><p>今天解决上面那个问题的方法是，，，，不使用协程，让响应在超时前返回，然后在写IPsegScan的时候，一直出错一直出错，结果错误是因为postman里参数，ipseg前面多了个空格，我真的服了，太傻逼了，但是ipseg加端口扫描还是需要很多时间，不能在连接过期前结束，我已经在主机扫描和端口扫描两个地方都用了goroutine，还是在时间外</p><p>明天看看群里说的 <code>background()</code>和创建new service是怎么回事</p><p><strong>2023/4/11 星期二</strong></p><p>已解决昨天的问题，通过使用 <code>context.TODO()</code>新建一个context，传入处理函数来解决，不使用处理客户端的http响应的context进行rpc交互，具体细节已记录到go-zero学习笔记。今天把所有的API和RPC都调试通了，接下来就是写assign和fingerprint的具体业务代码，fingerprint本来想用rpc的，但是觉得对于多个相同的服务，要做管理，还是用api交互更方便，这样在assign里面就不用注册rpc了，直接用一个结构体存开启的服务器就行</p><p><strong>2023/4/12 星期三</strong></p><p>今天写完了任务分发的代码，没什么内容，很快就弄好了，然后测试了一下所有 api和rpc的连通性，都能正常使用，就差最后的指纹识别了，晚上看一下dismap具体实现的代码</p><p>晚上重构了一下dismap的包路径，移植到workstation里面了，但是还没做函数接口，也没测试，然后就是那个毕设要求，看都看不懂，</p><p><strong>2023/4/13 星期四</strong></p><p>今天调通了dismap魔改部分的代码，能走一遍规则库，但是得继续研究他的处理机制，然后对操作系统探测不是很理想今天和老师商量了一下，他说不全没关系，有结果就行，能走通流程更重要，然后还需要做的是规则库处理成json，结果写回数据库，客户端导出csv文件，然后做kuboard和k8s扩缩容</p><p><strong>2023/4/14 星期五</strong></p><p>今天心情不好，啥也不想干</p><p><strong>2023/4/20 星期四</strong></p><p>把任务分发做成MQ广播形式了，用的是rabbitMQ，因为我用的是Ubuntu21.04，然后大部分安装教程都是用的22，20，18，花了点功夫才弄好但是之前做的API也不好再改了，而且为了探测主机存活，那个API又得留下，现在结构有点复杂，现在还需要优化客户端的代码，把每个任务加上一个session token，然后建立一个新的MQ queue，让每个workstation将任务完成的信息发送到该队列，然后让client监听该队列，收到所有信息后再查询数据库，回显消息</p><p><strong>2023/4/24 星期一</strong></p><p>前几天在写论文，今天想做消息回显，老师之前是说在MQ新建一个Queue，让完成的工作进程向该Queue发送一个已完成的信息，然后用户端监听该Queue，当所有工作进程返回之后再查询数据库，输出识别内容。这里设计到以下问题：</p><p>对于多个客户端，如何区分（用自动生成的Queue肯定不行，因为workstation这边不知道queue的名字）</p><p>对于一个请求，要怎么让客户端知道这是他提交的（考虑使用类似session token的结构）</p><p>对于IP和IP segment扫描模式，递交给工作进程的不只是一个任务请求，要怎样将这些请求合并再告诉客户端</p><p>重新理一下思路</p><p>对于IP port模式，port scan不需要开启协程，扫描结果直接返回（指端口开放性啥的）端口关闭就返回false，否则就提交到assign</p><p><strong>2023/4/25 星期二</strong></p><p>今天做了用户端回传的MQ，昨天重构了整个代码，给所有API都加上了token字段，现在可以实现收到任务数和所有任务完成消息。但是工作进程那边数据库好像有问题，没做退出，测试多了就会提示too many connections。</p><p>做完了user的进度条显示，但是发现工作进程那边存结果有问题，数据库里的结果和工作进程显示的不一样</p><p>发现数据库少了个banner，得加上</p><p>加上了banner，现在还差最后查询数据库的结果去重，就是展示弄好看点，明天再搞了</p><p><strong>2023/4/26 星期三</strong></p><p>今天发现数据库查询的时候，如果对IP segment模式的探测，存入数据库之后是分散的存活主机和对应端口，对客户端查询很不方便，不如把session_token作为索引存入数据库，所以上午再修改一下</p><p>给数据表加了一个token字段，然后重新设计了一下用户端的输出，用了打印表格的第三方库，在测试的过程中发现，workstation经常跳too many connection的错误，原因可能是并发的时候建立了太多数据库连接，重新设计了一下连接方式，把连接放在插入数据之外，写了一个新的函数用来建立数据库连接，插入数据的函数加了一个数据库连接的参数。然后出问题了，DB莫名其妙会自己关掉。</p><p>出问题的不是DB，而是互斥锁lock初始化定义的有问题，之前声明的是Locker类型，应该是sync.Mutex</p><p><strong>2023/4/27 星期四</strong></p><p>对客户端的一个MQ的问题，就是要接收任务完成消息，需要知道一共几台工作主机，然后用任务总数乘工作主机数得到需要收到的sign的消息总数，感觉得在assign上做一个api，返回工作主机数，然后客户端每次请求前查询一下。</p><p><strong>2023/5/1 星期一</strong></p><p>这几天在写论文，弄了计时，做了测试，发现对IP segment扫描，数据库还是会报too many connections的错误。</p><p><strong>2023/5/14 星期日</strong></p><p>今天加上了协议识别，dismap做了，但是我没把结果回传</p><p><strong>2023/5/23 星期二</strong></p><p>今天在整合指纹库，给指纹库加了一个path字段，当这个字段非空时，表明用的是tide里那个cms的指纹，请求path字段的网页资源，计算md5，然后与指纹库进行匹配</p>]]></content>
      
      
      <categories>
          
          <category> 本科毕设 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 毕业设计 </tag>
            
            <tag> 日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>腾讯云服务器clash配置</title>
      <link href="/2023/04/03/%E8%85%BE%E8%AE%AF%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8clash%E9%85%8D%E7%BD%AE/"/>
      <url>/2023/04/03/%E8%85%BE%E8%AE%AF%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8clash%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="腾讯云服务器clash配置"><a href="#腾讯云服务器clash配置" class="headerlink" title="腾讯云服务器clash配置"></a>腾讯云服务器clash配置</h1><p>今天想弄qq机器人，就买了三个月的最垃圾的腾讯云服务器</p><p>首先在本地配好环境，就是vscode+ssh</p><h2 id="SSH配置"><a href="#SSH配置" class="headerlink" title="SSH配置"></a>SSH配置</h2><p>在腾讯云服务器管理界面左边，有个密钥：</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20230403204511297.png" alt="image-20230403204511297"></p><p>点进去后，在左上角点创建密钥：</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20230403204819880.png" alt="image-20230403204553401"></p><p>选择使用已有公钥，将本地文件 <code>C:\Users\Lenovo\.ssh\id_rsa.pub</code> 里的内容复制进去</p><p>然后再服务器菜单，点下面的卡片，进入服务器管理界面，选择上面的SSH密钥</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20230403204900333.png" alt="image-20230403204819880"></p><p>点左上角绑定密钥（需要先关机）</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20230403204553401.png" alt="image-20230403204900333"></p><p>绑定刚才创建的公钥</p><p>重启服务器就可以免密SSH登录了</p><h2 id="clash配置"><a href="#clash配置" class="headerlink" title="clash配置"></a>clash配置</h2><p>首先下载</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/Dreamacro/clash/releases</span><br></pre></td></tr></tbody></table></figure><p>下的这个喵</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20230403205247635.png" alt="image-20230403205247635"></p><p>因为服务器网很慢，所以我是先下到本地，再上传到服务器中的<code>clash</code>文件夹</p><p>因为我已经运行过了，所以clash文件夹中的内容如下</p><p>要在不能上github的服务器上运行clash，需要准备以下文件</p><p><code>config.yaml</code>：我在本地ubuntu虚拟机上复制出来的，也可以去机场下</p><p><code>Country.mmdb</code>：类似DNS的东西，也是本地复制的</p><p>剩下两个文件一个是生成的，那个dashboard不知道为啥没用</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@VM-12-16-ubuntu:~/clash$ <span class="built_in">ls</span></span><br><span class="line">cache.db  clash  config.yaml  Country.mmdb  dashboard</span><br></pre></td></tr></tbody></table></figure><p>然后，执行</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./clash -d .</span><br></pre></td></tr></tbody></table></figure><p>就可以正常上网了</p><p>为了方便，将clash注册为服务：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> clash /usr/local/bin</span><br><span class="line">vim /etc/systemd/system/clash.service</span><br></pre></td></tr></tbody></table></figure><p>文件如下：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=clash service</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">User=root</span><br><span class="line">ExecStart=/usr/local/bin/clash /home/ubuntu/clash<span class="comment"># set config dir</span></span><br><span class="line">Restart=on-failure <span class="comment"># or always, on-abort, etc</span></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></tbody></table></figure><p>然后设置自启动</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl <span class="built_in">enable</span> clash</span><br></pre></td></tr></tbody></table></figure><p>之后就可以用 <code>sudo service clash start/stop/restart</code>来管理</p><p>管理节点可以用这个：<br><a href="http://clash.razord.top/#/proxies">http://clash.razord.top/#/proxies</a></p><p>输入ip和密码，密码在配置文件里</p><p>另外记得在服务器设置里添加代理</p>]]></content>
      
      
      <categories>
          
          <category> 技术问题记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> clash </tag>
            
            <tag> 云服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>golang踩坑日记</title>
      <link href="/2023/03/27/golang%E8%B8%A9%E5%9D%91%E6%97%A5%E8%AE%B0/"/>
      <url>/2023/03/27/golang%E8%B8%A9%E5%9D%91%E6%97%A5%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="golang踩坑日记"><a href="#golang踩坑日记" class="headerlink" title="golang踩坑日记"></a>golang踩坑日记</h1><h2 id="项目组织问题"><a href="#项目组织问题" class="headerlink" title="项目组织问题"></a>项目组织问题</h2><p>写user项目的时候</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yyp@yyp-virtual-machine:~/webscanner/service/user$ go mod init user</span><br></pre></td></tr></tbody></table></figure><p>在整个目录下建立module</p><p>里面的结构如下：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">yyp@yyp-virtual-machine:~/webscanner/service/user$ tree</span><br><span class="line">.</span><br><span class="line">├── config</span><br><span class="line">│&nbsp;&nbsp; └── config.go</span><br><span class="line">├── go.mod</span><br><span class="line">├── go.sum</span><br><span class="line">└── user.go</span><br></pre></td></tr></tbody></table></figure><p>在<code>user.go</code>中定义的main方法，然后用了<code>config.go</code>里面的全局变量和方法</p><p><code>user.go</code>的import要这样写：</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"user/config"</span></span><br></pre></td></tr></tbody></table></figure><p>上面 <code>go mod init user</code>指定项目目录</p><p>然后import了config包，golang和c不同，包含其他包之后不是直接用原来包的变量名字，需要在前面加上包的名字，比如默认数据库配置 <code>DefaultDB</code>的map全局变量，在config里定义如下：</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> DefaultDB = <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>{</span><br><span class="line"><span class="string">"user"</span>:     <span class="string">"yyp"</span>,</span><br><span class="line"><span class="string">"passwd"</span>:   <span class="string">"123456"</span>,</span><br><span class="line"><span class="string">"address"</span>:  <span class="string">"127.0.0.1"</span>,</span><br><span class="line"><span class="string">"port"</span>:     <span class="string">"3306"</span>,</span><br><span class="line"><span class="string">"database"</span>: <span class="string">"finger"</span>,</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在main中引用要这样：<code>config.DefaultDB["user"]</code></p><h2 id="类型转换问题"><a href="#类型转换问题" class="headerlink" title="类型转换问题"></a>类型转换问题</h2><p>golang和python一样，可以通过<code>.(String)</code> 进行类型转换，但是今天在写一个函数的时候：</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">which</span><span class="params">(Args <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>{})</span></span></span><br></pre></td></tr></tbody></table></figure><p>参数是一个map，然后在函数最前面取了两个参数：</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">url = Args[<span class="string">"FlagUrl"</span>].(<span class="type">string</span>)</span><br><span class="line">address = Args[<span class="string">"FlagNetWork"</span>].(<span class="type">string</span>)</span><br></pre></td></tr></tbody></table></figure><p>调试的时候报错了，原因是map变量<code>Args</code>的键值对 <code>FlagNetWork</code>的值为空，无法调用<code>String</code>方法</p><p>所以需要进行判空操作，再赋值，修改如下：</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">uri     <span class="type">string</span></span><br><span class="line">address <span class="type">string</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> Args[<span class="string">"FlagUrl"</span>] != <span class="literal">nil</span> {</span><br><span class="line">uri = Args[<span class="string">"FlagUrl"</span>].(<span class="type">string</span>) <span class="comment">//输入参数的url用uri表示，和查询的url作区分</span></span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">uri = <span class="string">""</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> Args[<span class="string">"FlagNetWork"</span>] != <span class="literal">nil</span> {</span><br><span class="line">address = Args[<span class="string">"FlagNetWork"</span>].(<span class="type">string</span>)</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">address = <span class="string">""</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="网络编程问题"><a href="#网络编程问题" class="headerlink" title="网络编程问题"></a>网络编程问题</h2><p>建立连接，使用函数 <code>net.DialTimeout()</code> 时，返回两个值，<code>Conn,err</code> 其中 <code>Conn</code> 如果是nil，不能直接进行其他操作，比如<code>Close()</code> 不然会报错喵</p><h2 id="结构体定义问题"><a href="#结构体定义问题" class="headerlink" title="结构体定义问题"></a>结构体定义问题</h2><p>golang要求所有结构体成员变量的首字母需要大写,如果首字母小写的话，则该字段无法被外部包访问和解析</p><p>今天在用<code>encoding/json</code>包解析json的时候，用的小写的结构体成员，然后返回的是空的json集合，原因就是json是外部包，不大写的话不行喵</p>]]></content>
      
      
      <categories>
          
          <category> 技术问题记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go-zero学习笔记</title>
      <link href="/2023/03/26/go-zero%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/03/26/go-zero%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="go-zero学习笔记"><a href="#go-zero学习笔记" class="headerlink" title="go-zero学习笔记"></a>go-zero学习笔记</h1><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><p>刚才那个问题还是没解决，我是想用query传参数</p><p><a href="http://127.0.0.1:8080/assign/ipsegscan?ip=ipstr">http://127.0.0.1:8080/assign/ipsegscan?ip=ipstr</a></p><p>然后我的request定义如下：</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> IPrequest <span class="keyword">struct</span> {</span><br><span class="line">    Ipstr <span class="type">string</span> <span class="string">`form:"ip"`</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>service中，route的定义如下</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@handler IPscan</span><br><span class="line">    get /assign/ipscan?ip=:IPstr(IPrequest) returns (IPresponse)</span><br></pre></td></tr></tbody></table></figure><p>报错了</p><p>请问route到底要咋写</p><p>解决了喵 <span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐱</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f431.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">syntax = <span class="string">"v1"</span></span><br><span class="line"></span><br><span class="line">info(</span><br><span class="line">author: <span class="string">"yyp"</span></span><br><span class="line">date:   <span class="string">"2023-04-04"</span></span><br><span class="line">desc:   <span class="string">"port scan service api"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> IPrequest {</span><br><span class="line">Ipstr <span class="type">string</span> <span class="string">`form:"ip"`</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> IPresponse {</span><br><span class="line">Ackinfo <span class="type">string</span> <span class="string">`json:"info"`</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> IPsegReq {</span><br><span class="line">Ipseg <span class="type">string</span> <span class="string">`form:"ipseg"`</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> IPsegResp {</span><br><span class="line">Ackinfo <span class="type">string</span> <span class="string">`json:"info"`</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> IPportReq {</span><br><span class="line">Ipstr <span class="type">string</span> <span class="string">`form:"ip"`</span></span><br><span class="line">Port  <span class="type">string</span> <span class="string">`form:"port"`</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> IPportResp {</span><br><span class="line">Ackinfo <span class="type">string</span> <span class="string">`json:"info"`</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">service portscan{</span><br><span class="line">@handler IPscan</span><br><span class="line">get /assign/ipscan(IPrequest) returns (IPresponse)</span><br><span class="line"></span><br><span class="line">@handler IPsegScan</span><br><span class="line">get /assign/ipsegscan(IPsegReq) returns (IPsegResp)</span><br><span class="line"></span><br><span class="line">@handler IPportScan</span><br><span class="line">get /assign/ipportscan(IPportReq) returns (IPportResp)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>生成代码</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">goctl api go -api portscan.api -<span class="built_in">dir</span> .</span><br></pre></td></tr></tbody></table></figure><p>运行，测试：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go run portscan.go -f etc/portscan.yaml</span><br></pre></td></tr></tbody></table></figure><p>新开个终端</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http:/127.0.0.1:8888/portscan/ipscan?ip=127.0.0.1</span><br></pre></td></tr></tbody></table></figure><p>但是传两个参数的时候就出错了，只识别了第一个参数</p><p>请求体结构如下</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20230405113446752.png" alt="image-20230405113446752"></p><p>route如下</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20230405113604930.png" alt="image-20230405113522303"></p><p>调试的时候提示少了port字段</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20230405113522303.png" alt="image-20230405113604930"></p><p>答案是curl把&amp;解析成逻辑运算符了（真是啥b<span class="github-emoji" style="display:inline;vertical-align:middle"><span>😅</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f605.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> ）</p><h2 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h2><p>在端口扫描服务的ipscan api服务的logic函数中：</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">str := req.Ipstr</span><br><span class="line"><span class="keyword">go</span> ScanIP(str, l)</span><br><span class="line"><span class="keyword">if</span> str != <span class="string">""</span> {</span><br><span class="line"><span class="keyword">return</span> &amp;types.IPresponse{</span><br><span class="line">Ackinfo: str,</span><br><span class="line">}, <span class="literal">nil</span></span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line"><span class="keyword">return</span> &amp;types.IPresponse{</span><br><span class="line">Ackinfo: <span class="string">"NULL"</span>,</span><br><span class="line">}, <span class="literal">nil</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>为了尽快响应请求，开的协程去处理端口扫描，然后直接返回</p><p>在ScanIP() 函数中，变量 <code>l</code> 是请求响应示例</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> IPscanLogic <span class="keyword">struct</span> {</span><br><span class="line">logx.Logger</span><br><span class="line">ctx    context.Context</span><br><span class="line">svcCtx *svc.ServiceContext</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>我想在ScanIP函数中调用rpc，但是因为logic函数返回了，把context注销了，就会报错：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpc error: code = Canceled desc = context canceled</span><br></pre></td></tr></tbody></table></figure><p>要怎么办才能在ScanIP()函数中调用rpc呢</p><p>办法是不用协程，，，解决不了问题就解决产生问题的函数</p><p>在响应函数里不用协程，但是 <code>ScanIP(str, l)</code> 里面协程拉满，然后就出问题了喵，不知道为啥 IPsegScan扫不到存活主机了</p><p>答案是 postman 里，IPseg参数设置错了，多了个空格<span class="github-emoji" style="display:inline;vertical-align:middle"><span>😓</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f613.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>，怎么老是烦这种啥b错误</p><p>关于golang context，可以看这篇文章：<a href="https://juejin.cn/post/6844904070667321357">https://juejin.cn/post/6844904070667321357</a></p><p><strong>更新于2023/4/11</strong></p><p>找到了更优雅的解决方案，那个context可以不继承原来的，直接新建一个，上面说不知道用什么context的话就用<code>context.TODO()</code>就行了，这样就可以在处理函数上加协程，不等返回直接发响应</p>]]></content>
      
      
      <categories>
          
          <category> 本科毕设 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go-zero </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql一些操作</title>
      <link href="/2023/03/24/mysql%E4%B8%80%E4%BA%9B%E6%93%8D%E4%BD%9C/"/>
      <url>/2023/03/24/mysql%E4%B8%80%E4%BA%9B%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="mysql的一些操作"><a href="#mysql的一些操作" class="headerlink" title="mysql的一些操作"></a>mysql的一些操作</h1><p>安装</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install mysql-server</span><br></pre></td></tr></tbody></table></figure><p>进入控制台</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mysql</span><br></pre></td></tr></tbody></table></figure><p>导入sql文件</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> 文件路径</span><br></pre></td></tr></tbody></table></figure><h2 id="毕设对mysql的操作"><a href="#毕设对mysql的操作" class="headerlink" title="毕设对mysql的操作"></a>毕设对mysql的操作</h2><p>首先建了数据库和表</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database finger;</span><br><span class="line">use finger;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> <span class="keyword">result</span> (</span><br><span class="line">    url   <span class="type">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">    IP    <span class="type">int</span> unsigned,</span><br><span class="line">    port  <span class="type">smallint</span> unsigned,</span><br><span class="line">    CMS   <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    front <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">    webserver <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    appserver <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    OS    <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    CDN   <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    WAF   <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    <span class="keyword">primary</span> key(url)</span><br><span class="line">)engine<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">result</span> (url, IP, port, webserver, OS)</span><br><span class="line">    <span class="keyword">values</span>  ("https://test", <span class="number">96587365</span>, <span class="number">6658</span>, "Apache", "Linux");</span><br></pre></td></tr></tbody></table></figure><p>然后创建了用户，给权限</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">'yyp'</span>@<span class="string">'%'</span> identified <span class="keyword">by</span> <span class="string">'123456'</span>;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">'yyp'</span>@<span class="string">'%'</span>;</span><br></pre></td></tr></tbody></table></figure><h2 id="golang操作mysql"><a href="#golang操作mysql" class="headerlink" title="golang操作mysql"></a>golang操作mysql</h2><p>找到个参考链接：<a href="https://meilihao.github.io/go-database-sql-tutorial_zh-CN/">https://meilihao.github.io/go-database-sql-tutorial_zh-CN/</a></p><p>需要包含几个包</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"database/sql"</span></span><br><span class="line"></span><br><span class="line">_ <span class="string">"github.com/go-sql-driver/mysql"</span></span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure><p><strong>连接</strong></p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DB,err := sql.Open(<span class="string">"mysql"</span>, <span class="string">"用户名:密码@tcp(IP:端口)/数据库?charset=utf8"</span>)</span><br></pre></td></tr></tbody></table></figure><p><strong>增删改查</strong></p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rows,err:=db.Query(<span class="string">"sql语句"</span>)</span><br></pre></td></tr></tbody></table></figure><p>这里可以类似printf函数一样，使用占位符<code>?</code>做参数调整</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rows, err := db.Query(<span class="string">"SELECT * FROM user WHERE gid = ?"</span>, <span class="number">1</span>)</span><br></pre></td></tr></tbody></table></figure><p>对于返回的rows变量，其类型是sql包里定义的<code>*sql.Rows</code></p><p>使用时要通过sql包中的<code>Scan()</code>方法</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">err := rows.Scan(&amp;接收的变量<span class="number">1</span>的地址, &amp;接收的变量<span class="number">2</span>的地址, ...)</span><br></pre></td></tr></tbody></table></figure><p>这里有一个坑：</p><p>对于sql查询结果，有些字段可能是空的，比如我上面定义的表，类型是<code>String</code>的key都有可能是空的，然后这里<code>Scan()</code>的参数，如果使用的是常规的golang定义的<code>String</code>类型去接收，当该行的这个值为<code>NULL</code>时，就会报错</p><p>正确的做法是定义两个结构，一个用于接收scan的值，一个用于程序运算，然后定义一个copy函数来实现值的转换</p><p>两个结构如下</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用于sql查询scan的结构</span></span><br><span class="line"><span class="keyword">type</span> Datascan <span class="keyword">struct</span> {</span><br><span class="line">Sqlurl       sql.NullString</span><br><span class="line">Sqlip        sql.NullString</span><br><span class="line">Sqlport      sql.NullInt32</span><br><span class="line">SqlCMS       sql.NullString</span><br><span class="line">Sqlfront     sql.NullString</span><br><span class="line">Sqlwebserver sql.NullString</span><br><span class="line">Sqlappserver sql.NullString</span><br><span class="line">SqlOS        sql.NullString</span><br><span class="line">SqlCDN       sql.NullString</span><br><span class="line">SqlWAF       sql.NullString</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 程序使用的sql查询结果</span></span><br><span class="line"><span class="keyword">type</span> Record <span class="keyword">struct</span> {</span><br><span class="line">url       <span class="type">string</span></span><br><span class="line">ip        <span class="type">string</span></span><br><span class="line">port      <span class="type">uint</span></span><br><span class="line">CMS       <span class="type">string</span></span><br><span class="line">front     <span class="type">string</span></span><br><span class="line">webserver <span class="type">string</span></span><br><span class="line">appserver <span class="type">string</span></span><br><span class="line">OS        <span class="type">string</span></span><br><span class="line">CDN       <span class="type">string</span></span><br><span class="line">WAF       <span class="type">string</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>然后定义一个 <code>copyvalue()</code> 函数</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">copyvalue</span><span class="params">(sqlscan Datascan, appval *Record)</span></span> <span class="type">bool</span> {</span><br><span class="line"><span class="keyword">if</span> appval == <span class="literal">nil</span> {</span><br><span class="line">fmt.Println(<span class="string">"appval is null"</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">}</span><br><span class="line">(*appval).url = sqlscan.Sqlurl.String</span><br><span class="line">(*appval).ip = sqlscan.Sqlip.String</span><br><span class="line">(*appval).port = <span class="type">uint</span>(sqlscan.Sqlport.Int32)</span><br><span class="line">(*appval).CMS = sqlscan.SqlCMS.String</span><br><span class="line">(*appval).front = sqlscan.Sqlfront.String</span><br><span class="line">(*appval).webserver = sqlscan.Sqlwebserver.String</span><br><span class="line">(*appval).appserver = sqlscan.Sqlappserver.String</span><br><span class="line">(*appval).OS = sqlscan.SqlOS.String</span><br><span class="line">(*appval).CDN = sqlscan.SqlCDN.String</span><br><span class="line">(*appval).WAF = sqlscan.SqlWAF.String</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 查阅用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>公钥密码算法和对称密码算法</title>
      <link href="/2023/03/13/%E5%85%AC%E9%92%A5%E5%AF%86%E7%A0%81%E5%92%8C%E5%AF%B9%E7%A7%B0%E5%AF%86%E7%A0%81/"/>
      <url>/2023/03/13/%E5%85%AC%E9%92%A5%E5%AF%86%E7%A0%81%E5%92%8C%E5%AF%B9%E7%A7%B0%E5%AF%86%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h1 id="公钥密码算法和对称密码算法"><a href="#公钥密码算法和对称密码算法" class="headerlink" title="公钥密码算法和对称密码算法"></a>公钥密码算法和对称密码算法</h1><h2 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h2><p>密钥生成步骤：</p><ol><li>选取两个安全的大素数 $p,q$ (大于1024比特)</li><li>计算 $n=p\times q,\varphi(n)=(p-1)\times (q-1)$ ，其中 $\varphi(n)$ 为 $n$ 的欧拉函数（小于n的素数个数）</li><li>随机选取整数 $e$ ，满足 $1&lt;e&lt;\varphi(n),gcd(e,\varphi(n))=1$ ，即 $e$ 与 $\varphi(n)$ 互素</li><li>计算私钥 $d$ ，满足 $d*e=1\;mod\enspace\varphi(n)$ ，即 $d==e^{-1}\;mod\enspace \varphi(n)$ ，则 $e$ 和 $n$ 是公钥， $d$ 是私钥</li></ol><p>重要公式：</p><script type="math/tex; mode=display">Encrypt:\qquad Cipher=Plain^{E}\enspace mod \;N\\\\Decrypt:\qquad Plain=Cipher^{D}\enspace mod \;N</script><h2 id="ElGamal"><a href="#ElGamal" class="headerlink" title="ElGamal"></a>ElGamal</h2><p>ElGamal是基于有限域上离散对数的公钥加密体制，该体制既可以用来加密也可以用做数字签名</p><p>先复习一下前置知识</p><h3 id="群"><a href="#群" class="headerlink" title="群"></a>群</h3><p><strong>群是一个集合G，连同一个运算 “·”</strong>，它结合任何两个元素 a 和 b 而形成另一个元素，记为 a · b。符号 “·” 是对具体给出的运算，比如加法的一般的占位符。要具备成为群的资格，<strong>这个集合和运算 (G, ·) 必须满足叫做群公理的四个要求</strong>：</p><ul><li>封闭性：$a\in G,b\in G则a\cdot b \in G$ </li><li>结合性：$对任意a,b,c\in G,有(a\cdot b)\cdot c = a\cdot(b\cdot c)$ </li><li>单位元：$存在e\in G,使得任意a\in G,等式e\cdot a=a\cdot e=a$ </li><li>逆元：$对于任意a\in G,存在b\in G,使得a\cdot b=b\cdot a=e,这里e是单位元$</li></ul><p><strong>有限群</strong>就是元素有限的群</p><p><strong>循环群</strong> 是所有元素都是特定元素 a 的幂的群，这个元素 a 叫做这个群的生成元或本原元</p><p>设 $p$ 是素数，则 $Z_p=\{0,1,2\cdots,p-1\},\quad Z_p^*=\{1,2\cdots,p-1\}$  </p><p><strong>离散对数问题</strong></p><p>$给定a,b,p，求使得a\equiv b^k\;mod \;p\;的k$ </p><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p><strong>密钥生成</strong></p><ol><li>选取大素数 $p$ ，且要求 $p-1$ 有大素数因子，生成 $Z_p^*$ 的一个生成元 $g$</li><li>选取一个随机数 $d,1<d<p-1,y=g^d\enspace mod\;="" p$="" ，<font="" color="red">公钥为 $(y,g,p)$ ，私钥为 $d$&lt;/font&gt;</d<p-1,y=g^d\enspace></li></ol><p>通信过程：采用DH密钥交换格式，Alice向Bob发送信息 $Plain$</p><p><strong>加密</strong></p><ol><li>对于明文 $Plain$，首先映射到群 $Z^*_p$ ，取映射点为 $M$</li><li>秘密选取一个随机数 $r\in Z_{p-1}$ </li><li>计算 $C_1=g^r\;mod\;p\qquad C_2=M\cdot y^r\;mod\;p$</li><li>Alice将密文 $(C_1,C_2)$ 发送给Bob</li></ol><p><strong>解密</strong></p><script type="math/tex; mode=display">\begin{align*}  M&=C_2\cdot (C_1^d)^{-1}\;mod\;p\\&=M\cdot y^r \cdot (g^{r\cdot d})^{-1}\;mod\;p\\&=M\cdot g^{d\cdot r}\cdot (g^{r\cdot d})^{-1}\;mod\;p\\&=M\end{align*}</script><h2 id="ECC"><a href="#ECC" class="headerlink" title="ECC"></a>ECC</h2><p>参考 <a href="https://zhuanlan.zhihu.com/p/101907402">链接1</a> <a href="https://zhuanlan.zhihu.com/p/42629724">链接2</a> </p><h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><p><strong>阿贝尔群：</strong> 满足交换律: $a,b\in G,a+b=b+a$ 的群（注意这里运算符号用的 $+$ ，上面用的 $\cdot$，不过都是表示一个运算）</p><p><strong>环：</strong> 如果集合 $R$ 有加法和乘法两个运算，且具有性质：</p><ol><li><p>加法下是一个阿贝尔群</p></li><li><p>乘法满足结合律：$(ab)c=a(bc)$ </p></li><li><p>加法和乘法之间存在左、右分配律：</p><script type="math/tex; mode=display">a(b+c)=ab+ac\\(b+c)a=ba+ca</script></li></ol><p><strong>域：</strong> 一个有单位元素1的交换环称为一个域，其中每一个非0元素 $a$ 都有逆元 $a^{-1}$ ，即 $a\cdot a^{-1}=1$</p><p>整数域 $F_p=\{0,1,2\cdots ,p-1\}$</p><p><strong>域上的四则运算</strong></p><p>加法：$a+b=a+b\;mod\;p$</p><p>乘法：$a\cdot b=a\cdot b\;mod\;p$</p><p>减法：$对于a,b\in F_p,a-b=a+(-b),其中-b是b的负元素，它是使得b+(-b)=0的唯一的一个域元素。$ </p><p>除法：</p><p>$对于a,b\in F_p,b\neq0,\dfrac{a}{b}=a\cdot b^{-1},其中b^{-1}是b的逆元素，它是使得b\cdot b^{-1}=1的唯一一个域元素$</p><p><strong>椭圆曲线</strong></p><p>只是一种形式上的称呼，与椭圆没有任何关系</p><p>求解整数域上椭圆曲线 $E_p(a,b):y^2=x^3+ax+b\;(mod\;p)$ 的点集步骤：</p><ol><li>对每一个 $x\in F_p$ ，计算 $x^3+ax+b(mod\;p)$ </li><li>判断1中求得的值在模p下是否有平方根，计算 $y^2(mod\;p)$ </li><li>如果没有，则曲线上没有与这一 $x$ 值相对应的点</li><li>如果有，则求出两个平方根</li></ol><p><em>example：</em></p><p><img src="/2023/03/13/%E5%85%AC%E9%92%A5%E5%AF%86%E7%A0%81%E5%92%8C%E5%AF%B9%E7%A7%B0%E5%AF%86%E7%A0%81/image-20230314132726918.png" alt="image-20230314132726918"></p><p><strong>加法法则</strong></p><p>设 $P,Q\in E_p(a,b)$ ，则</p><ol><li><p>$P+O=P$ (其中，$O$ 为无穷远点，是该群的单位元)</p></li><li><p>如果 $P=(x,y),Q=(x,-y)$ ，那么 $P+Q=0$ 即 $Q$ 是 $P$ 的加法逆元，即 $-P$</p></li><li>设 $P=(x_1,y_1),Q=(x_2,y_2),p\neq Q$ ，则 $P+Q=(x_3,y_3)$ 由以下规则确定</li></ol><script type="math/tex; mode=display">x_3\equiv \lambda^2-x_1-x_2(mod\; p)\\y_3\equiv\lambda(x_1-x_3)-y_1(mod\;p)</script><p>其中</p><script type="math/tex; mode=display">\lambda=\left\{               \begin{array}{**lr**}               \dfrac{y_2-y_1}{x_2-x_1},P\neq Q\\             \dfrac{3x_1^2+a}{2y_1},P=Q             \end{array}  \right.</script><p><em>example:</em></p><p><img src="/2023/03/13/%E5%85%AC%E9%92%A5%E5%AF%86%E7%A0%81%E5%92%8C%E5%AF%B9%E7%A7%B0%E5%AF%86%E7%A0%81/image-20230314135337324.png" alt="image-20230314135337324"></p><p>并不是所有的椭圆曲线都适合加密，$y^2=x^3+ax+b$ 是一类可以用来加密的椭圆曲线，也是最为简单的一类。</p><p><strong>ECDLP:</strong> 椭圆曲线离散对数问题</p><p>椭圆曲线上的两个点 $P$ 和 $Q$ ，$k$ 为整数，已知 $Q=kP$ </p><p>点 $P$ 称为基点，$k$ 为私钥，$Q$ 为公钥</p><h3 id="EC-ElGamal"><a href="#EC-ElGamal" class="headerlink" title="EC ElGamal"></a>EC ElGamal</h3><p><strong>密钥生成</strong></p><p>选一条椭圆曲线，得 $E_p(a,b)$ ，将明文信息 $m$ 嵌入到曲线上的点 $P_m$ ，再对点 $P_m$ 做加密变换。</p><p>取 $E_p(a,b)$ 的一个生成元 $G$ ， $E_p(a,b)$ 和 $G$ 作为公开参数</p><p>用户 Alice 选择 $k_a$ 作为私钥，以 $P_A=k_aG$ 作为公钥</p><p><strong>加密过程</strong></p><p>用户 Bob 向 Alice发送消息 $P_m$ ，选择一个随机正整数 $r\in F_p$ ,产生以下点对 ，作为密文：</p><script type="math/tex; mode=display">C_m=\{rG,P_m+rP_A\}</script><p> <strong>解密过程</strong></p><script type="math/tex; mode=display">P_m=P_m+rP_A-k_arG=P_m+rk_aG-k_arG=P_m</script><h2 id="AES"><a href="#AES" class="headerlink" title="AES"></a>AES</h2><p>参考 <a href="https://www.bilibili.com/video/BV1i341187fK/?spm_id_from=333.999.0.0&amp;vd_source=481c78ab89047e36a4281a0703eb4e90">链接</a></p><p>AES属于分组加密算法，明文长度固定为 128 位，密钥长度可以是128，192，256位</p><p>其中，密钥长度每增加64位，轮循环运算就要加两轮，128是10轮，192是12轮，256循环14轮</p><h3 id="明文分组"><a href="#明文分组" class="headerlink" title="明文分组"></a>明文分组</h3><p>对于每组固定128位共16字节的数据，按照  4x4 方式排列</p><p><img src="/2023/03/13/%E5%85%AC%E9%92%A5%E5%AF%86%E7%A0%81%E5%92%8C%E5%AF%B9%E7%A7%B0%E5%AF%86%E7%A0%81/image-20230314144043331.png" alt="image-20230314144043331"></p><p>对于128位的密钥，生成的每轮子密钥，同理也是按照上面的顺序排列成 4x4 的矩阵</p><h3 id="128位密钥加密总体过程"><a href="#128位密钥加密总体过程" class="headerlink" title="128位密钥加密总体过程"></a>128位密钥加密总体过程</h3><p><img src="/2023/03/13/%E5%85%AC%E9%92%A5%E5%AF%86%E7%A0%81%E5%92%8C%E5%AF%B9%E7%A7%B0%E5%AF%86%E7%A0%81/image-20230314144314727.png" alt="image-20230314144314727"></p><p>其中，前 9 轮循环每轮都包含四个步骤，但是最后一轮最终轮只进行 1，2，4运算，不进行列混合运算</p><h3 id="初始变换"><a href="#初始变换" class="headerlink" title="初始变换"></a>初始变换</h3><p>初始明文矩阵与第0轮子密钥（就是初始密钥）矩阵按字节进行异或：</p><p><img src="/2023/03/13/%E5%85%AC%E9%92%A5%E5%AF%86%E7%A0%81%E5%92%8C%E5%AF%B9%E7%A7%B0%E5%AF%86%E7%A0%81/image-20230314145226472.png" alt="image-20230314145226472"></p><h3 id="字节代换"><a href="#字节代换" class="headerlink" title="字节代换"></a>字节代换</h3><p>按照给定的 S 盒，以字节为单位进行代换运算</p><p>S 盒的生成规则，太复杂了，复试肯定不会问，问就是基于有限域的乘法逆元计算</p><p>S盒如下，根据矩阵中每个字节16进制的两位进行索引代换</p><p><img src="/2023/03/13/%E5%85%AC%E9%92%A5%E5%AF%86%E7%A0%81%E5%92%8C%E5%AF%B9%E7%A7%B0%E5%AF%86%E7%A0%81/image-20230314150027267.png" alt="image-20230314150027267"></p><h3 id="行移位"><a href="#行移位" class="headerlink" title="行移位"></a>行移位</h3><p>按照 4x4 矩阵的不同行，按字节向左移位</p><p><img src="/2023/03/13/%E5%85%AC%E9%92%A5%E5%AF%86%E7%A0%81%E5%92%8C%E5%AF%B9%E7%A7%B0%E5%AF%86%E7%A0%81/image-20230314150542315.png" alt="image-20230314150542315"></p><h3 id="列混合"><a href="#列混合" class="headerlink" title="列混合"></a>列混合</h3><p>将输入的 4x4 矩阵 <strong>左乘</strong> 一个<strong>给定的</strong> 4x4 矩阵，如下：</p><script type="math/tex; mode=display">\begin{bmatrix}02&03&01&01\\01&02&03&01\\01&01&02&03\\03&01&01&02\end{bmatrix}\times\begin{bmatrix}p1&p5&p9&p13\\p2&p6&p10&p14\\p3&p7&p11&p15\\p4&p8&p12&p16\end{bmatrix}=\begin{bmatrix}s_{0,0}&s_{0,1}&s_{0,2}&s_{0,3}\\s_{1,0}&s_{1,1}&s_{1,2}&s_{1,3}\\s_{2,0}&s_{2,1}&s_{2,2}&s_{2,3}\\s_{3,0}&s_{3,1}&s_{3,2}&s_{3,3}\end{bmatrix}</script><p>这个矩阵相乘，和常规矩阵相乘不一样，比如：</p><script type="math/tex; mode=display">s_{0,0}=(0x02\times p1)\oplus(0x03\times p2)\oplus(0x01\times p3)\oplus(0x01\times p4)</script><p>这里的加是模2加，就是异或，乘也是模2乘</p><p>密码学课上教的是，每个字节对应的7次多项式相乘，然后模一个生成多项式还是啥，信数全忘了。。。</p><p>然后因为矩阵里只有1，2，3三个数，这个up主就直接列情况了，三种情况如下</p><ol><li>乘1，就是本身</li><li>乘2，按照最高位是否是1，分两种情况</li></ol><script type="math/tex; mode=display">0x02\times (a_7a_6a_5a_4a_3a_2a_1a_0)=\left\{\begin{array}{**lr**}(a_6a_5a_4a_3a_2a_1a_00),a_7=0\\\\(a_6a_5a_4a_3a_2a_1a_00)\oplus (00011011),a_7=1\end{array}\right.</script><ol><li>乘3，简化为乘2再加上自身</li></ol><script type="math/tex; mode=display">\begin{aligned}0x03\times(a_7a_6a_5a_4a_3a_2a_1a_0)&=[(0000\;0010)\oplus(0000\;0001)]\times(a_7a_6a_5a_4a_3a_2a_1a_0)\\&=[(0000\;0010)\times(a_7a_6a_5a_4a_3a_2a_1a_0)]\oplus(a_7a_6a_5a_4a_3a_2a_1a_0)\end{aligned}</script><h3 id="轮密钥加"><a href="#轮密钥加" class="headerlink" title="轮密钥加"></a>轮密钥加</h3><p>就是和每轮的轮密钥按列异或：<br><img src="/2023/03/13/%E5%85%AC%E9%92%A5%E5%AF%86%E7%A0%81%E5%92%8C%E5%AF%B9%E7%A7%B0%E5%AF%86%E7%A0%81/image-20230314161123611.png" alt="image-20230314161123611"></p><h3 id="密钥扩展-生成"><a href="#密钥扩展-生成" class="headerlink" title="密钥扩展/生成"></a>密钥扩展/生成</h3><p>就是每轮的子密钥是如何生成的，首先，把初始密钥划分为四列 $w_0,w_1,w_2,w_3$ </p><p>密钥扩展是按照列为单位扩展的，对第 $i$ 列 $w_i$ ，有以下两种情况：</p><ol><li>若 $i$ 不是4的倍数，那么第 $i$ 列由如下等式确定：</li></ol><script type="math/tex; mode=display">w_i=w_{i-4}\oplus w_{i-1}</script><ol><li>若 $i$ 是4的倍数，那么第 $i$ 列由如下等式确定：</li></ol><script type="math/tex; mode=display">w_i=w_{i-4}\oplus T(w_{i-1})</script><p>其中，函数 $T()$ 由3部分组成：字循环，字节代换和轮常量异或</p><p><strong>字循环：</strong> 将1个字中的4个字节循环左移1个字节。即将输⼊字[b0, b1, b2, b3]变换[b1,b2,b3,b0]。</p><p><strong>字节代换：</strong> 对字循环的结果进行 S 盒代换</p><p><strong>轮常量异或：</strong> 将前两步的结果同轮常量 $Rcon[j]$ 进行异或，其中 $j$ 表示轮数（是加密总的循环轮数，不是子密钥生成列的轮数）</p><script type="math/tex; mode=display">Rcon[j]=[2^{j-1}, 0, 0, 0]</script><p><img src="/2023/03/13/%E5%85%AC%E9%92%A5%E5%AF%86%E7%A0%81%E5%92%8C%E5%AF%B9%E7%A7%B0%E5%AF%86%E7%A0%81/image-20230314163437293.png" alt="image-20230314163437293"></p><h3 id="加密模式"><a href="#加密模式" class="headerlink" title="加密模式"></a>加密模式</h3><p><strong>ECB</strong></p><p>电子密码本模式</p><p>ECB模式是将明文分成固定长度的组块，然后对每个明文分组块使用相同的密钥进行独立加密或解密，且该加密的结果将直接作为密文分组。</p><p><strong>CBC</strong></p><p>密文分组链接模式</p><p><img src="/2023/03/13/%E5%85%AC%E9%92%A5%E5%AF%86%E7%A0%81%E5%92%8C%E5%AF%B9%E7%A7%B0%E5%AF%86%E7%A0%81/1138214-20200908202350375-1091694384.png" alt="1138214-20200908202350375-1091694384"></p><p>从加密过程可知，第 00 块明文分组没有上一块密文分组来进行异或，于是引入一个初始化向量IV(Initialization Vector)来充当第一个干扰项，保证每条消息的唯一性。</p><p>太多了 ，见 <a href="https://www.cnblogs.com/11sgXL/p/13607083.html">链接</a></p>]]></content>
      
      
      <categories>
          
          <category> 考研笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 公钥密码 </tag>
            
            <tag> 对称密码 </tag>
            
            <tag> RSA </tag>
            
            <tag> ElGamal </tag>
            
            <tag> ECC </tag>
            
            <tag> AES </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信息系统安全笔记</title>
      <link href="/2023/03/02/%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/03/02/%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="信息系统安全笔记"><a href="#信息系统安全笔记" class="headerlink" title="信息系统安全笔记"></a>信息系统安全笔记</h1><h2 id="第一章-信息安全概述"><a href="#第一章-信息安全概述" class="headerlink" title="第一章 信息安全概述"></a>第一章 信息安全概述</h2><h3 id="1-信息安全基本概念及方法"><a href="#1-信息安全基本概念及方法" class="headerlink" title="1. 信息安全基本概念及方法"></a>1. 信息安全基本概念及方法</h3><p>信息安全：为数据处理系统建立和采用的技术和管理的安全保护，保护计算机硬件、软件和数据不因偶然和恶意的原因遭到破坏、更改和泄露。</p><p>信息安全的特征：</p><ul><li><p>机密性：确保信息不被非授权者获得与使用。</p></li><li><p>完整性：信息是真实可信的，其发布者不被冒充，来源不被伪造，内容不被篡改。</p></li><li><p>可用性：保证信息可被授权人在需要时立即获得并正常使用</p></li></ul><p><strong>信息安全主要防御技术及手段</strong></p><p><img src="/2023/03/02/%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/image-20230302141237916.png" alt="image-20230302141237916"></p><p>hash加盐：给口令添加一段随机字符串，然后再进行hash，一般得到的hash会带加的盐？</p><p>这是shadow文件里格式，为<code>$id&amp;salt&amp;encrypted</code></p><p><code>$6$qRMGpW616Ex..tyy$EMfz0BaH2.EhFv9o5sEp1OmLjgoRAwFWUaXqfvqFywSS9.yb.WIzUGWjv1Xq2w46ewK5Z4JVWAIWimNGZGAVC.</code></p><p>id为1时，采用md5算法加密<br>id为5时，采用SHA256算法加密<br>id为6时，采用SHA512算法加密</p><p>模糊测试：其核心思想是自动或半自动的生成随机数据输入到一个程序中，并监视程序异常，如崩溃，断言(assertion)失败，以发现可能的程序错误，比如内存泄漏。</p><p>IDS（入侵检测）：专业上讲IDS是依照一定的安全策略，对网络、系统的运行状况进行监视，尽可能发现各种攻击企图、攻击行为或者攻击结果，以保证网络系统资源的机密性、完整性和可用性。</p><p>IPS（入侵防御）：IPS系统是一部能够监视网络或网络设备的网络资料传输行为的计算机网络安全设备，能够即时的中断、调整或隔离一些不正常或是具有伤害性的网络资料传输行为。</p><p>IDS一般只监听，然后做出警告，IPS能够自主的做出一些防御手段</p><p>具体见 <a href="https://zhuanlan.zhihu.com/p/96942352">链接</a></p><p>差分隐私：</p><script type="math/tex; mode=display">Pr[K(D_1)\in S]\leq exp(\epsilon) \times Pr[K(D_2)\in S]</script><p>它的核心思想就是说，对于<strong>相差一条记录</strong>的两个数据集（D1,D2），查询它们<strong>获得相同结果的概率</strong>（Pr）是非常接近的，对于非常接近的衡量是由公式中的 <strong>ε</strong> 决定的，称其为<strong>隐私预算</strong>（privacy budget）。</p><p>MPC（安全多方计算）：</p><p><img src="/2023/03/02/%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/image-20230302152514715.png" alt="image-20230302152514715"></p><p>参考 <a href="https://zhuanlan.zhihu.com/p/363803742">链接</a></p><h3 id="2-安全模型"><a href="#2-安全模型" class="headerlink" title="2. 安全模型"></a>2. 安全模型</h3><p>$P^2DR$ 安全模型：Policy（安全策略），Protection（防护），Detection（检测），Response（响应）</p><p>策略：对于一个策略体系的建立包括：安全策略的制订、安全策略的评估、安全策略的执行等。</p><p>保护：防火墙，加密，认证</p><p>检测：检测是动态响应的依据</p><p>$PDRR$ 安全模型：Protect（防护），Detect（检测），React（响应），Restore（恢复）</p><p>防护：防护是预先阻止攻击可以发生的条件，让攻击者无法顺利地入侵。</p><p>检测：IDS</p><p>恢复：包括恢复系统和恢复数据</p><p>成功的安全模型：</p><ul><li>在安全和系统性能、易用之间建立平衡</li><li>能过对存取进行控制</li><li>保持系统和数据完整</li><li>能对系统进行恢复和数据备份</li></ul><p>安全工作的任务与目的：</p><div class="table-container"><table><thead><tr><th>措施</th><th>目的</th></tr></thead><tbody><tr><td>访问控制机制</td><td>进不来</td></tr><tr><td>授权机制</td><td>拿不走</td></tr><tr><td>加密机制</td><td>看不懂</td></tr><tr><td>代码和数据完整性鉴别机制</td><td>改不了</td></tr><tr><td>数据隐私保护机制</td><td>不泄露</td></tr><tr><td>审计、监控、防抵赖等安全机制</td><td>走不脱</td></tr></tbody></table></div><h2 id="第二章-软件安全与恶意代码"><a href="#第二章-软件安全与恶意代码" class="headerlink" title="第二章 软件安全与恶意代码"></a>第二章 软件安全与恶意代码</h2><h3 id="1-软件安全简介"><a href="#1-软件安全简介" class="headerlink" title="1. 软件安全简介"></a>1. 软件安全简介</h3><p>软件安全的目的是尽可能消除软件漏洞，确保软件在恶意攻击下仍然正常运行。</p><p>软件安全三大威胁：</p><ul><li>软件缺陷与漏洞</li></ul><p>缺陷指可以破坏软件正常运行能力的问题、错误或者隐藏的功能缺陷</p><p>漏洞指指在硬件、软件、协议的具体实现或者系统的安全策略存在缺陷，从而可以使得攻击者能够在未授权的情况下访问或者破坏系统。</p><ul><li>恶意软件</li><li>软件非法破解</li></ul><p>软件漏洞的危害：exp，shellcode，getshell，提权</p><h3 id="2-典型软件漏洞"><a href="#2-典型软件漏洞" class="headerlink" title="2. 典型软件漏洞"></a>2. 典型软件漏洞</h3><p><strong>缓冲区溢出</strong></p><p>首先要了解cdecl函数调用方法，这也是Linux&amp;gcc的缺省方法。</p><p>首先看如下代码：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">orange</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">16</span>];</span><br><span class="line">    <span class="type">int</span> c, d;</span><br><span class="line">    <span class="keyword">if</span>(a &gt; b)</span><br><span class="line">        c = a;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        c = b;</span><br><span class="line">    d = red(c, buf);</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><code>orange</code> 函数调用了 <code>red</code> 函数栈帧变化如下：</p><ol><li>当<code>orange</code>得到控制权后，其返回地址已经被其调用者push到栈上了</li></ol><p><img src="/2023/03/02/%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/image-20230302185622628.png" alt=""></p><ol><li>获取自身运行所用的栈帧</li></ol><ul><li>push 调用者的 <code>ebp</code></li><li>将当前的 <code>esp</code> 复制到 <code>ebp</code> （就是创建一个新的栈帧，用当前的 <code>esp</code> 作为栈底 <code>ebp</code>）</li><li>第一个参数的位置在 <code>ebp+8</code></li></ul><p><img src="/2023/03/02/%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/image-20230302185914369.png" alt=""></p><ol><li>保存要使用的寄存器的值（通用寄存器可能保存着调用orange的调用者所要使用的信息）</li></ol><ul><li><code>edi,esi,ebx</code> 通过push 或 mov</li></ul><p><img src="/2023/03/02/%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/image-20230302190254878.png" alt="image-20230302190254878"></p><ol><li>分配空间给局部变量</li></ol><ul><li>通过 <code>esp</code> 自减实现</li><li>这里的变量可以溢出到栈空间</li></ul><p><img src="/2023/03/02/%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/image-20230302190448798.png" alt="image-20230302190448798"></p><ol><li>当 orange 要调用 red 时</li></ol><p>保存（push）在red返回后要使用的寄存器 <code>eax,edx,ecx</code></p><ol><li>从右至左将 red 的参数压栈</li><li>将返回地址压栈（在red返回后要执行的下一条指令的地址）</li></ol><p><img src="/2023/03/02/%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/image-20230302194045969.png" alt="image-20230302194045969"></p><p>然后red函数也要创建自己的栈帧</p><p>返回的时候，恢复保存的寄存器的值，恢复 <code>ebp</code> 将 <code>eip</code> 指向返回地址</p><p>对于缓冲区溢出攻击，常见的做法就是对局部变量进行溢出，达到覆盖返回地址的目的</p><p><strong>整数溢出</strong></p><p>在一些检查整数大小的逻辑中，可以通过整数溢出，绕过这些检查，例如：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">catvars</span><span class="params">(<span class="type">char</span> *buf1, <span class="type">char</span> *buf2, <span class="type">unsigned</span> <span class="type">int</span> len1, <span class="type">unsigned</span> <span class="type">int</span> len2)</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">char</span> mybuf[<span class="number">256</span>];</span><br><span class="line">    <span class="keyword">if</span>((len1 + len2) &gt; <span class="number">256</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">memcpy</span>(mybuf, buf1, len1);</span><br><span class="line">    <span class="built_in">memcpy</span>(mybuf + len1, buf2, len2);</span><br><span class="line">    do_some_stuff(mybuf);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20230303105732719.png" alt="image-20230303105732719"></p><p><strong>防御控制流劫持攻击</strong></p><ul><li>修复bug，软件审查，使用安全的语言重写软件</li><li>允许溢出，防止shellcode执行（设置栈不可执行位NX，但需要硬件支持）</li><li>添加运行时检查代码，如在缓冲区和控制信息间插入canary word，canary word会先被覆盖，则说明溢出</li><li>控制与数据分离，地址随机化ASLR，检查程序控制流图CFI</li></ul><p><strong>竞态条件</strong></p><p>发生在以下情况：</p><ul><li>多个进程（多个线程）同时访问和操作相同的数据</li><li>执行的结果取决于特定的顺序</li></ul><p>对于预期的行为，是基于某些假设的，需要这些假设持续一段时间</p><ul><li>问题：但假设可能失效</li><li>可能会让依赖于假设的操作变得不可预测（至少不是预期的，可能是有限种结果中的一种）</li></ul><p>脆弱性窗口：假设可以失效的时间间隔</p><hr><p>典型例子： TOCTTOU    (time of check to time of use)</p><p>观察以下代码：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!access(<span class="string">"/tmp/X"</span>, W_OK)) {</span><br><span class="line">    f = open(<span class="string">"/tmp/X"</span>, O_WRITE);</span><br><span class="line">    write_to_file(f);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> {</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Permission denied\n"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><code>access</code> 检查real user ID，<code>open</code> 检查effective user ID</p><font color="red">啊啊啊啊看了半小时还开虚拟机试了一下，都没成功，原来这个是要setuid(0)的，我没弄</font><p>反正access只check了 real user ID，然后open检查的是 effective user ID<br>然后在setuid程序里，real user ID 是 seed，而 effective user ID是root</p><p>在access check之后，将 <code>/tmp/X</code> 的符号链接连接到 <code>/etc/shadow</code> 文件，就能实现对 shadow 文件的修改</p><p><strong>脏牛牛漏洞（dirty-COW）</strong></p><p>COW：写时复制，对于古早函数 <code>mmap()</code> ，可以将文件映射到内存，方便读写</p><p><code>mmap()</code> 有个参数，<code>MAP_PRIVATE</code> 可以创建私有内存映射，对于只读文件来说，创建的内存映射也是只读的，但是如果用这个参数创建，OS会特殊处理，并允许写入映射的内存。</p><p><img src="/2023/03/02/%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/image-20230303154716220.png" alt="image-20230303154716220"></p><p>所有的修改都是在内存的私有副本上进行的，不会影响其他地方（如底层文件不会被修改）</p><p>还有一个攻击要使用的函数 <code>madvise()</code> ：</p><p><img src="/2023/03/02/%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/image-20230303154940388.png" alt="image-20230303154940388"></p><p>加上参数 <code>MADV_DONOTNEED</code> 可以告知内核不再需要声明地址部分的内存，内核将释放声明地址的资源，进程的页表将指向原始物理内存</p><p>对于写时复制，需要执行三个重要的步骤：</p><ul><li>制作映射内存的副本</li><li>更新页表，使得虚拟内存指向新创建的物理内存</li><li>写入内存</li></ul><p>攻击原理如下：</p><p><img src="/2023/03/02/%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/image-20230303155002435.png" alt="image-20230303155002435"></p><hr><h3 id="3-恶意软件分类和原理"><a href="#3-恶意软件分类和原理" class="headerlink" title="3. 恶意软件分类和原理"></a>3. 恶意软件分类和原理</h3><p><strong>计算机病毒</strong></p><p>传染性，非授权性，隐蔽性，潜伏性，破坏性，不可预见性，可触发性</p><p><strong>引导区病毒</strong>：存在于操作系统引导区</p><p>修改磁盘访问中断，在进行磁盘写操作的时候进行传播</p><p>可以控制操作系统启动</p><p><strong>文件型病毒</strong></p><p>执行病毒所寄生的文件时，病毒才被激活，有可能直接攻击目标对象，主要是EXE，COM等可执行文件</p><p><strong>宏病毒</strong></p><p>主要是在office软件中，利用宏语言的功能将自己复制并且繁殖到其他数据文档中</p><p><strong>脚本病毒</strong></p><p>VBS脚本病毒是直接通过自我复制来感染文件的，病毒中的绝大部分代码都可以直接附加在其他同类程序的中间</p><p><strong>PE病毒</strong></p><p>通过在PE文件中增加节来实现自身逻辑功能</p><p><strong>木马</strong></p><p>完整的木马一般由木马配置程序、控制端程序（客户端）和木马程序（服务端程序，即被控端）等三部分组成。</p><p>分为正向连接和反向连接</p><ul><li>正向连接：控制端主动连接被控端；</li></ul><p>攻击者无需外部IP地址，木马不会泄露攻击者IP；</p><p>可能被防火墙阻挡，被攻击者必须具备外部IP地址；</p><ul><li>反向连接1：被控端连接控制端</li></ul><p>通过防火墙相对容易，可以控制局域网内的目标；</p><p>样本会暴露控制服务器的信息，攻击者通常应当具备外部IP的服务器</p><ul><li>反向连接2：被控端连接肉鸡，肉鸡连接控制端</li></ul><p>绕过防火墙，自动连接上线，不易被发现；</p><p><strong>后门</strong></p><p>后门是一个允许攻击者绕过系统中常规安全控制机制的程序，他按照攻击者自己的意图提供通道。</p><p>。。。。。</p><p>后面的东西感觉没什么内容。</p><p><strong>Rootkit</strong></p><p>用于隐藏对应恶意进程</p><p><strong>加壳脱壳</strong></p><p>加壳一般是指保护程序资源的方法。可以缩减程序的大小，阻碍对程序的探测与分析。</p><h2 id="第三章-渗透测试方法及工具"><a href="#第三章-渗透测试方法及工具" class="headerlink" title="第三章 渗透测试方法及工具"></a>第三章 渗透测试方法及工具</h2><h3 id="1-渗透测试的概念"><a href="#1-渗透测试的概念" class="headerlink" title="1. 渗透测试的概念"></a>1. 渗透测试的概念</h3><p>是通过模拟恶意黑客的攻击方法，来评估计算机网络系统安全的一种评估方法。这个过程包括对系统的任何弱点、技术缺陷或漏洞的主动分析，这个分析是从一个攻击者可能存在的位置来进行的，并且从这个位置有条件主动利用安全漏洞。</p><p><strong>两个显著特点</strong></p><ul><li>渗透测试是一个渐进的并且逐步深入的过程。</li><li>渗透测试是选择不影响业务系统正常运行的攻击方法进行的测试。</li></ul><h3 id="2-渗透测试方法"><a href="#2-渗透测试方法" class="headerlink" title="2. 渗透测试方法"></a>2. 渗透测试方法</h3><ul><li>黑盒测试</li></ul><p>假定渗透测试人员前期对目标网络，公司流程或应用提供的服务没有了解。</p><p>需要进行大量的侦察。</p><ul><li>白盒测试</li></ul><p>渗透测试人员对系统非常熟悉时采取的方法。一般由公司内部的安全团队执行。</p><ul><li>灰盒测试</li></ul><p>渗透测试人员会知道目标的一些基本情况；不过，系统内部工作原理和其他一些受限信息仍然不会公开给渗透测试人员。</p><h3 id="3-渗透测试工具"><a href="#3-渗透测试工具" class="headerlink" title="3. 渗透测试工具"></a>3. 渗透测试工具</h3><p>backTrack5或kali</p><h3 id="4-渗透测试生命周期"><a href="#4-渗透测试生命周期" class="headerlink" title="4. 渗透测试生命周期"></a>4. 渗透测试生命周期</h3><p>侦察（信息收集），扫描（目标测试），获取访问（漏洞利用、渗透），提升权限，维持访问、清楚痕迹</p><p><strong>侦察</strong></p><p>目标：找出目标，定义应用和商业用途，找出系统类型，找出可用端口，找出运行的服务，对信息进行社会工程，记录发现的内容</p><p><strong>目标测试</strong></p><p>目标：测试出目标的薄弱环节；找出易受攻击的系统，并确定其优先级；将易受攻击系统和资产所有者进行映射；记录发现的内容；</p><p><strong>漏洞利用</strong></p><p>利用找到的漏洞来验证漏洞是否真实存在，并会验证能获得什么样的信息或是什么样的访问权限。</p><p>目标：漏洞利用；拿到权限；抓取非授权数据；积极地进行社会工程；攻击其他系统或应用；记录发现的信息。</p><p><strong>提升权限</strong></p><p>提升权限包括找出和破解密码、用户账户和非授权的IT空间。 </p><p>目标：获得更高级别的访问系统和网络的权限；获取其他用户的账户信息；使用提升过的权限来访问其他系统；记录发现的信息。</p><p><strong>维持访问、清楚痕迹</strong></p><p>目标：建立到目标网络的多种访问方法； 删除未授权访问的证据；修复在漏洞利用中受影响的系统；如有必要，注入假数据；通过加密或其他方式隐藏通信方式；记录发现的信息。  </p><hr><h3 id="5-常用攻击举例"><a href="#5-常用攻击举例" class="headerlink" title="5. 常用攻击举例"></a>5. 常用攻击举例</h3><p><strong>信息搜集</strong></p><ul><li>Google Hacking    一些属性搜索关键字（filetype，info，inurl）</li></ul><p><strong>社会工程学</strong></p><p><strong>操作系统指纹探测</strong></p><ul><li>fping 使用ICMP协议发现存活主机</li><li>p0f 被动监听，用于操作系统探测</li><li>nmap 端口扫描，服务识别</li></ul><p><strong>漏洞扫描</strong></p><p>Nessus，OpenVAS（实践性太强辣）</p><p><strong>漏洞利用</strong></p><p>MSF，metasploit</p><p><strong>维持访问</strong></p><p>netcat</p><p><strong>Web渗透</strong></p><p>SQL注入：sqlmap，XSS跨站脚本攻击，文件包含攻击（实验内容，都忘的差不多了）</p><p><strong>无线网络渗透</strong></p><p>了解即可</p><hr><h2 id="第四章-模糊测试与漏洞挖掘"><a href="#第四章-模糊测试与漏洞挖掘" class="headerlink" title="第四章 模糊测试与漏洞挖掘"></a>第四章 模糊测试与漏洞挖掘</h2><h3 id="1-模糊测试简介"><a href="#1-模糊测试简介" class="headerlink" title="1. 模糊测试简介"></a>1. 模糊测试简介</h3><p>基本思想：</p><ul><li>模糊测试将随机的坏数据插入程序，观察程序是否能容忍杂乱输入，以检测程序的健壮性。</li><li>模糊测试产生杂乱数据攻击程序。采用模糊测试攻击应用程序可发现其他采用逻辑思维来测试很难发现的安全漏洞。</li></ul><h3 id="2-模糊测试方法"><a href="#2-模糊测试方法" class="headerlink" title="2. 模糊测试方法"></a>2. 模糊测试方法</h3><p><strong>盲Fuzz</strong></p><p>在随机位置插入随机的数据以生成畸形文件</p><p><strong>智能Fuzz</strong></p><ul><li>面向逻辑</li></ul><p>要测试的目标是解析文件的程序逻辑，而不是文件本身，纯纯抽象！</p><p>我的理解：对于输入数据，可能包括很多层（比如一个IP数据包），面向逻辑就是对这很多层的数据按照组织结构逻辑进行划分的Fuzz</p><ul><li>面向数据类型</li><li>基于样本</li></ul><p><strong>Fuzz测试的主要方法</strong></p><p>按照测试对象的信息获取程度：黑盒，白盒，灰盒</p><p>按照测试用例生成方法：基于生成的Fuzz，基于变异的Fuzz</p><p>还讲遗传算法。。。呃呃了</p><h3 id="3-模糊测试器类型"><a href="#3-模糊测试器类型" class="headerlink" title="3. 模糊测试器类型"></a>3. 模糊测试器类型</h3><p><strong>文件Fuzz测试</strong></p><p>文件作为程序主要输入；按照事先约定好的数据结构对文件中不同的数据域进行解析；</p><p>一般步骤：以一个正常的文件模板作为基础，按照一定规则产生一批畸形文件进行测试，监视目标状态，记录产生的错误信息，如寄存器状态、栈状态等</p><p><strong>协议Fuzz测试</strong></p><p>对网络协议的Fuzz，目标是聚类实现报文分类，然后对报文域识别</p><p><strong>组件Fuzz测试</strong></p><p>组件提取；组件接口分析；构造测试用例；测试驱动、异常跟踪；结果分析。</p><p><strong>Web Fuzz测试</strong></p><p>特殊形式的网络协议模糊测试；构造Web请求，对指定URL进行检测，如sqlmap</p><p><strong>内存模糊测试</strong></p><p>通过程序快照，实现数据的多次注入</p><p>适用于涉及客户端和服务器之间的大量交互的模糊网络应用程序</p><h3 id="4-程序插桩原理及实例"><a href="#4-程序插桩原理及实例" class="headerlink" title="4. 程序插桩原理及实例"></a>4. 程序插桩原理及实例</h3><p>程序插桩方法：借助往被测程序中插入操作，来实现测试目的的方法，即向源程序中添加一些语句，实现对程序语句的执行、变量的变化等情况进行检查。了解一个程序在某次运行中所有可执行语句被覆盖的情况，或是每个语句的实际执行次数。</p><p><strong>代码覆盖率</strong>，是一种通过计算测试过程中被执行的源代码占全部源代码的比例，进而间接度量软件质量的方法。它在保证测试质量的时候潜在保证实际产品的质量，可以基于此在程序中寻找没有被测试用例测试过的地方，进一步创建新的测试用例来增加覆盖率。按性质，它属于白盒测试的范畴，即主要依据源代码的内部结构来设计测试用例，通过设计不同的输入来测试软件的不同部分。</p><ul><li>编译期间的插桩</li><li>自定义调试器，使用断点来计算代码覆盖率</li><li>已经编译的程序上的动态插桩</li><li>直接向二进制文件插入代码的静态插桩技术</li><li>使用一些硬件特性（IntelPT）</li></ul><hr><h3 id="5-模糊测试工具及实例"><a href="#5-模糊测试工具及实例" class="headerlink" title="5. 模糊测试工具及实例"></a>5. 模糊测试工具及实例</h3><p>AFL, Peach, Sanitizers, Radamsa, Honggfuzz, LibFuzzer, Domato, </p><h3 id="6-模糊测试的局限性"><a href="#6-模糊测试的局限性" class="headerlink" title="6. 模糊测试的局限性"></a>6. 模糊测试的局限性</h3><ul><li>很难发现访问控制漏洞</li><li>很难发现逻辑设计漏洞</li><li>无法发现多阶段安全漏洞</li><li>无法发现深入的漏洞（需要很多前置条件的）</li></ul><hr><h2 id="第五章-用户身份认证机制"><a href="#第五章-用户身份认证机制" class="headerlink" title="第五章 用户身份认证机制"></a>第五章 用户身份认证机制</h2><h3 id="1-身份认证概述"><a href="#1-身份认证概述" class="headerlink" title="1. 身份认证概述"></a>1. 身份认证概述</h3><p>一个成熟的身份认证系统应该具有以下特征：</p><ul><li>验证者正确识别对方的概率极大</li><li>攻击者伪装以骗取信任的成功率极小</li><li>通过重放攻击进行欺骗和伪装的成功率极小</li><li>实现身份认证的算法计算量足够小</li><li>实现身份认证所需的通信量足够小</li><li>秘密参数能够安全存储</li><li>可信的第三方</li><li>可证明安全性</li></ul><h3 id="2-基于口令的身份认证"><a href="#2-基于口令的身份认证" class="headerlink" title="2. 基于口令的身份认证"></a>2. 基于口令的身份认证</h3><p>Windows下LM Hash值生成原理：参考 <a href="https://blog.csdn.net/qq_44108455/article/details/123316800">链接</a></p><p>假设明文口令是 <code>jtc123456</code> ，生成过程如下：</p><ol><li>全部转换为大写：<code>JTC123456</code> ，然后写成16进制ASCII码表示：<code>0x4a5443313233343536</code></li><li>不足14字节用0补全：<code>0x 4a 54 43 31 32 33 34 35 36 00 00 00 00 00</code></li><li>中间切开分成两组7字节数据：<code>0x4a544331323334</code> 和 <code>0x35360000000000</code></li><li>对每组7字节的数据，进行扩充，每7位后面插入一个0，变成两组8字节的数据，共128位：<code>0x4a2a10661290cca8</code>和<code>0x349a800000000000</code></li><li>将以上步骤得到的两组8字节编码，分别作为DES加密密钥，为魔术字符串明文“KGS!@#$% ”进行加密，明文转换为16进制：<code>0x4B47532140232425</code></li><li>密文分别为：<code>0xA7F5E8CDFB5A748A</code>, <code>0x1E929FFC01395127</code></li></ol><p><img src="/2023/03/02/%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/image-20230306143439174.png" alt="image-20230306143439174"></p><ol><li>最后对两段密文进行拼接，得到LM-Hash值：<code>A7F5E8CDFB5A748A1E929FFC01395127</code></li></ol><p>LM Hash一般用于WINXP，Win2000系统中</p><hr><p>Windows 下NTLM Hash生成原理见上面的链接</p><p>WIN 10使用HMAC和MD5生成SAM密码</p><p><strong>Linux口令身份认证机制</strong></p><p>口令文件：<code>/etc/passwd</code></p><p><img src="/2023/03/02/%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/image-20230306145448940.png" alt=""></p><p>影子口令文件：<code>/etc/shadow</code></p><p><img src="/2023/03/02/%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/image-20230306145503571.png" alt="image-20230306145503571"></p><p>之前记录过密钥构成，在加盐hash算法那里</p><p><strong>Base64编码</strong></p><p>标准Base64中的64个字符是</p><p><code>ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz+/0123456789</code></p><p>因为base64只有64个可用字符，所以它编码后的每个字节只能表示6个bit的信息内容；</p><p>我们待编码的内容是8个bit的，所以就造成了编码以后的数据比原来的数据要长;</p><p>6和8的最小公倍数是24，故<strong>base64的最小编码单元是24bit</strong>，四个字符。</p><p><strong>口令攻击</strong></p><p>种类：穷举尝试；窥探；社会工程学；口令文件泄露；字典攻击；网络数据流窃听；认证信息截取/重放</p><p>网络数据流窃听：截获认证系统未经加密的口令明文</p><p>认证信息截取/重放：</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20230306151939699.png" alt="image-20230306151939699"></p><p>抵御重放攻击的方法：</p><ol><li>在认证交换中使用一个序数来给每一个消息报文编号，仅当收到的消息序号合法时才接受（区别于传输层的序号，这里讨论的是应用层）</li><li>使用时间戳（只接受离server系统时间足够近的消息）</li><li>询问/应答方式（Nonce）A期望从B获得一个新消息 ，则先发给 B一个临时值 （Nonce)，并要求后续从B收到的消息包含正确的这个临时值</li></ol><p>抵御口令文件泄露的方法：</p><ul><li>使用机器相关函数：密码和机器特征绑定，窃取无用（主机号）</li><li>使用门限密码方案：见 <a href="https://zhuanlan.zhihu.com/p/150535159">链接</a></li><li>放置假口令（蜜罐）</li></ul><h3 id="3-基于智能卡的身份认证"><a href="#3-基于智能卡的身份认证" class="headerlink" title="3. 基于智能卡的身份认证"></a>3. 基于智能卡的身份认证</h3><p>身份认证过程中为了产生<strong>变动的密码</strong>一般采用双运算因子的计算方式，也就是加密算法的输入值有两个数值：一为用户密钥、另一为变动因子</p><p>服务器及智能卡必须随时保持相同的变动因子，才能算出相同的动态密码。</p><p><strong>1. 询问/应答认证</strong></p><ul><li>登录请求，Client向Server发出登录请求，Server提示用户输入ID和PIN</li><li>询问，用户提供ID给服务器，然后服务器提供一个随机串X，给插在客户端的智能卡作为验证算法的输入，服务器则根据用户ID取出对应的密钥K后，利用发送给客户机的随机串X，在服务器上用加密算法计算RS</li><li>应答，智能卡根据随机串X于内在密钥K使用硬件加密算法得到RC，并发送给服务器</li><li>验证，比较RS和RC便可确定用户的合法性</li></ul><p>优点：没有同步的问题；一片认证卡可以用来存取被不同认证服务器所保护的系统；最安全的认证方式</p><p>缺点：使用者必须按较多的按钮；比较多输入的失误</p><p><strong>2. 时间同步认证</strong></p><p>变动因子使用服务器端与客户端的同步时间值。 </p><p>认证过程如下：</p><ul><li>用户向服务器发出登录请求，服务器提示用户输入用户ID和用户PIN。</li><li>服务器根据用户ID取出对应的密钥K，使用K与服务器时间T计算动态密码RS。</li><li>智能卡根据内在的密钥K与客户机时间T使用相同的专用算法计算动态密码RC，并发送给服务器。</li><li>服务器比较RS与RC，如果相同则用户合法。</li></ul><p>优点：易于使用</p><p>缺点：时间同步困难，可能造成必须重新输入新密码。软体认证卡采用PC的时刻，很可能随时被修改。常常需要与服务器重新对时。不如Challenge/Response认证更安全</p><p><strong>3. 事件同步认证</strong></p><p>事件同步认证卡依据认证卡上的私有密钥产生一序列的动态密码。</p><p>一旦一个密码被使用过后，在密码序列中所有这个密码之前的密码都会失效。</p><p>如果使用者意外多产生了几组密码造成不同步的状态，服务器会自动重新同步到目前使用的密码。</p><p>（类似密钥流之类的东西。。）</p><p>优点：容易使用；由于使用者无法知道序列数字，所以安全性高，序列号码绝不会显示出来。</p><p>缺点：需要密码序列，较复杂。</p><h3 id="4-局域网身份认证-Kerberos"><a href="#4-局域网身份认证-Kerberos" class="headerlink" title="4. 局域网身份认证-Kerberos"></a>4. 局域网身份认证-Kerberos</h3><p>开放式系统的认证的要求：</p><p>安全性；可靠性；透明性（用户察觉不到认证服务，只是输入口令）；可拓展性（毕竟是分布式环境）</p><p>不想学具体的通信流程了，，，感觉不至于考这么细吧</p><p>参考 <a href="https://zhuanlan.zhihu.com/p/266491528">链接</a> </p><font color="red">更新于2023/3/15，来啃这个协议的具体规则</font><p>Kerberos 是一种基于加密 Ticket 的身份认证协议</p><p>Kerberos 主要由三个部分组成：Key Distribution Center (即KDC)、Client 和 Service。</p><p>大致关系如图</p><p><img src="/2023/03/02/%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/v2-d765c03f50bae99c1bfe7625aa64fba3_720w.webp" alt="v2-d765c03f50bae99c1bfe7625aa64fba3_720w"></p><p> 发现还是书上更清楚</p><p>首先解释一下应用场景：</p><p>假设你去一个游乐园玩，游乐园很坑，除了门票外，各项设施还需要各自的票，为了区分两种票，我们把游乐园的门票称为认证票，设施的门票称为服务票。需要体验一项设施，用户需要进行三个步骤：</p><ol><li>获取认证票，对应上图的①，②两个步骤</li><li>获取服务票，对应上图的③，④两个步骤</li><li>使用服务票到对应设施获取服务，对应上图⑤，⑥两个步骤</li></ol><p>Kerberos的加密都是对称加密的，身份认证的实现是基于Ticket，而非密码</p><p><strong>客户端</strong></p><p>客户端本地保留有自己的ID和加密密钥，KDC上保留有所用用户ID和对应的加密密钥（保存在Kerberos Database），只有发出请求的用户拥有对应ID的密钥，才能解密AS返回的信息。</p><p>客户端与其他组件交互都能获取到两条信息，其中一条可以通过本地密钥解密出，另外一条将无法解密出。</p><p>客户端想要访问的目标服务，<strong>将不会直接</strong>与KDC交互，而是通过能否正确解密出客户端的请求来进行认证。</p><p><strong>Authentication Service(AS)</strong></p><p>进行用户信息认证，为客户端提供 Ticket Granting Tickets。（TGT）</p><p><strong>Ticket Granting Service(TGS)</strong></p><p>验证 TGT 与 Authenticator，为客户端提供 Service Tickets。</p><p><strong>通信原理：</strong></p><ul><li>客户端与Authentication Service<ul><li>client以明文形式，将自己的ID，想要访问的目标服务的ID，网络地址，以及TGT有效期的寿命发送给AS</li><li>AS检查该ID是否存在于KDC数据库中，若检查操作没有异常，KDC将随机生成一个会话密钥，用于之后client与TGS的通信；随后AS返回两条消息给client</li><li>第一条，使用client的本地密钥进行加密，client可以正常解密，包括 <code>TGS session key（就是上面说的会话密钥），目标服务ID，时间戳，寿命等</code></li><li>第二条，使用TGS密钥进行加密，client不能正常解密，包括：<code>TGT, client ID,目标服务ID, 地址，时间戳，寿命，和TGS session key</code></li></ul></li><li>客户端收到信息后，利用本地密钥解密第一条信息，得到会话密钥，第二条信息不能正常解密</li><li><p>客户端与TGS</p><ul><li>直接将AS发送的第二条，包含TGT的信息，转发给TGS（这部分信息是用TGS密钥加密的，TGS可以解密）</li><li>将自身的 <code>ID, 时间戳</code> 用TGS session key加密，发送给TGS（这部分信息叫做Authenticator）</li></ul></li><li><p>TGS解密出所有信息后，将进行身份检查和认证</p><p>先来捋一下两条信息中都包含什么内容</p><p>首先是由Client转发的，来自AS的信息</p><ul><li>{TGT，client ID，目标服务ID，TGS session key, 地址, 时间戳, 寿命}enc by TGS key</li></ul><p>其次是Authenticator</p><ul><li>{client ID, 时间戳}enc by TGS session key</li></ul><p>TGS使用自己的TGS key解密第一条信息，获得TGS session key，用来解密第二条信息，然后进行如下检查：</p><ul><li>检查两个信息中的client ID是否相同</li><li>比较时间戳，判断是否超时</li><li>通过寿命和时间戳，判断该次票据是否过期</li><li>检查Authenticator是否已经在TGS的缓存中（避免重放攻击）</li></ul></li><li><p>所有检查都通过后，TGS随机生成一个Service session key，然后将以下两条消息发送给client：</p><ul><li>{Service session key, client ID, timestamp}enc by TGS Session Key</li><li>{ticket for service, client ID, service ID, address, timestamp, lifetime, Service session key}enc by service key</li></ul></li><li><p>client收到信息后，只能解密第一条由TGS Session Key加密的信息，第二条不能解密，但是已经拥有获取服务的ticket了</p></li><li><p>client利用解密得到的Service session key，向目标服务器发送如下两条信息：</p><ul><li>直接转发上一步由service key加密的信息</li><li>使用service session key加密的{client ID, timestamp}，就是这一步是Authenticator</li></ul></li><li><p>server收到这两条信息后，用service key解密出第一条，获得 Service session key，然后解密第二条消息，最后进行信息检查：</p><ul><li>比较Authenticator中的ID和ticket中的ID是否相同</li><li>时间戳比较</li><li>检查是否过期</li><li>检查Authenticator是否在缓存中（防止重放攻击）</li></ul></li><li><p>至此，所有的认证过程通过，客户端即可与远程HTTP服务完成了身份认证，可以进行后续的信息通信。</p></li></ul><p><strong>Kerberos的优势</strong></p><ol><li>密钥无需进行网络传输，基于ticket实现身份认证，保证密钥安全性</li><li>双向认证。整个认证过程中，不仅需要客户端进行认证，待访问的服务也需要进行身份认证。</li><li>高性能。一旦Client获得用过访问某个Server的Ticket，该Server就能根据这个Ticket实现对Client的验证，而无须KDC的再次参与。</li></ol><p>局限性：时间同步问题；口令猜测问题；认证域之间的信任问题；重放攻击的问题；密钥的存储问题；系统程序的安全性、完整性问题</p><h3 id="5-统一身份认证-PAM"><a href="#5-统一身份认证-PAM" class="headerlink" title="5. 统一身份认证-PAM"></a>5. 统一身份认证-PAM</h3><p>概念：</p><p>Linux-PAM(Pluggable Authentication Modules） </p><p>基于Linux的插入式验证模块)是一组共享库，使用这些模块，系统管理者可以自由选择应用程序使用的验证机制。也就是说，勿需重新编译应用程序就可以切换应用程序使用的验证机制。甚至，不必触动应用程序就可以完全升级系统使用的验证机制。</p><p><img src="/2023/03/02/%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/image-20230306194824593.png" alt="image-20230306194824593"></p><p>好像就是开放API，给需要认证的程序提供服务</p><hr><h3 id="6-问题与思考"><a href="#6-问题与思考" class="headerlink" title="6. 问题与思考"></a>6. 问题与思考</h3><p>口令不能明文存储和传输，目前有哪些方法可以保护口令在存储和传输中的安全？ </p><font color="orange">加密存储，加密传输</font><p>什么是加盐机制，如何实现加盐机制？</p><font color="orange">在传统hash中引入随机“盐”值，拼接进明文再计算hash</font><p>智能卡身份认证中，智能卡里通常存放的内容是什么？为什么需要动态因子？动态因子产生的方式有哪些？</p><font color="orange">密钥和硬件加密算法；为了产生变动的密码提高安全性；随机数和同步时间</font><p>Kerberos协议中，可信第三方AS和TGS的作用是什么？Ticket~TGS~ 和 Ticket~S~ 的作用是什么？应用服务器如何验证用户的身份？</p><font color="orange">AS提供TGS和Client的认证，TGS提供Server和Client的认证；Ticket~TSG~的作用是确认用户的身份，Ticket~S~的作用是确认服务器的身份</font><p>彩虹表</p><p>参考 <a href="https://zhuanlan.zhihu.com/p/105578739">链接</a></p><h2 id="第六章-访问控制模型"><a href="#第六章-访问控制模型" class="headerlink" title="第六章 访问控制模型"></a>第六章 访问控制模型</h2><h3 id="1-访问控制的基本概念"><a href="#1-访问控制的基本概念" class="headerlink" title="1. 访问控制的基本概念"></a>1. 访问控制的基本概念</h3><p>基本目标：依据授权对提出的资源访问请求进行控制，防止对任何资源（如计算资源、通信资源或信息资源）进行未授权的访问。</p><p>未授权的访问包括：未经授权的使用、泄露、修改、销毁信息以及颁发指令等。</p><p><strong>三要素：</strong></p><ul><li>主体：访问的发起者</li><li>客体：可供访问的各种软硬件资源</li><li>策略：定义了主体对客体的权限</li></ul><p><img src="/2023/03/02/%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/image-20230307105340393.png" alt="image-20230307105340393"></p><h3 id="2-自主访问控制"><a href="#2-自主访问控制" class="headerlink" title="2. 自主访问控制"></a>2. 自主访问控制</h3><p>DAC（Discretionary Access Control）</p><p>其依据是用户的身份和授权，并为系统中的每个用户（或用户组）和客体规定了用户允许对客体进行访问的方式。</p><p>每个用户对客体进行访问的要求都要经过权限检验，如果授权中允许用户以这种方式访问客体，则访问就可以得到允许，否则就不予许可。</p><p><img src="/2023/03/02/%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/image-20230307160813172.png" alt="image-20230307160813172"></p><p>类似这样？</p><p>自主访问控制允许用户自主地在系统中规定谁可以存取它的资源实体</p><p>安全操作系统需要具备的特征之一就是自主访问控制，它基于对主体或主体所属的主体组的识别来限制对客体的存取</p><p>优点：主体的拥有者负责设置访问权限。根据主体的身份和授权来决定访问模式，比较灵活。</p><p>缺点：</p><ol><li>权限在转移过程中，其访问权限关系会被改变。</li></ol><p>例如：用户A可以将其对客体目标O的访问权限传递给用户B，从而使不具备对O访问权限的B也可以访问O，这样做很容易产生安全漏洞，所以自主访问控制的安全级别很低。</p><p><img src="/2023/03/02/%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/image-20230307140043016.png" alt="image-20230307140043016"></p><ol><li>当用户数量多、管理数据量大时，由于访问控制的粒度是单个用户，访问控制策略会很庞大。</li></ol><h3 id="3-强制访问控制"><a href="#3-强制访问控制" class="headerlink" title="3. 强制访问控制"></a>3. 强制访问控制</h3><p>MAC（Mandatory Access Control）</p><p><strong>定义：</strong>如果只有系统才能控制对客体的访问，而用户个体不能改变这种控制，那么这样的访问控制称为强制访问控制。</p><p>系统对所有主体及其所控制的客体（例如：进程、文件、段、设备）指定敏感标记，这些标记是等级分类和非等级类别的组合，它们是实施强制访问控制的依据。</p><p>MAC通过安全标签实现单向信息流通模式。</p><p><strong>安全标签</strong>是定义在目标上的一组安全属性信息项。在访问控制中，一个安全标签隶属于一个用户、一个目标、一个访问请求或传输中的一个访问控制信息。</p><h4 id="BLP模型"><a href="#BLP模型" class="headerlink" title="BLP模型"></a>BLP模型</h4><p>每个主体和客体都划分一个密级 A；</p><p>每个主体和客体都划分一个业务范围 C；</p><p>实体E的安全级别是一个二元组<a, c="">，其中A是密级，可用整数表示，C是类别，用集合表示；</a,></p><p>设在BLP模型中，实体E1和实体E2的安全级别分别为：</p><p>$level(E1)=(A_1,C_1)，level(E_2)=(A_2,C2)$</p><p>$\leq$ 表示支配关系，那么：</p><p>$level(E_1)\leq level(E_2)$ 当且仅当：$A_1\leq A_2 \&amp;\&amp;C_1\subseteq C_2$ </p><p>BLP模型满足：不上读，不下写</p><ul><li>简单安全原则（向下读）</li></ul><p>主体 S 对客体 O 具有读权限 ，当且仅当 S 支配 O ，即 $level(E_O)\leq level(E_S)$ </p><ul><li>* 特性（向上写）</li></ul><p>主体 S 对客体 O 具有写权限，当且仅当 O 支配 S，即 $level(E_S)\leq level(E_O)$ </p><ul><li>稳定原则</li></ul><p>主体和客体的安全级别在它们被引用时必须保持不变</p><p>具有强制性：通过比较主体和客体之间的安全级别的支配关系来控制主体对客体的访问。 主体不能自主的授予客体权力或回收权力。</p><p>优点：更安全，可以阻止某些类型的特洛伊木马攻击</p><p>缺点：对用户限制较多，用户感到不够灵活；注重保密性控制，而缺少完整性控制，不能控制“向上写”，不能有效限制隐蔽通道；仅能处理单级客体，不支持系统运行时动态调节安全级；</p><p><img src="/2023/03/02/%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/image-20230307150734015.png" alt="image-20230307150734015"></p><p>解释一下这个图</p><p>首先由绝密进程A创建data文件，公开进程B创建control文件，由简单安全原则（向下读），A可以读取control文件，假设B和A约定，control文件每写入一个字符，就传递1bit信息；信息通过data文件传递，A对data有读写权限，作为所有者可以修改其DAC属性（是否允许B对其写入，要注意，在BLP模型中，B是不能对data进行读取的，最多只能写），约定可写就是1，不可写就是0。A每修改一次，B就尝试对data进行写入，允许写入就得到信息1，不允许就得到信息0。</p><h4 id="Biba模型"><a href="#Biba模型" class="headerlink" title="Biba模型"></a>Biba模型</h4><p>Biba模型解决了当位于较低安全级内的主体能够向位于较高安全级内的客体写入时，以及主体能够读取较低安全级的数据时，受到威胁的数据的完整性问题。</p><p>两条主要规则：不能向上写（一个主体不能把数据写入位于较高完整性级别的客体。），不能向下读（主体不能从较低的完整性级别客体读取数据）</p><p>主体低水标规则：</p><ul><li>当且仅当 $i(S)\geq i(O)$ 时，主体 S 可以写客体 O</li><li>设 S 是任意主体，O 是任意客体，$i_{min}=min(i(S),i(O))$，那么，不管完整性级别如何，<em>S</em>都可以读<em>O</em>，但是，“读”操作实施后，主体<em>S</em>的完整性级别被调整为$i_{min}$。</li></ul><p>意思就是任意主体可以读任意完整性级别的客体，但是如果主体读完整性级别比自己低的客体时，主体的完整性级别降低为客体完整性级别，否则，主体的完整性级别保持不变。</p><p>可以保证：<strong>信息不会从低完整性级别的客体传向高完整性级别的客体</strong></p><h3 id="4-基于角色的访问控制"><a href="#4-基于角色的访问控制" class="headerlink" title="4. 基于角色的访问控制"></a>4. 基于角色的访问控制</h3><p>RBAC（Role-based access control）</p><p><strong>基本思想：</strong>是根据用户所担任的角色来决定用户的在系统中的访问权限。</p><p>一个用户必须扮演某种角色，而且还必须激活这一角色，才能对一个对象进行访问或执行某种操作。</p><p>例子：</p><p><img src="/2023/03/02/%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/image-20230307160813172.png" alt="image-20230307160813172"></p><p><strong>基本概念</strong></p><div class="table-container"><table><thead><tr><th>概念</th><th>含义</th></tr></thead><tbody><tr><td>用户</td><td>访问计算机资源的主体，用户集合为<em>U</em></td></tr><tr><td>角色</td><td>一种岗位，代表一种资格、权利和责任 角色集合为 <em>R</em></td></tr><tr><td>权限</td><td>对客体的操作权力 集合为 <em>P</em></td></tr><tr><td>用户分配</td><td>将用户与角色关联，用户分配集合为 UA = { (u, r) | u∈U, r∈R }</td></tr><tr><td>权限分配</td><td>将角色与权限关联，权限分配集合为 PA = { (p, r) | p∈P, r∈R }</td></tr><tr><td>激活角色</td><td>角色只有激活才能起作用，通过会话激活角色</td></tr><tr><td>会话</td><td>用户要访问系统资源时，必须先建立一个会话，一次会话仅对应一个用户，一次会话可激活几个角色</td></tr></tbody></table></div><p>授权机制：将访问权限分配给角色，将角色分配给用户</p><p>授权要满足安全约束条件：最小特权原则；职责分离原则；角色互斥原则；角色激活限制原则</p><p>角色分级：高级角色可以继承低级角色的访问权限</p><p>一个角色可以拥有多个访问权限，不同的角色也可以拥有相同的权限</p><p><strong>安全约束</strong></p><ul><li>职责分离约束，如，公检法三权分立，互相配合，又互相监督。</li><li>角色互斥约束，例如，一个人不能又当裁判员又当运动员。</li><li>最小特权约束，只给角色分配完成某工作所需的最小权力。</li><li>角色激活约束，限制一个角色同时授权和激活的数目，如一个总经理；限制一个角色激活的时间。如岗位任期制。</li></ul><p>优点：便于授权管理；便于处理工作分级；利用安全约束，容易实现各种安全策略；便于任务分担；</p><p>缺点：复杂的权限校验，影响性能。</p><hr><h3 id="5-Chinese-Wall"><a href="#5-Chinese-Wall" class="headerlink" title="5. Chinese Wall"></a>5. Chinese Wall</h3><p>访问数据受限于主体已经获得的对数据的访问权限，而不是数据的属性（密级）。 </p><p>Chinese Wall 模型的思想是将一些可能会产生访问冲突的数据分成不同的数据集，强制所有主体最多只能访问一个数据集，但访问哪个数据集并未受强制规则的限制。</p><p>系统结构：</p><p><img src="/2023/03/02/%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/image-20230308110408341.png" alt="image-20230308110408341"></p><p>底层由独立的数据项组成，每项涉及一个独立的公司法人 </p><p>中层将涉及同一公司法人的所有客体组织起来，称为“公司数据集”</p><p>上层将公司数据集结合成组，每个组之间互为竞争对手，称为“兴趣冲突组”</p><p>Chinese Wall模型有两种安全属性：</p><p>简单安全属性：用户只能访问那些与已经拥有的信息不冲突的信息</p><p>* 属性：访问必须满足简单安全属性；主体能够对一个客体写访问的前提，是主体未对任何属于其他公司数据集的客体进行读访问。</p><h2 id="第七章-操作系统基础安全机制"><a href="#第七章-操作系统基础安全机制" class="headerlink" title="第七章 操作系统基础安全机制"></a>第七章 操作系统基础安全机制</h2><h3 id="1-访问控制列表"><a href="#1-访问控制列表" class="headerlink" title="1. 访问控制列表"></a>1. 访问控制列表</h3><p>ACL(Access Control List)</p><p>通常将访问控制矩阵表示为存在于计算机中的一张表(ACL)，保存用户对特定系统对象例如文件目录或单个文件的存取权限。每个对象拥有一个在访问控制表中定义的安全属性。最一般的访问权限包括读文件（包括所有目录中的文件），写一个或多个文件和执行一个文件（如果它是一个可执行文件或者是程序的时候）。</p><h3 id="2-Windows安全模型和访问控制机制"><a href="#2-Windows安全模型和访问控制机制" class="headerlink" title="2. Windows安全模型和访问控制机制"></a>2. Windows安全模型和访问控制机制</h3><p>Windows采用微内核结构和模块化的系统设计。</p><p>有的模块运行在底层的内核模式上，有的模块则运行在受内核保护的用户模式上。</p><p>Windows的安全子系统置于核心 (kernel) 层。</p><p>安全子系统的主要任务：身份认证和访问控制</p><p>Windows安全模型由以下几个部分构成：</p><ul><li>登录过程（login process, LP）接受本地用户或者远程用户的登录请求，处理用户信息，为用户做一些初始化工作</li><li>本地安全授权机构 (local security authority，LSA) ，LSA管理本地安全策略、管理审计策略和设置、为用户生成包含SID和组权限关系的令牌。LSA验证的过程：LSA通过访问本地SAM（Security Accounts Manager）数据库，可以完成本地用户的验证。</li><li><strong>安全账号管理器</strong> (security account manager，SAM) 。维护账号的安全性管理数据库 。</li><li>安全引用监视器 (security reference monitor，SRM) 。检查存取合法性，防止非法存取和修改。</li></ul><p>Windows的安全概念</p><ul><li>安全标识（security identifier, SID）安全标识和账号唯一对应，在账号创建时创建，账号删除时删除，而且永不再用。安全标识与对应的用户和组的账号信息一起存储在SAM数据库里。</li><li>访问令牌 (access token) 。当用户登录时，本地安全授权机构为用户创建一个访问令牌，包括用户名、所在组、安全标识等信息。以后，用户的所有程序都将拥有访问令牌的拷贝。</li><li>主体。用户登录到系统之后，本地安全授权机构为用户构造一个访问令牌，这个令牌与该用户所有的操作相联系，用户进行的操作和访问令牌一起构成一个主体。</li><li>对象、资源、共享资源。对象的实质是封装了数据和处理过程的一系列信息集合体；资源是用于网络环境的对象；共享资源是在网络上共享的对象。</li><li>安全描述符 (security descriptor) ，Windows系统为共享资源创建的安全描述符包含了该<strong>对象</strong>的一组安全属性，包括：拥有者SID；对象所在组SID；自主访问控制表（DAC）；系统访问控制表（ACL）。</li></ul><p>Windows的访问控制过程</p><ul><li>身份认证：当一个账号被创建时，Windows为它分配一个SID，并与其他账号信息一起存入SAM数据库。每次用户登录时，登录主机 (通常为工作站) 的系统首先把用户输入的用户名、口令和用户希望登录的服务器域信息送给安全账号管理器，安全账号管理器将这些信息与SAM数据库中的信息进行比较。</li><li>身份认证：比较结果，如果匹配，服务器发给工作站允许访问的信息，并返回用户的安全标识和用户所在组的安全标识，工作站系统为用户生成一个进程。服务器还要记录用户账号的特权、主目录位置、工作站参数等信息。</li><li>授权：本地安全授权机构为用户创建<strong>访问令牌</strong>（SID有效期对应整个账号，访问令牌只对应一次登录），访问令牌中有当前用户的唯一标识SID，组唯一标识SID以及一些权限标志(Privilege)。 此后，用户<strong>每新建一个进程</strong>，都将访问令牌复制作为该进程的访问令牌。</li><li>访问控制：当用户或者用户生成的进程要访问某个对象时，安全引用监视器将用户/进程的访问令牌中的SID与对象安全描述符中的自主访问控制表进行比较，从而决定用户是否有权访问对象</li></ul><h3 id="3-Linux基本访问控制机制"><a href="#3-Linux基本访问控制机制" class="headerlink" title="3. Linux基本访问控制机制"></a>3. Linux基本访问控制机制</h3><p>采用自主访问控制（DAC），用户组体现了一点角色的概念</p><p>DAC的核心内容是：在 Linux 中，进程理论上所拥有的权限与执行它的用户的权限相同</p><p>Linux通过 <code>/etc/passwd</code> 和 <code>/etc/group</code> 保存用户和组信息，通过 <code>/etc/shadow</code> 保存密码口令及其变动信息， 每行一条记录。</p><p>用户和组分别用 <code>UID</code> 和 <code>GID</code> 表示，一个用户可以同时属于多个组，默认每个用户必属于一个与之 <code>UID</code> 同值同名的 <code>GID</code> 。</p><p>文件权限之类的应该都比较熟悉了，记一下进程权限：</p><p>对于进程，有如下属性与文件访问权限相关：</p><ul><li><p><code>effective user id</code> : 进程访问文件权限相关的 <code>UID</code> （简写为 <code>euid</code> ）。</p></li><li><p><code>effective group id</code> : 进程访问文件权限相关的 <code>GID</code> （简写为 <code>egid</code> ）。</p></li><li><p><code>real user id</code> : 创建该进程的用户登录系统时的 <code>UID</code> （简写为 <code>ruid</code> ）。</p></li><li><p><code>real group id</code> :  创建该进程的用户登录系统时的 <code>GID</code> （简写为 <code>rgid</code> ）。</p></li><li><p><code>saved set user id</code> : 拷贝自 <code>euid</code> 。</p></li><li><p><code>saved set group id</code> : 拷贝自 <code>egid</code> 。</p></li></ul><p>linux程序通过exec执行其他程序，可以改变euid：</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20230309154855316.png" alt="image-20230309153739475"></p><p>关于setuid：<br>首先，setuid和setgid是两个权限标记位</p><p><code>setuid</code>：该设置使文件在执行阶段时其有效用户id （euid）(可以通过<code>geteuid()</code>获得 ) 为该文件拥有者的id。 而内核检查一个进程是否具有访问某权限时，是使用进程的有效用户 ID(euid) 来进行检查的，因而使其在执行阶段具有文件所有者的权限</p><p><code>setgid</code>: 该权限只对目录有效，目录被设置该位后任何用户在此目录下创建的文件都具有和该目录所属的组相同的组。</p><p>举例：</p><p><img src="/2023/03/02/%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/image-20230309153739475.png" alt="image-20230309153739475"></p><h3 id="4-SELinux"><a href="#4-SELinux" class="headerlink" title="4. SELinux"></a>4. SELinux</h3><p>传统Linux的不足：</p><p>存在特权用户root，任何人只要得到root的权限，对于整个系统都可以为所欲为。</p><p>对于文件的访问权划分的不够细，在linux系统里，对于文件的操作，只有「所有者」,「所有组」,「其他」这３类的划分。</p><p>SUID程序的权限升级，如果设置了SUID权限的程序有了漏洞的话，很容易被攻击者所利用</p><p>DAC问题：文件的所有者可以对文件进行所有的操作</p><p>SElinux的优点：</p><ul><li><p>更严格和细粒度的访问控制：对于文件、目录、端口等资源的访问，都可以是基于策略设定的，策略只能由管理员定制（有点像apparmor）</p></li><li><p>对于进程只赋予最小的权限</p></li><li>防止权限升级</li><li>对于用户只赋予最小的权限</li></ul><p><strong>SELinux的常见概念</strong></p><p><strong>MAC/TE</strong></p><p>MAC就是强制访问控制</p><p><strong>TE（Type Enforcement）:</strong></p><p>对所有的文件都赋予一个叫type的文件类型标签，对于所有的进程也赋予各自的一个叫 domain的标签。Domain标签能够执行的操作也是在访问控制策略里定义好的。</p><p>域是主体的类别，类型是客体的类别</p><p><img src="/2023/03/02/%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/image-20230310105905950.png" alt="image-20230310105905950"></p><p><strong>TE的安全上下文</strong></p><p>在SELinux当中，所有操作系统访问控制都是以<strong>关联的客体和主体的某种访问控制属性</strong>为基础。</p><p>访问控制属性叫做安全上下文 </p><p>所有的客体以及主体都有与其有关联的安全上下文</p><p>一个安全上下文由三部分组成：用户、角色和类型标识符</p><p><strong>策略</strong></p><p>因为SELinux默认不允许任何访问，所以，所有的访问都必须明确授权，不管用户／组ID是什么, 在SELinux中，通过allow 语句对主体授权对客体的访问权限</p><p>Allow 规则由四部分组成</p><p>源类型(Source type(s)) 通常是尝试访问进程的域类型</p><p>目标类型(Target type(s)) 被进程访问的客体的类型</p><p>客体类别(Object class(es)) 指定允许访问的客体的类型 如file,dir,socket等</p><p>许可(Permission(s))  象征目标类型允许源类型访问客体类型的访问种类</p><p>例如: <code>allow user_t   bin_t: file {read execute getattr}</code> </p><p>解释：拥有域类型user_t的进程可以读／执行或获取具体有bin_t类型的文件客体的属性</p><p>SELinux策略表示：</p><p>AV（Access vectors, AVs）用来表示策略的规则。如允许域访问各种系统客体，一个AV是一套许可。一个基本的AV规则是主体和客体的类型对，AV规则的语法如下： </p><p><code>&lt;av_kind&gt; &lt;source_type(s)&gt; &lt;target_type(s)&gt;:&lt;class(es)&gt; &lt;permission(s)&gt;</code></p><p><strong>SELinux实现架构</strong></p><p>LSM（Linux security module)- LSM框架的思想是允许安全模块以插件形式进入内核，以便更严格地控制Linux默认的基于身份的自主访问控制（DAC）安全性。LSM在内核系统调用逻辑中提供了一套钩子（hooks），这些钩子通常放在标准Linux访问检查后、且内核调用访问真实资源之前.</p><p><img src="/2023/03/02/%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/image-20230310111106791.png" alt="image-20230310111106791"></p><h2 id="第八章-硬件安全与可信计算"><a href="#第八章-硬件安全与可信计算" class="headerlink" title="第八章 硬件安全与可信计算"></a>第八章 硬件安全与可信计算</h2><h3 id="1-可信计算概论"><a href="#1-可信计算概论" class="headerlink" title="1. 可信计算概论"></a>1. 可信计算概论</h3><p>可信计算的定义：可信计算是增强信息系统安全的一种行之有效的技术。它基于一个硬件安全模块，建立可信的计算环境。可信硬件安全模块担任信任根的角色，通过密码技术、硬件访问控制技术和存储加密等技术保证系统和数据的信任状态。 </p><p>可信计算的目标：提高计算机系统的可信性；现阶段，确保系统数据完整性，数据安全存储，<strong>平台可信性远程证明</strong></p><p>可信计算用途：身份认证；系统完整性保护，数字资产保护4744TCG：可信计算组织</p><p><strong>可信计算的基本思想</strong></p><ul><li>首先建立一个信任根，信任根的可信性由物理安全、技术安全和管理安全共同确保</li><li>再建立一条信任链，从信任根开始到硬件平台、到操作系统、再到应用，一级认证一级，一级信任一级，从而把这种信任扩展到整个计算机系统</li></ul><p><strong>信任根</strong></p><p>TCG认为一个可信计算平台必须包含三个可信根</p><p>可信测量根RTM（root of trust for measurement）</p><p>可信存储根RTS（root of trust for storage）</p><p>可信报告根RTR（root of trust for reporting）</p><p><strong>可信平台模块（TPM）</strong></p><p>由CPU、存储器、I/O、密码引擎、随机数产生器和嵌入式操作系统等部件组成。</p><p>TPM本身就是一个小的计算机系统，一般是一种片上系统SoC（System on Chip），而且它应当是物理可信、技术可信和管理可信的。</p><p>硬件的安全性比软件高，而且对硬件的安全管理比软件容易。</p><p>为了能够反映平台的启动序列和软件的完整性，采用Hash函数来度量其完整性值。</p><p>系统安装时计算出其完整性值并存储。系统启动时重新计算，并于存储值比较，以确定其完整性。</p><p>为了存储度量的值，在TPM内部开设一些平台配置寄存器(PCR)。</p><h3 id="2-可信平台模块与信任根"><a href="#2-可信平台模块与信任根" class="headerlink" title="2. 可信平台模块与信任根"></a>2. 可信平台模块与信任根</h3><h4 id="2-1-TPM（Trusted-Platform-Module）的结构"><a href="#2-1-TPM（Trusted-Platform-Module）的结构" class="headerlink" title="2.1 TPM（Trusted Platform Module）的结构"></a>2.1 TPM（Trusted Platform Module）的结构</h4><p><img src="/2023/03/02/%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/image-20230310143839528.png" alt="image-20230310143839528"></p><p><strong>密码协处理器</strong></p><p>分为公钥密码和对称密码</p><p><strong>公钥密码引擎</strong></p><p>TCG主要使用公钥密码，支持加密、解密、签名和签名验证</p><p>TCG建议使用RSA密码，支持1024，2048的RSA密钥，其中根密钥应为2048位</p><p>数据格式采用PKCS#1标准，并可以采用CRT格式表示证书</p><p>RSA主要用于数字签名，签名格式要符合IEEE P1363</p><p> TPM允许使用其它公钥密码。如DSA或ECC。</p><p><strong>对称密码引擎</strong></p><p>TCG有意淡化对称密码，TPM中没有明确设置对称密码引擎。</p><p>TCG允许TPM使用对称密码进行内部数据的加密。</p><p>对应认证数据和传输数据的加密可采用“一次一密”方式的异或方式加密。</p><p>传输数据的长度较长，必须采用PKCS#1中的MGF1函数对密钥进行扩展，然后再异或方式加密。</p><p><strong>密钥产生</strong></p><p>用于产生RSA的密钥对，RSA密钥对的产生算法、素数测试算法都要符合IEEEP1363。</p><p>对称密钥的产生使用TPM的RNG（random number generator）。</p><p><strong>HMAC引擎</strong></p><p>HMAC（Keyed-Hashing for Message Authentication）是基于hash函数的消息认证码，比基于分组密码的MAC算法快。</p><p><strong>SHA-1引擎</strong></p><p>用途：数据完整性校验；数字签名的数字摘要；计算HMAC</p><p><strong>随机数产生器（RNG）</strong></p><p>TPM采用所产生的随机数用作为Nonce、对称密码的密钥或认证中的随机数。</p><p>TCG既允许使用真随机的TRNG，也允许使用伪随机的PRNG</p><p><strong>电源检测</strong></p><p>TPM电源状态和平台电源状态，TCG要求所有的电源状态变化应通知TPM</p><p>原因：支持初始化、信任链等操作；与平台电源状态匹配；避免基于电量功耗的测信道攻击</p><p><strong>Opt-in</strong></p><p>一组选择配置开关，进行系统配置。</p><p><strong>I/O</strong></p><p>TPM的输入和输出接口</p><p><strong>执行引擎</strong></p><p>运行程序，执行TPM接收到的命令</p><p><strong>非易失存储器</strong></p><p>用于存储固定标识和TPM状态</p><p>已经设置了一些存储内容，如背书密钥EK等，其余空间，经TPM的属主授权的实体可以使用。</p><p><strong>易失存储器</strong>：工作存储器</p><h4 id="2-2-TPM的密钥体系"><a href="#2-2-TPM的密钥体系" class="headerlink" title="2.2 TPM的密钥体系"></a>2.2 TPM的密钥体系</h4><p><strong>密码配置</strong></p><p>主要采用公钥密码，淡化对称密码；公钥密码采用RSA密码。</p><p><strong>密钥配置</strong></p><ul><li>背书密钥EK（Endorsement Key）<ul><li>TPM的根密钥，出厂时固化在TPM芯片里</li><li>与TPM绑定，唯一对应</li><li>2048位RSA密钥</li><li>不可迁移密钥</li></ul></li><li>平台身份证明密钥AIK（Attestation Identity Key）<ul><li><strong>EK的替身密钥</strong></li><li>2048位RSA密钥对</li><li>不可迁移密钥</li><li>仅用于对TPM内部表示平台可信状态的<strong>数据和信息</strong>（如PCR值、时间戳、计数器值、密钥的可迁移属性等数据）进行签名和验证签名，<strong>不能用于加密</strong></li></ul></li><li>存储密钥SK（Storage Key）<ul><li>用于对其他密钥进行存储保护</li><li>分为存储根密钥（SRK）和一般存储密钥（SK）</li><li>存储根密钥：2048位RSA密钥对；保护一般存储密钥；不可迁移</li><li>一般存储密钥：1024位RSA密钥对；保护其他密钥</li><li>构成一个密钥树</li><li><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/41b680f965a54f638d281161153d8f56tplv-k3u1fbpfcp-zoom-in-crop-mark4536000.webp" alt="截图-2023-02-15-133701.png"></li></ul></li><li>签名密钥SIGK（Signing Key）<ul><li>用于对数据签名</li><li>不可用于加密</li><li>1024位RSA密钥对</li></ul></li><li>绑定密钥BK（Bind Key）<ul><li>加密保护数据和对称密钥</li><li>1024位RSA密钥对</li></ul></li><li>继承密钥LK（Legacy Key）<ul><li>用于加密保护数据</li><li>在TPM之外产生，使用时调入TPM</li><li>1024位RSA密钥对</li></ul></li><li>认证密钥AK（Authentication Key）<ul><li>对称密钥</li><li>用于保护TPM的会话</li></ul></li></ul><p><strong>密钥的控制属性</strong></p><ol><li>迁移性（Migration）</li></ol><p>为了对密钥管理，设置密钥的迁移属性</p><p>可迁移：允许密钥从一个可信计算平台转移到另一个可信计算平台的移动</p><p>不可迁移：就是不允许迁移</p><p>密钥的迁移属性是在创建密钥时设置的，并且不可改变</p><p>EK，AIK，SRK（背书密钥，平台身份证明密钥，存储根密钥）是不可迁移的。如果AIK可以迁移，就会出现一个TPM冒充另一个TPM的问题。不可迁移密钥只能与一个平台绑定，永不离开产生它的平台。</p><ol><li>授权数据</li></ol><p>TCG使用授权数据机制来控制密钥使用</p><ul><li>TCG规定密钥的使用必须经过授权</li><li>使用者必须拥有该密钥的授权数据的验证码，并且通过验证，否则就不能使用密钥</li><li>密钥的授权数据是在密钥产生时设定的</li><li>TCG规定：<code>授权数据 = Hash（共享的秘密数据||随机数）</code>。</li><li>授权数据的作用与口令类似，实体要进行一个操作，必须先进行口令验证。</li><li>由于TPM的存储空间很小，所以在TPM内部只存储EK和SRK的授权数据。</li></ul><p><strong>密钥证书配置</strong></p><ul><li><p>背书密钥证书EC（Endorsement Credential）</p><ul><li>TPM生产商的名称</li><li>TPM的型号</li><li>TPM的版本</li><li>EK的公钥</li></ul></li><li><p>身份证书IC/AIK证书AC（Identity Credential/AIK Credential）</p><ul><li>TPM生产商的名称</li><li>TPM的型号</li><li>TPM的版本</li><li>AIK的公钥</li></ul><p>AIK证书用以确保AIK公钥的安全，产生AIK时产生。</p></li></ul><h4 id="2-3-可信PC平台的信任根"><a href="#2-3-可信PC平台的信任根" class="headerlink" title="2.3 可信PC平台的信任根"></a>2.3 可信PC平台的信任根</h4><p>TCG的技术规范：在可信PC中要有一个信任根，这个信任根包含三个根：</p><ul><li><p>可信度量根RTM（root of trust for measurement）</p></li><li><p>可信存储根RTS（root of trust for storage）</p></li><li><p>可信报告根RTR（root of trust for reporting）</p></li></ul><p>在TPM中，这三个根分别为：</p><ul><li>软件的可信度量根核（CRTM）</li><li>由存储根密钥SRK 和 TPM芯片中的PCR寄存器（平台配置寄存器）共同组成</li><li>由平台身份证明密钥AIK（背书密钥EK）和 TPM芯片中的PCR寄存器（平台配置寄存器）共同组成</li></ul><p><strong>可信度量根(CRTM)</strong></p><p>是一个软件模块，是信任链的起点</p><ul><li>CRTM必须是平台初始化代码中的不可变部分</li><li>CRTM是在平台复位时被首先执行，而且CRTM必须控制TBB。</li></ul><p>草了<span class="github-emoji" style="display:inline;vertical-align:middle"><span>😅</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f605.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>  ，ppt里搞一堆缩写，都不告诉我是什么东西</p><p>TBB是Trusted Building Block的缩写：</p><blockquote><p>可信构建块(TBB)是实例化可信根（信任根）所需的组件或组件集合。 通常，特定于平台的TBB是没有屏蔽位置的可信根的一部分。</p><p>TBB的一个例子是CRTM（核心可信度量根），CRTM是存储和主板之间的连接，CRTM存储和CPU之间的路径，TPM和主板之间的连接，以及CPU和TPM之间的路径。 此组合包括RTR(可信报告根)。</p><p>TBB是一种行为不会损害受信任平台目标的组件<br>————————————————<br>版权声明：本文为CSDN博主「guitar monkey」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/weixin_49274884/article/details/124959208">https://blog.csdn.net/weixin_49274884/article/details/124959208</a></p></blockquote><ul><li><strong>它应当存储于TBB的可信ROM中</strong>。</li></ul><p>根据BIOS的结构不同，在PC平台上有两种类型的CRTM结构：</p><ul><li>以BIOS的引导模块作为CRTM<ul><li>这种BIOS包括两部分：BIOS引导模块和POST BIOS</li><li>每个都是独立的模块并且都能单独升级而不影响另一个</li><li>以BIOS引导模块作为CRTM。而POST BIOS是信任链中的一个组件，它要被CRTM度量</li></ul></li><li>以整个BIOS作为CRTM<ul><li>这种BIOS是一个完整的实体</li><li>整个BIOS作为一个整体升级、修改和维护</li><li>将CRTM代码放置到BIOS的头部</li></ul></li></ul><p><strong>可信存储根（RTS）</strong></p><p>可信存储根由TPM中的平台配置寄存器PCR和存储根密钥SRK组成</p><ul><li>平台配置寄存器PCR(保证可信)<ul><li>在TPM存储器中开辟的一组寄存器</li><li>存储平台的可信度量值</li><li>TPM 1.2 中定义了24个寄存器</li></ul></li><li>存储根密钥SRK(存储根实体)<ul><li>包括SK和SRK</li></ul></li></ul><p><strong>可信报告根（RTR）</strong></p><p>可信报告根由TPM中的平台配置寄存器PCR和平台身份证明密钥AIK组成</p><ul><li>平台配置寄存器PCR<ul><li>PCR中的内容是平台可信状态的标志</li></ul></li><li>平台身份证明密钥AIK<ul><li>PCR的内容向外报告时用AIK（2048位的RSA密钥）签名保护</li><li>AIK由背书密钥EK控制产生，因此真正的可信报告根是EK</li></ul></li></ul><h3 id="3-远程证明"><a href="#3-远程证明" class="headerlink" title="3. 远程证明"></a>3. 远程证明</h3><p>远程证明是一个综合完整性校验和身份认证的过程，向验证者提供了一份可信的平台状态报告</p><p>下面的定义摘自 <a href="https://feizaipp.github.io/2021/04/09/%E5%8F%AF%E4%BF%A1%E8%AE%A1%E7%AE%97%E4%B9%8B%E8%BF%9C%E7%A8%8B%E8%AF%81%E6%98%8E/#:~:text=%E8%BF%9C%E7%A8%8B%E8%AF%81%E6%98%8E%E6%98%AF%E6%8C%87%E4%B8%80%E4%B8%AA,%E5%B9%B3%E5%8F%B0%E7%9A%84%E5%8F%AF%E4%BF%A1%E7%8A%B6%E6%80%81%E3%80%82">可信计算之远程证明</a></p><blockquote><p>远程证明是指一个节点将自己平台的某些信息使用约定的格式和协议向另一个节点报告，使得另一节点能够获得这些信息，并判定该平台的可信状态。</p></blockquote><p>流程：</p><p><img src="/2023/03/02/%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/image-20230310190854937.png" alt=""></p><h3 id="4-可信计算的典型应用"><a href="#4-可信计算的典型应用" class="headerlink" title="4. 可信计算的典型应用"></a>4. 可信计算的典型应用</h3><p><strong>系统可信启动</strong></p><p>一图流</p><p><img src="/2023/03/02/%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/image-20230310192842080-1704800868939-1.png" alt="image-20230310192349872"></p><p>BIOS完整性保护：</p><p><img src="/2023/03/02/%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/image-20230310192349872-1704800876111-4.png" alt="image-20230310192307739"></p><p>后面是Linux可信启动实例，不想看了 <span class="github-emoji" style="display:inline;vertical-align:middle"><span>😔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f614.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p>PCR的内容：</p><ul><li>PCR记录了按照启动顺序依次迭代计算的部件特征数据的Hash值</li><li>PCR中的值与度量日志中记录的启动顺序相对应</li><li>PCR中的值和度量事件日志，每次开机时重新计算生成</li></ul><p>信任链传递一图流：</p><p><img src="/2023/03/02/%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/image-20230310192307739.png" alt="image-20230310192307739"></p><p><strong>BitLocker</strong></p><p>BitLocker主要针对的问题： 由计算机设备的物理丢失导致的数据失窃或恶意泄漏。</p><p>Windows BitLocker驱动器加密通过加密Windows操作系统卷上存储的所有数据可以更好地保护计算机中的数据</p><p>BitLocker还可以在没有TPM的情况下使用。可以把密钥放在U盘上。</p><p>加密原理：</p><p><img src="/2023/03/02/%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/image-20230310194931639.png" alt="image-20230310194931639"></p><p>利用TPM保护磁盘卷上的信息</p><p>解密原理：</p><p><img src="/2023/03/02/%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/image-20230310195002782.png" alt="image-20230310195002782"></p><p>对主密钥VMK的封装和解封（Seal and Unseal）：</p><p>初次整卷加密时的封装</p><ul><li>计算系统分区相关组件的哈希值</li><li>把计算结果扩展到PCR寄存器</li><li>用相应寄存器封装主密钥VMK</li></ul><p>引导时的完整性检查</p><ul><li>依次计算系统分区相关组件的哈希值</li><li>把计算结果扩展到PCR寄存器</li><li>解封主密钥VMK</li></ul><h2 id="第八章-硬件安全与可信计算-1"><a href="#第八章-硬件安全与可信计算-1" class="headerlink" title="第八章 硬件安全与可信计算"></a>第八章 硬件安全与可信计算</h2><h3 id="1-可信执行环境技术（TEE）"><a href="#1-可信执行环境技术（TEE）" class="headerlink" title="1. 可信执行环境技术（TEE）"></a>1. 可信执行环境技术（TEE）</h3><p>TEE(Trusted Execution Environment)</p><p>可信执行环境，目标是建立一个在内存中安全的执行环境，该环境中的计算可以保证不被常规操作系统干扰，因此称为”可信”。</p><h3 id="2-TrustZone"><a href="#2-TrustZone" class="headerlink" title="2. TrustZone"></a>2. TrustZone</h3><p>参考 <a href="https://blog.csdn.net/guyongqiangx/article/details/78020257">链接</a></p><p>和PPT里一模一样，不知道是谁洗稿捏 <span class="github-emoji" style="display:inline;vertical-align:middle"><span>😋</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f60b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p>移动设备安全环境险恶：恶意软件；木马、钓鱼、APT（高级持续性威胁）；设备被盗或丢失；弱安全控制；支付安全；</p><p>Arm TrustZone技术为受信任的软件提供了系统范围的硬件隔离。TrustZone创建了一个隔离的安全世界，可以用来为系统提供机密性和完整性。</p><p><strong>处理器模型</strong></p><p>每个带 TrustZone 安全扩展的处理器核都有两个虚拟处理器核，每个处理器核分属不同的执行环境（安全和非安全）。</p><p>引入了一个特殊的机制——监控模式，负责不同执行环境间的切换。</p><p>非安全虚拟处理器只能访问非安全系统资源，但安全虚拟处理器能访问所有的资源。</p><p><img src="/2023/03/02/%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/image-20230311140007689.png" alt="image-20230311140007689"></p><p><strong>从非安全状态进入监控模式</strong>：</p><p>执行SMC（Secure Monitor Call）指令，SMC 指令是一条特殊指令，它类似于软件中断指令（SWI），通过它来调用监控器例程。</p><p><img src="/2023/03/02/%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/image-20230311140639543.png" alt="image-20230311140639543"></p><p><strong>系统总线</strong></p><p>TrustZone 在系统总线上针对每一个信道的读写增加了一个额外的控制信号位，这个控制位叫做Non-Secure或者NS位。</p><p>NS位指明当前系统的状态。如果NS为0，则当前系统处于安全态；如果NS为1，则当前系统处于非安全态。</p><blockquote><p>NS控制信号在AMBA3 AXI总线规范中定义。可以将其看作为原有地址的扩展位，如果原有32为寻址，增加NS可以看成是33位寻址，其中一半的32位物理寻址位于安全世界，另一半32位物理寻址位于非安全世界。</p></blockquote><p><strong>外围总线</strong></p><p>TrustZone 架构一个最有用的特性就是其有保护外设安全的能力。</p><p>安全中断控制器和计数器允许非中断安全任务来监控系统</p><p>安全时钟源提供了可靠的时间基准</p><p>安全键盘使得用户密码输入能够得到安全保障。</p><p><strong>内存模型</strong></p><p>MMU（Memory Management Unit）</p><blockquote><p>MMU是一种硬件电路，它包含两类部件，一类是分段部件，一类是分页部件，对应于内存管理的分段机制和分页机制。分段机制把一个逻辑地址转换为线性地址；接着，分页机制把一个线性地址转换为物理地址。</p><p>当CPU访问一个虚拟地址时，这个虚地址被送到MMU翻译，硬件首先把它和TLB中的所有条目同时(并行地)进行比较，如果它的虚页号在TLB中，并且访问没有违反保护位，它的页面会直接从TLB中取出而不去访问页表，从而提高地址转换的效率。</p></blockquote><p>安全世界和非安全世界都有自己的虚拟MMU，各自管理物理地址的映射。实际上只是两个世界都有一份TTBR0、TTBR1、TTBCR寄存器，因此就会对应两个MMU表。</p><p>尽管MMU有两套，但TLB缓存硬件上只有一套，因此TLB对于两个世界来说是共享的，其通过NS位来标志其每一项具体属于哪一个世界。这样在两个世界间进行切换时不再需要重新刷新TLB，提高执行效率。</p><p>Cache</p><p>同TLB类似，硬件上两个世界共享一套Cache，具体的Cache数据属于哪一个世界也由其NS位指定，在世界间切换也不需要刷新Cache。</p><p><strong>安全中断</strong></p><p>监控器在没有任何执行环境的代码帮助下就能够直接捕获FIQ和IRQ的能力，可以让安全中断源发出的中断不能被普通环境软件操作。</p><p>ARM建议配置IRQ作为非安全世界的中断源，FIQ作为安全世界的中断源。</p><ul><li>当处理器运行在非安全世界时，IRQ直接进入非安全世界的处理函数； </li><li>如果处理器运行在安全世界，当IRQ发生时，会先进入到Monitor模式，然后跳到非安全世界的IRQ处理函数执行。</li></ul><p>见上面的架构图，图的最下面是中断信号</p><p><strong>隔离机制</strong></p><p>TrustZone 通过两个设备来保障物理内存的安全</p><ul><li>TrustZone 地址空间控制器（TZASC: TrustZone Address Space Controller） </li><li><p>TrustZone 存储适配器（TZMA:  TrustZone Memory Adapter）</p><p>内存隔离：</p></li></ul><p>TZASC可以把外部内存分成多个区域，每个区域可以单独配置为安全或非安全区域，非安全世界的代码和应用只能访问非安全区域。</p><p>TZMA可以把片上ROM和SRAM隔离出安全和非安全区域。TZMA最大可以将片上存储的低2MB配置为安全区域，其余部分配置为非安全区域。大小划分上，片上安全区域可以在芯片出厂前设置为固定大小，或运行时通过TZPC动态配置。（攻防三的IOT安全好像讲过）</p><blockquote><p>插播一条关于CPU架构的知识</p><p>Intel和AMD用的是x86架构，Apple用的arm架构，然后arm架构的功耗小很多，至于为什么我没深究</p></blockquote><p>外设隔离：外设的安全特性是动态变化的，例如键盘平时可以作为非安全的输入设备，在输入密码时可以配置为安全设备，只允许安全世界访问。</p><p>整体隔离机制如下图：</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1eW9uZ3FpYW5neA==,size_16,color_FFFFFF,t_70.png" alt="系统内存和外设隔离机制"></p><p><strong>安全启动</strong></p><p>系统上电复位后，先从安全世界开始执行。</p><p>安全世界会对非安全世界的bootloader进行验证，确保非安全世界执行的代码经过授权而没有被篡改过。然后非安全世界的bootloader会加载非安全世界的OS，完成整个系统的启动。</p><p>在非安全系统的bootloader加载OS时，仍然需要安全世界对OS的代码进行验证，确保没有被篡改。</p><p><strong>应用</strong></p><p>数字版权管理；密钥存储；移动支付；安全启动管理；内核完整性检测；隐私保护；</p><h3 id="3-SGX"><a href="#3-SGX" class="headerlink" title="3. SGX"></a>3. SGX</h3><p>Intel的SGX是实现在第六代CPU之后的一组扩展指令集[1]。SGX着眼于提供一个为用户应用程序提供可信的执行环境，为了达到这一目标，SGX使得应用程序在一段位于Enclave地址空间中能够开辟一段受保护的内存空间。这段受保护空间实行严格的访问控制和加密操作来提供对程序数据机密性和代码完整性的保护，使得即使是Hypervisor、BIOS，操作系统等特权应用都不能随意访问这段地址空间。在enclave中运行的受保护程序还拥有一个密码学测度，这可被发送给客户端来验证程序的可信执行和为远程终端或不可信平台提供secrets。</p><p>好复杂啊，有时间的话看看王鹃等老师的论文：<a href="http://www.jos.org.cn/html/2018/9/5594.htm#outline_anchor_3">http://www.jos.org.cn/html/2018/9/5594.htm#outline_anchor_3</a></p><p><strong>应用</strong></p><p>PC安全：将PC指纹认证放入SGX中</p><p>Microsoft Research ：将云服务与分析放入SGX中</p><p>阿里云：阿里云和英特尔联合发布了基于SGX 的机密计算平台</p><h3 id="4-TrustZone与SGX的区别"><a href="#4-TrustZone与SGX的区别" class="headerlink" title="4. TrustZone与SGX的区别"></a>4. TrustZone与SGX的区别</h3><p><strong>应用环境不同</strong></p><p>TrustZone主用于嵌入式设备，SGX主要用于服务器和云端</p><p><strong>运行权限不同</strong></p><p>TrustZone可以运行在内核层，需要trustOS支持，SGX运行在应用层，不信任OS</p><p><strong>应用保护粒度不同</strong></p><p>TrustZone仅分为两个区域（安全世界和非安全世界），SGX里面可以跑多个Enclave</p><h2 id="第九章-系统风险评估方法与工具"><a href="#第九章-系统风险评估方法与工具" class="headerlink" title="第九章 系统风险评估方法与工具"></a>第九章 系统风险评估方法与工具</h2><h3 id="1-风险评估的目标和内容"><a href="#1-风险评估的目标和内容" class="headerlink" title="1. 风险评估的目标和内容"></a>1. 风险评估的目标和内容</h3><p>概念：</p><ul><li><p>风险评估也称为风险分析，就是信息资产面临的威胁、存在的脆弱点、造成的影响以及三者综合作用而带来的风险的可能性进行评估。</p></li><li><p>清楚信息系统的安全需求，了解信息系统的脆弱性，从而达到信息安全建设和管理的目的。</p></li><li><p>利用适当的风险评估工具，包括定性和定量的方法，确定资产风险等级和优先控制顺序。 </p></li></ul><p>风险评估是信息安全建设和管理的科学方法，是信息安全建设的起点和基础</p><p><strong>资产识别（Asset）</strong></p><p>在这一过程中确定信息系统的资产，并明确资产的价值。资产是组织(企 业、机构)赋予了价值因而需要保护的东西。</p><p>资产分类：软件、硬件、数据、服务、文档、人员、其他等；</p><p>资产复制：三个安全属性：保密性、完整性、可用性；</p><p><strong>威胁识别（Threat）</strong></p><p>安全威胁是一种对组织及其资产构成潜在破坏的可能性因素或者事件。 </p><p>威胁分类：中间人攻击、冒充已授权实体以及DDoS等</p><p>威胁赋值：对威胁出现的频率进行评估。在评估中对出现的频率进行等级划分，等级数值越大，威胁出现的频率越高。</p><p><strong>脆弱性识别（Vulnerability）</strong></p><p>脆弱性，多指漏洞，也就是硬件、软件或策略上存在的安全缺陷。</p><p>CVE (Common Vulnerabilities &amp; Exposures、通用漏洞披露），漏洞标准化组织</p><p>对于一个信息系统来讲，它的安全性不在于它是否采用了最新的加密算法或者最先进的设备，而是由系统本省最薄弱之处，即漏洞所决定的。—信息系统安全“木桶原则</p><p>脆弱性识别方法：主要从技术和管理两个方面进行，如工具检测、人工核查、渗透测试等</p><p>脆弱性赋值：根据脆弱性对资产的暴露程度、技术实现的难易程度等，采用等级划分对已识别的脆弱性的严重程度进行赋值。</p><p><strong>风险评估的内容</strong></p><p><img src="/2023/03/02/%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/image-20230313135029281.png" alt="image-20230313135029281"></p><p><img src="/2023/03/02/%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/image-20230313135433619.png" alt="image-20230313135433619"></p><h3 id="2-风险评估及等级测评标准"><a href="#2-风险评估及等级测评标准" class="headerlink" title="2. 风险评估及等级测评标准"></a>2. 风险评估及等级测评标准</h3><p><strong>BS7799</strong></p><p><strong>CC</strong></p><p><strong>计算机等级保护标准</strong>（中国提出的）</p><p>1999年，中国颁布，由低到高划分为5个等级</p><ul><li>第一级：用户自主保护级<ul><li>由用户来决定如何对资源进行保护，以及采用何种方式进行保护</li><li>它的安全保护机制使用户具备自主安全保护的能力，保护用户的信息免受非法的读写破坏</li></ul></li><li>第二级：系统审计保护级<ul><li>本级的安全保护机制支持用户具有更强的自主保护能力，特别是具有访问审计能力</li></ul></li><li>第三级：安全标记保护级<ul><li>具有第二级系统审计保护级的所有功能，并对访问者及其访问对象实施<strong>强制访问控制</strong></li><li>通过对访问者和访问对象指定不同安全标记，限制访问者的权限</li></ul></li><li>第四级：结构化保护级<ul><li>将前三级的安全保护能力扩展到所有访问者和访问对象，支持形式化的安全保护策略</li><li>隐蔽信道分析</li><li>可信路径</li><li>本身构造也是结构化的，以使之具有相当的抗渗透能力</li><li>本级的安全保护机制能够使信息系统实施一种系统化的安全保护（讲的什么姬使<span class="github-emoji" style="display:inline;vertical-align:middle"><span>💩</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a9.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>）</li></ul></li><li>第五级：访问验证保护级<ul><li>基于形式化验证技术，在第四级系统安全保护环境的基础上，实现访问监控器，仲裁主体对客体的访问</li><li>本级的安全保护机制不能被攻击、被篡改，具有极强的抗渗透能力</li><li>可信基最小化</li><li>可信恢复</li></ul></li></ul><p>​        </p><h3 id="3-基线评估"><a href="#3-基线评估" class="headerlink" title="3. 基线评估"></a>3. 基线评估</h3><p>Baseline Risk Assessment</p><p>安全基线——在诸多标准规范中规定的一组安全控制措施或者惯例，这些措施和惯例适用于特定环境下的所有系统，可以满足基本的安全需求，能使系统达到一定的安全防护水平</p><p>采用基线风险评估，组织根据自己的实际情况，对信息系统进行安全基线检查，即拿现有的安全措施与安全基线规定的措施进行比较，找出其中的差距，得出基本的安全需求，通过选择并实施标准的安全措施来消减和控制风险。</p><p>优点：所需资源少、周期短、操作简单，对于环境相似且安全需求相当的诸多组织，基线评估显然是最经济有效的风险评估途径。</p><p>缺点：基线水平的高低难以设定。如果过高，可能导致资源浪费和限制过度；如果过低，可能难以达到充分的安全。在管理安全相关的变化方面，基线评估比较困难。</p><h3 id="4-CVSS"><a href="#4-CVSS" class="headerlink" title="4. CVSS"></a>4. CVSS</h3><p>全称Common Vulnerability Scoring System，即“通用漏洞评分系统”</p><p>是一个行业公开标准，其被设计用来评测漏洞的严重程度，并帮助确定所需反应的紧急度和重要度</p><h3 id="5-风险评估工具"><a href="#5-风险评估工具" class="headerlink" title="5. 风险评估工具"></a>5. 风险评估工具</h3><p>系统基础平台风险评估工具包括脆弱性扫描工具和渗透性测试工具。</p><p>脆弱性扫描工具主要用于对信息系统的主要部件（如操作系统、数据库系统、网络设备等）的脆弱性进行分析。常见的脆弱性扫描工具包括：Nessus脆弱性检测工具、流光(Fluxay)脆弱性检测工具、极光远程安全评估系统以及天镜脆弱性扫描与管理系统等</p><h2 id="第十章-信息系统安全研究新方向"><a href="#第十章-信息系统安全研究新方向" class="headerlink" title="第十章 信息系统安全研究新方向"></a>第十章 信息系统安全研究新方向</h2><h3 id="1-信息安全研究热点"><a href="#1-信息安全研究热点" class="headerlink" title="1. 信息安全研究热点"></a>1. 信息安全研究热点</h3><p>信息安全四大顶级会议</p><p><strong>S&amp;P:</strong> IEEE Symposium On Security and Privacy</p><p>USENIX Security Symposium</p><p><strong>CCS:</strong> ACM Conference on Computer and Communications Security</p><p><strong>NDSS:</strong> Network and Distributed System Security Symposium</p><p><strong>四大会研究热点：</strong></p><ul><li>S&amp;P 2020 40th<ul><li>Hardware Security- Microarchitectural Security</li><li>Web and Cloud Security</li><li>Mobile Security </li><li>Program Analysis </li><li>Machine Learning and Privacy</li><li>Fuzzing</li><li>Systems and Applied Security </li><li>IoT Security </li><li>Blockchain</li></ul></li><li>S&amp;P 2021 41th<ul><li>Software Security</li><li>Mobile Security</li><li>Adversarial Machine Learning and Unlearning</li><li>Crypto Protocols</li><li>Cyber Risk and Abuse </li><li>Security of Autonomous Vehicles</li><li>Hardware Attacks</li><li>Privacy</li><li>Crypto Currencies</li><li>Formal Verification of Protocols</li><li>IoT Security and Privacy</li></ul></li><li>USENIX Security 29th<ul><li>Software Security and Verification</li><li>Network Security</li><li>Mobile</li><li>Web Security and Privacy</li><li>Trusted Execution Environments</li><li>Automotive and Drone Security</li><li>Privacy Enhancing Technologies</li><li>Embedded/IoT Security</li><li>Machine Learning</li></ul></li><li>USENIX Security 30th<ul><li>Usability: Authentication</li><li>Cryptography: Attacks</li><li>Embedded Security &amp; SW Sec</li><li>Usable Security and Privacy: User Perspectives</li><li>Cryptographic Proof Systems, Analysis, and Applications</li><li>Hardware Side Channel Attacks and Defenses</li><li>Permissions and Passwords </li><li>Private Computation and Differential Privacy</li><li>Hardware Security </li><li>Cryptocurrencies and Smart Contracts</li><li>Machine Learning: Backdoor and Poisoning</li><li>Program Analysis</li><li>Privacy Enhancing Technologies</li><li>Machine Learning: Adversarial Examples and Model Extraction</li><li>Automated Security Analysis of Source Code and Binaries </li><li>Secure Multiparty Computation</li><li>Operating Systems Security </li><li>Web Security</li><li>Fuzzing</li><li>IoT; Specialty Networking</li></ul></li><li>CCS 2019 26nd<ul><li>Attacking and Defending ML Systems</li><li>ML and Information Leakage </li><li>Binary Analysis/Policy and Access Control</li><li>Anonymous Routing and Censorship</li><li>Applied Cryptography and Cryptanalysis</li><li>Cyberphysical Systems</li><li>Browser Security</li><li>Mobile Security</li><li>Smart Contracts and Cryptocurrencies</li></ul></li><li>CSS 2021 28nd<ul><li>Authentication and Privacy</li><li>Hardware, Side Channels </li><li>Control System Security</li><li>Network Security</li><li>Messaging and Privacy</li><li>Software Security :Android and Vulnerabilities</li><li>Blockchain and Distributed Systems</li><li>Audio Systems and Autonomous Driving</li><li>Privacy Attacks and Defenses for ML</li><li>Fuzzing</li><li>Privacy for Distributed Data and Federated Learning</li></ul></li></ul><h3 id="2-移动安全"><a href="#2-移动安全" class="headerlink" title="2. 移动安全"></a>2. 移动安全</h3><p>典型的安全问题：组件间通信安全，数据泄露，伪造通信，隐私问题</p><h3 id="3-物联网安全"><a href="#3-物联网安全" class="headerlink" title="3. 物联网安全"></a>3. 物联网安全</h3><p><img src="/2023/03/02/%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/image-20230313152907402.png" alt="image-20230313152907402"></p><h3 id="4-深度学习模型安全"><a href="#4-深度学习模型安全" class="headerlink" title="4. 深度学习模型安全"></a>4. 深度学习模型安全</h3><p><img src="/2023/03/02/%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/image-20230313152927501.png" alt="image-20230313152927501"></p><h3 id="5-系统安全研究基础"><a href="#5-系统安全研究基础" class="headerlink" title="5. 系统安全研究基础"></a>5. 系统安全研究基础</h3><p><img src="/2023/03/02/%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0/image-20230313152956430.png" alt="image-20230313152956430"></p>]]></content>
      
      
      <categories>
          
          <category> 考研笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息系统安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go-zero相关概念</title>
      <link href="/2023/02/27/go-zero%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/"/>
      <url>/2023/02/27/go-zero%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="go-zero相关概念"><a href="#go-zero相关概念" class="headerlink" title="go-zero相关概念"></a>go-zero相关概念</h1><p><a href="https://mp.weixin.qq.com/s?__biz=MzIwMzY1OTU1NQ==&amp;mid=2247514545&amp;idx=1&amp;sn=9d7d92eee1a739237593753554103262&amp;chksm=96cef9fda1b970ebd0e61428e7e20f3218a85ea7d77ba069be61a94979f6f4d564033b647b80&amp;scene=27">云原生相关概念介绍</a></p><p>以go-zero的框架图来学习各个层面的概念：</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/1.png" alt="1"></p><p><strong>数据库与redis：</strong></p><p>redis是常用的缓存中间件，是一个高性能的 key-value 数据库，下面那些数据库的数据是存放在硬盘上的，而redis是缓存数据库，数据存在内存上。</p><p><strong>集群：</strong></p><p>将几台不同的服务器集中在一起，实现同一业务</p><p><strong>service端：</strong></p><p>首先是RPC和MQ的概念</p><p>MQ就是消息队列，有解耦，异步，削峰，限流的功能</p><p>解耦：比如有ABC组件，BC需要A组件产生的某些数据，如果直接在A的代码里把这些数据发给BC，那以后BC不需要的话又得删了。如果引入消息中间件，A将这些信息发送到消息队列中，需要的组件自己去订阅，就不会出现这种频繁更改的情况。</p><p>异步：还是ABC，如果让A去发数据，那如果需要这个数据的程序多了，那A发送数据所耗时间就会增多，如果A是主要业务，就会很慢，将数据发给消息中间件，让其他要的组件自己去取，可以提高处理速度。</p><p>削峰/限流：如果某个时间的请求量大于组件能处理的量，可以放到消息队列，处理完了再拿，这样不至于让系统崩溃。</p><p>RPC就类似远程的系统调用，RPC协议的主要目的是做到不同服务间调用方法像同一服务间调用本地方法一样</p><p><strong>API端：</strong></p><p>一个API对应一个RPC，就是把一个业务封装成一个API，然后供客户端调用</p><p>具体的使用等之后写代码的时候再详细研究，现在要做的就是先把整个框架理清楚，得再研究研究dismap的代码。</p>]]></content>
      
      
      <categories>
          
          <category> 本科毕设 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go-zero </tag>
            
            <tag> 云原生 </tag>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo的坑</title>
      <link href="/2023/02/24/hexo%E7%9A%84%E5%9D%91/"/>
      <url>/2023/02/24/hexo%E7%9A%84%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo-的坑"><a href="#hexo-的坑" class="headerlink" title="hexo 的坑"></a>hexo 的坑</h1><h2 id="latex公式"><a href="#latex公式" class="headerlink" title="latex公式"></a>latex公式</h2><p>很傻逼，就这几步，但是网上太多乱写博客的了</p><p>首先是渲染器，我用的是 <code>hexo-renderer-kramed</code>，要先卸载原来的渲染器</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo un hexo-renderer-markdown-it --save</span><br><span class="line">hexo install hexo-renderer-kramed --save</span><br></pre></td></tr></tbody></table></figure><p>然后在<strong>主题</strong>的配置文件中<code>/themes/butterfly._config.yml</code></p><p>找到注释<code>#Math</code></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Math (數學)</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"><span class="comment"># About the per_page</span></span><br><span class="line"><span class="comment"># if you set it to true, it will load mathjax/katex script in each page (true 表示每一頁都加載js)</span></span><br><span class="line"><span class="comment"># if you set it to false, it will load mathjax/katex script according to your setting (add the 'mathjax: true' in page's front-matter)</span></span><br><span class="line"><span class="comment"># (false 需要時加載，須在使用的 Markdown Front-matter 加上 mathjax: true)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># MathJax</span></span><br><span class="line"><span class="attr">mathjax:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># KaTeX</span></span><br><span class="line"><span class="attr">katex:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">hide_scrollbar:</span> <span class="literal">true</span></span><br></pre></td></tr></tbody></table></figure><p>照这么弄</p><p>然后照上面的注释，在要使用latex公式的文章中，前面的属性加上下面的<code>mathjax: true</code> 注意空格</p><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>按照b站这个师傅讲的弄，真心感谢</p><p><a href="https://www.bilibili.com/video/BV1D7411U7Yk/?spm_id_from=333.999.0.0">https://www.bilibili.com/video/BV1D7411U7Yk/?spm_id_from=333.999.0.0</a></p><h2 id="Emoji表情"><a href="#Emoji表情" class="headerlink" title="Emoji表情"></a>Emoji表情</h2><p>按照这篇博客最后的方法弄：<span class="github-emoji" style="display:inline;vertical-align:middle"><span>😄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p><a href="https://lisijian.cn/2020/08/12/2020-08-12-hexo%E6%B7%BB%E5%8A%A0emoji%E8%A1%A8%E6%83%85/">https://lisijian.cn/2020/08/12/2020-08-12-hexo%E6%B7%BB%E5%8A%A0emoji%E8%A1%A8%E6%83%85/</a></p><h2 id="公式不换行"><a href="#公式不换行" class="headerlink" title="公式不换行"></a>公式不换行</h2><p>对于latex公式，换行用 <code>\\</code>表示</p><p>但是渲染的时候<code>\\</code>被转义成转义字符，所以要换行得<code>\\\\</code> 或者用标准的latex语法，不要只是打两个$$$$，如下：</p><figure class="highlight latex"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line"><span class="keyword">\begin</span>{aligned}</span><br><span class="line">a=b+c<span class="keyword">\\</span></span><br><span class="line">a=b+c</span><br><span class="line"><span class="keyword">\end</span>{aligned}</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></tbody></table></figure><p>渲染为：</p><script type="math/tex; mode=display">\begin{aligned}a=b+c\\a=b+c\end{aligned}</script><p>如果不加 <code>begin</code> 和<code>end</code></p><p>渲染为：</p><script type="math/tex; mode=display">a=b+c\\a=b+c</script>]]></content>
      
      
      <categories>
          
          <category> 技术问题记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>emoji大全</title>
      <link href="/2023/02/21/emoji%E5%A4%A7%E5%85%A8/"/>
      <url>/2023/02/21/emoji%E5%A4%A7%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<p>People</p><div class="table-container"><table><thead><tr><th><span class="github-emoji" style="display:inline;vertical-align:middle"><span> </span><img src="https://github.githubassets.com/images/icons/emoji/bowtie.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:bowtie:</code></th><th><span class="github-emoji" style="display:inline;vertical-align:middle"><span>😄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:smile:</code></th><th><span class="github-emoji" style="display:inline;vertical-align:middle"><span>😆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:laughing:</code></th></tr></thead><tbody><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>😊</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f60a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:blush:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>😃</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f603.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:smiley:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>☺</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/263a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:relaxed:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>😏</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f60f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:smirk:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>😍</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f60d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:heart_eyes:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>😘</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f618.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:kissing_heart:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>😚</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f61a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:kissing_closed_eyes:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>😳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f633.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:flushed:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>😌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f60c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:relieved:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>😆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:satisfied:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>😁</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f601.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:grin:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>😉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f609.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:wink:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>😜</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f61c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:stuck_out_tongue_winking_eye:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>😝</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f61d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:stuck_out_tongue_closed_eyes:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>😀</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f600.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:grinning:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>😗</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f617.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:kissing:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>😙</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f619.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:kissing_smiling_eyes:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>😛</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f61b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:stuck_out_tongue:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>😴</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f634.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:sleeping:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>😟</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f61f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:worried:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>😦</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f626.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:frowning:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>😧</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f627.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:anguished:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>😮</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f62e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:open_mouth:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>😬</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f62c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:grimacing:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>😕</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f615.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:confused:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>😯</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f62f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:hushed:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>😑</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f611.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:expressionless:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>😒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f612.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:unamused:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>😅</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f605.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:sweat_smile:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>😓</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f613.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:sweat:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>😥</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f625.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:disappointed_relieved:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>😩</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f629.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:weary:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>😔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f614.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:pensive:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>😞</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f61e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:disappointed:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>😖</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f616.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:confounded:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>😨</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f628.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:fearful:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>😰</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f630.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:cold_sweat:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>😣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f623.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:persevere:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>😢</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f622.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:cry:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>😭</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f62d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:sob:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>😂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:joy:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>😲</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f632.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:astonished:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>😱</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f631.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:scream:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span> </span><img src="https://github.githubassets.com/images/icons/emoji/neckbeard.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:neckbeard:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>😫</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f62b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:tired_face:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>😠</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f620.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:angry:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>😡</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f621.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:rage:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>😤</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f624.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:triumph:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>😪</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f62a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:sleepy:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>😋</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f60b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:yum:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>😷</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f637.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:mask:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>😎</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f60e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:sunglasses:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>😵</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f635.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:dizzy_face:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>👿</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f47f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:imp:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>😈</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f608.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:smiling_imp:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>😐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f610.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:neutral_face:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>😶</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f636.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:no_mouth:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>😇</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f607.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:innocent:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>👽</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f47d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:alien:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>💛</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f49b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:yellow_heart:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>💙</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f499.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:blue_heart:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>💜</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f49c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:purple_heart:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>❤</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2764.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:heart:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>💚</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f49a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:green_heart:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>💔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f494.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:broken_heart:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>💓</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f493.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:heartbeat:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>💗</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f497.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:heartpulse:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>💕</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f495.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:two_hearts:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>💞</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f49e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:revolving_hearts:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>💘</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f498.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:cupid:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>💖</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f496.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:sparkling_heart:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>✨</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2728.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:sparkles:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>⭐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:star:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🌟</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f31f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:star2:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>💫</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4ab.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:dizzy:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>💥</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a5.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:boom:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>💥</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a5.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:collision:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>💢</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a2.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:anger:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>❗</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2757.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:exclamation:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>❓</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2753.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:question:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>❕</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2755.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:grey_exclamation:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>❔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2754.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:grey_question:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>💤</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a4.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:zzz:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>💨</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a8.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:dash:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>💦</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a6.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:sweat_drops:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🎶</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3b6.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:notes:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🎵</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3b5.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:musical_note:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🔥</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f525.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:fire:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>💩</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a9.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:hankey:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>💩</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a9.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:poop:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>💩</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a9.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:shit:</code></td><td>:+1: <code>:+1:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>👍</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f44d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:thumbsup:</code></td></tr><tr><td>:-1: <code>:-1:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>👎</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f44e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:thumbsdown:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>👌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f44c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:ok_hand:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>👊</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f44a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:punch:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>👊</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f44a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:facepunch:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>✊</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/270a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:fist:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>✌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/270c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:v:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>👋</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f44b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:wave:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>✋</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/270b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:hand:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>✋</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/270b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:raised_hand:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>👐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f450.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:open_hands:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>☝</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/261d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:point_up:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>👇</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f447.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:point_down:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>👈</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f448.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:point_left:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>👉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f449.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:point_right:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🙌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:raised_hands:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🙏</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f64f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:pray:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>👆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f446.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:point_up_2:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>👏</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f44f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:clap:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>💪</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4aa.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:muscle:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🤘</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f918.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:metal:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🖕</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f595.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:fu:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🚶</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6b6.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:walking:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🏃</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3c3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:runner:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🏃</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3c3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:running:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>👫</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f46b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:couple:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>👪</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f46a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:family:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>👬</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f46c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:two_men_holding_hands:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>👭</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f46d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:two_women_holding_hands:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>💃</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f483.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:dancer:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>👯</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f46f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:dancers:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🙆♀</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f646-2640.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:ok_woman:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🙅</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f645.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:no_good:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>💁</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f481.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:information_desk_person:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🙋</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f64b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:raising_hand:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>👰</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f470.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:bride_with_veil:</code></td></tr><tr><td>:person_with_pouting_face: <code>:person_with_pouting_face:</code></td><td>:person_frowning: <code>:person_frowning:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🙇</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f647.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:bow:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>💏</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f48f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:couplekiss:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>💑</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f491.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:couple_with_heart:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>💆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f486.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:massage:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>💇</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f487.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:haircut:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>💅</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f485.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:nail_care:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>👦</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f466.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:boy:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>👧</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f467.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:girl:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>👩</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f469.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:woman:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>👨</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f468.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:man:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>👶</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f476.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:baby:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>👵</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f475.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:older_woman:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>👴</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f474.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:older_man:</code></td></tr><tr><td>:person_with_blond_hair: <code>:person_with_blond_hair:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>👲</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f472.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:man_with_gua_pi_mao:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>👳♂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f473-2642.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:man_with_turban:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>👷</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f477.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:construction_worker:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>👮</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f46e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:cop:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>👼</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f47c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:angel:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>👸</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f478.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:princess:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>😺</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f63a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:smiley_cat:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>😸</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f638.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:smile_cat:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>😻</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f63b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:heart_eyes_cat:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>😽</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f63d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:kissing_cat:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>😼</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f63c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:smirk_cat:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🙀</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f640.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:scream_cat:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>😿</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f63f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:crying_cat_face:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>😹</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f639.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:joy_cat:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>😾</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f63e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:pouting_cat:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>👹</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f479.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:japanese_ogre:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>👺</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f47a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:japanese_goblin:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🙈</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f648.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:see_no_evil:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🙉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f649.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:hear_no_evil:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🙊</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f64a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:speak_no_evil:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>💂♂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f482-2642.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:guardsman:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>💀</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f480.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:skull:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐾</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f43e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:feet:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>👄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f444.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:lips:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>💋</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f48b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:kiss:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>💧</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a7.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:droplet:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>👂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f442.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:ear:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>👀</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f440.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:eyes:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>👃</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f443.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:nose:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>👅</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f445.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:tongue:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>💌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f48c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:love_letter:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>👤</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f464.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:bust_in_silhouette:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>👥</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f465.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:busts_in_silhouette:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>💬</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4ac.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:speech_balloon:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>💭</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4ad.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:thought_balloon:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span> </span><img src="https://github.githubassets.com/images/icons/emoji/feelsgood.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:feelsgood:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span> </span><img src="https://github.githubassets.com/images/icons/emoji/finnadie.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:finnadie:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span> </span><img src="https://github.githubassets.com/images/icons/emoji/goberserk.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:goberserk:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span> </span><img src="https://github.githubassets.com/images/icons/emoji/godmode.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:godmode:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span> </span><img src="https://github.githubassets.com/images/icons/emoji/hurtrealbad.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:hurtrealbad:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span> </span><img src="https://github.githubassets.com/images/icons/emoji/rage1.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:rage1:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span> </span><img src="https://github.githubassets.com/images/icons/emoji/rage2.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:rage2:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span> </span><img src="https://github.githubassets.com/images/icons/emoji/rage3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:rage3:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span> </span><img src="https://github.githubassets.com/images/icons/emoji/rage4.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:rage4:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span> </span><img src="https://github.githubassets.com/images/icons/emoji/suspect.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:suspect:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span> </span><img src="https://github.githubassets.com/images/icons/emoji/trollface.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:trollface:</code></td></tr></tbody></table></div><p>Nature</p><div class="table-container"><table><thead><tr><th><span class="github-emoji" style="display:inline;vertical-align:middle"><span>☀</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2600.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:sunny:</code></th><th><span class="github-emoji" style="display:inline;vertical-align:middle"><span>☔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2614.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:umbrella:</code></th><th><span class="github-emoji" style="display:inline;vertical-align:middle"><span>☁</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2601.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:cloud:</code></th></tr></thead><tbody><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>❄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2744.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:snowflake:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>⛄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26c4.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:snowman:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>⚡</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26a1.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:zap:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🌀</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f300.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:cyclone:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🌁</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f301.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:foggy:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🌊</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f30a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:ocean:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐱</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f431.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:cat:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐶</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f436.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:dog:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐭</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f42d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:mouse:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐹</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f439.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:hamster:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐰</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f430.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:rabbit:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐺</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f43a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:wolf:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐸</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f438.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:frog:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐯</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f42f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:tiger:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐨</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f428.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:koala:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐻</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f43b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:bear:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐷</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f437.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:pig:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐽</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f43d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:pig_nose:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐮</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f42e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:cow:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐗</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f417.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:boar:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐵</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f435.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:monkey_face:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f412.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:monkey:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐴</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f434.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:horse:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐎</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f40e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:racehorse:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐫</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f42b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:camel:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐑</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f411.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:sheep:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐘</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f418.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:elephant:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐼</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f43c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:panda_face:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐍</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f40d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:snake:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐦</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f426.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:bird:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐤</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f424.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:baby_chick:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐥</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f425.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:hatched_chick:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f423.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:hatching_chick:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f414.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:chicken:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐧</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f427.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:penguin:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐢</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f422.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:turtle:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐛</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f41b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:bug:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐝</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f41d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:honeybee:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐜</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f41c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:ant:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐞</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f41e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:beetle:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f40c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:snail:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐙</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f419.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:octopus:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐠</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f420.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:tropical_fish:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐟</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f41f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:fish:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f433.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:whale:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐋</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f40b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:whale2:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐬</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f42c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:dolphin:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f404.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:cow2:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐏</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f40f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:ram:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐀</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f400.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:rat:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐃</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f403.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:water_buffalo:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐅</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f405.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:tiger2:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐇</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f407.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:rabbit2:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f409.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:dragon:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f410.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:goat:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐓</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f413.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:rooster:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐕</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f415.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:dog2:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐖</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f416.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:pig2:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐁</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f401.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:mouse2:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f402.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:ox:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐲</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f432.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:dragon_face:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐡</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f421.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:blowfish:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐊</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f40a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:crocodile:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐪</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f42a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:dromedary_camel:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f406.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:leopard:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐈</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f408.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:cat2:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐩</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f429.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:poodle:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐾</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f43e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:paw_prints:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>💐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f490.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:bouquet:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🌸</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f338.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:cherry_blossom:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🌷</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f337.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:tulip:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🍀</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f340.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:four_leaf_clover:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🌹</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f339.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:rose:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🌻</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f33b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:sunflower:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🌺</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f33a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:hibiscus:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🍁</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f341.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:maple_leaf:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🍃</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f343.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:leaves:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🍂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f342.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:fallen_leaf:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🌿</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f33f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:herb:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🍄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f344.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:mushroom:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🌵</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f335.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:cactus:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🌴</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f334.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:palm_tree:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🌲</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f332.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:evergreen_tree:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🌳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f333.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:deciduous_tree:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🌰</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f330.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:chestnut:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🌱</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f331.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:seedling:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🌼</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f33c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:blossom:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🌾</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f33e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:ear_of_rice:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🐚</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f41a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:shell:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🌐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f310.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:globe_with_meridians:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🌞</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f31e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:sun_with_face:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🌝</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f31d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:full_moon_with_face:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🌚</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f31a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:new_moon_with_face:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🌑</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f311.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:new_moon:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🌒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f312.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:waxing_crescent_moon:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🌓</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f313.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:first_quarter_moon:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🌔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f314.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:waxing_gibbous_moon:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🌕</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f315.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:full_moon:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🌖</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f316.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:waning_gibbous_moon:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🌗</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f317.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:last_quarter_moon:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🌘</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f318.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:waning_crescent_moon:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🌜</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f31c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:last_quarter_moon_with_face:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🌛</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f31b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:first_quarter_moon_with_face:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🌔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f314.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:moon:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🌍</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f30d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:earth_africa:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🌎</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f30e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:earth_americas:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🌏</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f30f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:earth_asia:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🌋</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f30b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:volcano:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🌌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f30c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:milky_way:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>⛅</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26c5.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:partly_sunny:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span> </span><img src="https://github.githubassets.com/images/icons/emoji/octocat.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:octocat:</code></td></tr><tr><td>:squirrel: <code>:squirrel:</code></td><td></td></tr></tbody></table></div><p>Objects</p><div class="table-container"><table><thead><tr><th><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🎍</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f38d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:bamboo:</code></th><th><span class="github-emoji" style="display:inline;vertical-align:middle"><span>💝</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f49d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:gift_heart:</code></th><th><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🎎</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f38e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:dolls:</code></th></tr></thead><tbody><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🎒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f392.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:school_satchel:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🎓</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f393.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:mortar_board:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🎏</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f38f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:flags:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🎆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f386.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:fireworks:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🎇</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f387.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:sparkler:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🎐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f390.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:wind_chime:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🎑</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f391.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:rice_scene:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🎃</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f383.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:jack_o_lantern:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>👻</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f47b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:ghost:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🎅</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f385.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:santa:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🎄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f384.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:christmas_tree:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🎁</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f381.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:gift:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🔔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f514.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:bell:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🔕</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f515.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:no_bell:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🎋</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f38b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:tanabata_tree:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🎉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f389.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:tada:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🎊</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f38a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:confetti_ball:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🎈</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f388.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:balloon:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🔮</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f52e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:crystal_ball:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>💿</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4bf.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:cd:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>📀</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4c0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:dvd:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>💾</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4be.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:floppy_disk:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>📷</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4f7.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:camera:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>📹</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4f9.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:video_camera:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🎥</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3a5.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:movie_camera:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>💻</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4bb.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:computer:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>📺</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4fa.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:tv:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>📱</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4f1.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:iphone:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>☎</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/260e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:phone:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>☎</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/260e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:telephone:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>📞</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4de.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:telephone_receiver:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>📟</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4df.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:pager:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>📠</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4e0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:fax:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>💽</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4bd.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:minidisc:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>📼</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4fc.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:vhs:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🔉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f509.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:sound:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🔈</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f508.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:speaker:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🔇</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f507.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:mute:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>📢</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4e2.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:loudspeaker:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>📣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:mega:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>⌛</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/231b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:hourglass:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>⏳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/23f3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:hourglass_flowing_sand:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>⏰</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/23f0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:alarm_clock:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>⌚</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/231a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:watch:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>📻</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4fb.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:radio:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>📡</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4e1.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:satellite:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>➿</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/27bf.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:loop:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🔍</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f50d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:mag:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🔎</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f50e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:mag_right:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🔓</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f513.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:unlock:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🔒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f512.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:lock:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🔏</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f50f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:lock_with_ink_pen:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🔐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f510.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:closed_lock_with_key:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🔑</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f511.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:key:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>💡</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a1.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:bulb:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🔦</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f526.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:flashlight:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🔆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f506.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:high_brightness:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🔅</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f505.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:low_brightness:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🔌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f50c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:electric_plug:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🔋</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f50b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:battery:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>📲</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4f2.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:calling:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>✉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2709.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:email:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>📫</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4eb.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:mailbox:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>📮</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4ee.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:postbox:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🛀</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6c0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:bath:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🛁</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6c1.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:bathtub:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🚿</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6bf.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:shower:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🚽</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6bd.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:toilet:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🔧</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f527.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:wrench:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🔩</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f529.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:nut_and_bolt:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🔨</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f528.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:hammer:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>💺</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4ba.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:seat:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>💰</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4b0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:moneybag:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>💴</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4b4.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:yen:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>💵</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4b5.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:dollar:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>💷</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4b7.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:pound:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>💶</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4b6.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:euro:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>💳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4b3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:credit_card:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>💸</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4b8.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:money_with_wings:</code></td><td>:e-mail: <code>:e-mail:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>📥</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4e5.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:inbox_tray:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>📤</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4e4.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:outbox_tray:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>✉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2709.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:envelope:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>📨</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4e8.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:incoming_envelope:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>📯</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4ef.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:postal_horn:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>📪</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4ea.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:mailbox_closed:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>📬</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4ec.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:mailbox_with_mail:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>📭</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4ed.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:mailbox_with_no_mail:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🚪</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6aa.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:door:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🚬</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6ac.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:smoking:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>💣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:bomb:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🔫</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f52b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:gun:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🔪</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f52a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:hocho:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>💊</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f48a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:pill:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>💉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f489.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:syringe:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>📄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4c4.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:page_facing_up:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>📃</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4c3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:page_with_curl:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>📑</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d1.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:bookmark_tabs:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>📊</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4ca.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:bar_chart:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>📈</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4c8.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:chart_with_upwards_trend:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>📉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4c9.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:chart_with_downwards_trend:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>📜</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4dc.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:scroll:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>📋</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4cb.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:clipboard:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>📆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4c6.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:calendar:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>📅</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4c5.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:date:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>📇</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4c7.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:card_index:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>📁</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4c1.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:file_folder:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>📂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4c2.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:open_file_folder:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>✂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2702.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:scissors:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>📌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4cc.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:pushpin:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>📎</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4ce.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:paperclip:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>✒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:black_nib:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>✏</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/270f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:pencil2:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>📏</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4cf.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:straight_ruler:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>📐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:triangular_ruler:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>📕</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d5.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:closed_book:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>📗</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d7.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:green_book:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>📘</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d8.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:blue_book:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>📙</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d9.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:orange_book:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>📓</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:notebook:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>📔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d4.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:notebook_with_decorative_cover:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>📒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d2.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:ledger:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>📚</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4da.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:books:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🔖</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f516.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:bookmark:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>📛</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4db.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:name_badge:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🔬</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f52c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:microscope:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🔭</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f52d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:telescope:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>📰</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4f0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:newspaper:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🏈</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3c8.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:football:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🏀</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3c0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:basketball:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>⚽</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26bd.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:soccer:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>⚾</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26be.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:baseball:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🎾</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3be.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:tennis:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🎱</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3b1.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:8ball:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🏉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3c9.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:rugby_football:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🎳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3b3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:bowling:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>⛳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26f3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:golf:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🚵</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6b5.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:mountain_bicyclist:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🚴</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6b4.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:bicyclist:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🏇</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3c7.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:horse_racing:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🏂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3c2.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:snowboarder:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🏊</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3ca.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:swimmer:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🏄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3c4.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:surfer:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🎿</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3bf.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:ski:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>♠</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2660.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:spades:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>♥</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2665.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:hearts:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>♣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2663.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:clubs:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>♦</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2666.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:diamonds:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>💎</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f48e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:gem:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>💍</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f48d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:ring:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🏆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3c6.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:trophy:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🎼</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3bc.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:musical_score:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🎹</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3b9.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:musical_keyboard:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🎻</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3bb.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:violin:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>👾</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f47e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:space_invader:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🎮</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3ae.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:video_game:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🃏</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f0cf.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:black_joker:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🎴</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3b4.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:flower_playing_cards:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🎲</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3b2.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:game_die:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🎯</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3af.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:dart:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🀄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f004.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:mahjong:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🎬</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3ac.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:clapper:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>📝</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4dd.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:memo:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>📝</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4dd.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:pencil:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>📖</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d6.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:book:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🎨</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3a8.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:art:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🎤</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3a4.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:microphone:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🎧</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3a7.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:headphones:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🎺</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3ba.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:trumpet:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🎷</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3b7.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:saxophone:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🎸</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3b8.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:guitar:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>👞</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f45e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:shoe:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>👡</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f461.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:sandal:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>👠</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f460.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:high_heel:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>💄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f484.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:lipstick:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>👢</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f462.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:boot:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>👕</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f455.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:shirt:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>👕</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f455.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:tshirt:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>👔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f454.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:necktie:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>👚</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f45a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:womans_clothes:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>👗</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f457.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:dress:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🎽</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3bd.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:running_shirt_with_sash:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>👖</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f456.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:jeans:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>👘</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f458.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:kimono:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>👙</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f459.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:bikini:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🎀</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f380.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:ribbon:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🎩</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3a9.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:tophat:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>👑</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f451.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:crown:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>👒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f452.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:womans_hat:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>👞</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f45e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:mans_shoe:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🌂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f302.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:closed_umbrella:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>💼</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4bc.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:briefcase:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>👜</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f45c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:handbag:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>👝</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f45d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:pouch:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>👛</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f45b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:purse:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>👓</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f453.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:eyeglasses:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🎣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3a3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:fishing_pole_and_fish:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>☕</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2615.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:coffee:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🍵</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f375.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:tea:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🍶</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f376.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:sake:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🍼</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f37c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:baby_bottle:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🍺</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f37a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:beer:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🍻</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f37b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:beers:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🍸</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f378.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:cocktail:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🍹</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f379.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:tropical_drink:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🍷</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f377.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:wine_glass:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🍴</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f374.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:fork_and_knife:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🍕</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f355.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:pizza:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🍔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f354.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:hamburger:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🍟</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f35f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:fries:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🍗</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f357.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:poultry_leg:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🍖</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f356.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:meat_on_bone:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🍝</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f35d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:spaghetti:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🍛</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f35b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:curry:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🍤</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f364.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:fried_shrimp:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🍱</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f371.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:bento:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🍣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f363.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:sushi:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🍥</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f365.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:fish_cake:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🍙</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f359.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:rice_ball:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🍘</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f358.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:rice_cracker:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🍚</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f35a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:rice:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🍜</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f35c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:ramen:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🍲</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f372.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:stew:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🍢</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f362.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:oden:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🍡</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f361.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:dango:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🥚</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f95a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:egg:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🍞</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f35e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:bread:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🍩</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f369.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:doughnut:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🍮</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f36e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:custard:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🍦</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f366.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:icecream:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🍨</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f368.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:ice_cream:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🍧</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f367.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:shaved_ice:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🎂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f382.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:birthday:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🍰</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f370.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:cake:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🍪</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f36a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:cookie:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🍫</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f36b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:chocolate_bar:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🍬</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f36c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:candy:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🍭</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f36d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:lollipop:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🍯</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f36f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:honey_pot:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🍎</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f34e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:apple:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🍏</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f34f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:green_apple:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🍊</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f34a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:tangerine:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🍋</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f34b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:lemon:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🍒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f352.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:cherries:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🍇</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f347.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:grapes:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🍉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f349.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:watermelon:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🍓</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f353.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:strawberry:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🍑</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f351.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:peach:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🍈</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f348.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:melon:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🍌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f34c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:banana:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🍐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f350.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:pear:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🍍</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f34d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:pineapple:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🍠</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f360.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:sweet_potato:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🍆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f346.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:eggplant:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🍅</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f345.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:tomato:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🌽</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f33d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:corn:</code></td><td></td></tr></tbody></table></div><p>Places</p><div class="table-container"><table><thead><tr><th><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🏠</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3e0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:house:</code></th><th><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🏡</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3e1.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:house_with_garden:</code></th><th><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🏫</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3eb.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:school:</code></th></tr></thead><tbody><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🏢</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3e2.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:office:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🏣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:post_office:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🏥</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3e5.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:hospital:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🏦</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3e6.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:bank:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🏪</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3ea.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:convenience_store:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🏩</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3e9.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:love_hotel:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🏨</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3e8.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:hotel:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>💒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f492.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:wedding:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>⛪</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26ea.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:church:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🏬</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3ec.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:department_store:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🏤</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3e4.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:european_post_office:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🌇</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f307.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:city_sunrise:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🌆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f306.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:city_sunset:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🏯</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3ef.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:japanese_castle:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🏰</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3f0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:european_castle:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>⛺</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26fa.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:tent:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🏭</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3ed.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:factory:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🗼</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f5fc.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:tokyo_tower:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🗾</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f5fe.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:japan:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🗻</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f5fb.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:mount_fuji:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🌄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f304.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:sunrise_over_mountains:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🌅</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f305.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:sunrise:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🌠</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f320.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:stars:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🗽</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f5fd.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:statue_of_liberty:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🌉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f309.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:bridge_at_night:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🎠</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3a0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:carousel_horse:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🌈</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f308.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:rainbow:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🎡</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3a1.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:ferris_wheel:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>⛲</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26f2.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:fountain:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🎢</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3a2.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:roller_coaster:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🚢</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6a2.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:ship:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🚤</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6a4.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:speedboat:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>⛵</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26f5.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:boat:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>⛵</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26f5.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:sailboat:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🚣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6a3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:rowboat:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>⚓</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2693.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:anchor:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🚀</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:rocket:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>✈</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2708.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:airplane:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🚁</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f681.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:helicopter:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🚂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f682.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:steam_locomotive:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🚊</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f68a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:tram:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🚞</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f69e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:mountain_railway:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🚲</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6b2.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:bike:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🚡</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6a1.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:aerial_tramway:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🚟</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f69f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:suspension_railway:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🚠</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6a0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:mountain_cableway:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🚜</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f69c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:tractor:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🚙</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f699.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:blue_car:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🚘</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f698.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:oncoming_automobile:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🚗</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f697.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:car:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🚗</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f697.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:red_car:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🚕</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f695.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:taxi:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🚖</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f696.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:oncoming_taxi:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🚛</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f69b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:articulated_lorry:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🚌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f68c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:bus:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🚍</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f68d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:oncoming_bus:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🚨</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6a8.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:rotating_light:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🚓</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f693.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:police_car:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🚔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f694.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:oncoming_police_car:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🚒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f692.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:fire_engine:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🚑</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f691.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:ambulance:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🚐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f690.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:minibus:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🚚</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f69a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:truck:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🚋</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f68b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:train:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🚉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f689.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:station:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🚆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f686.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:train2:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🚅</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f685.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:bullettrain_front:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🚄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f684.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:bullettrain_side:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🚈</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f688.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:light_rail:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🚝</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f69d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:monorail:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🚃</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f683.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:railway_car:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🚎</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f68e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:trolleybus:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🎫</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3ab.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:ticket:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>⛽</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26fd.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:fuelpump:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🚦</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6a6.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:vertical_traffic_light:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🚥</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6a5.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:traffic_light:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>⚠</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26a0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:warning:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🚧</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6a7.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:construction:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🔰</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f530.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:beginner:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🏧</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3e7.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:atm:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🎰</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3b0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:slot_machine:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🚏</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f68f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:busstop:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>💈</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f488.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:barber:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>♨</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2668.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:hotsprings:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🏁</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3c1.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:checkered_flag:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🎌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f38c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:crossed_flags:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🏮</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3ee.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:izakaya_lantern:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🗿</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f5ff.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:moyai:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🎪</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3aa.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:circus_tent:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🎭</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3ad.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:performing_arts:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>📍</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4cd.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:round_pushpin:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🚩</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6a9.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:triangular_flag_on_post:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🇯🇵</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f1ef-1f1f5.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:jp:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🇰🇷</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f1f0-1f1f7.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:kr:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🇨🇳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f1e8-1f1f3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:cn:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🇺🇸</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f1fa-1f1f8.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:us:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🇫🇷</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f1eb-1f1f7.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:fr:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🇪🇸</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f1ea-1f1f8.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:es:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🇮🇹</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f1ee-1f1f9.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:it:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🇷🇺</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f1f7-1f1fa.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:ru:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🇬🇧</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f1ec-1f1e7.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:gb:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🇬🇧</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f1ec-1f1e7.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:uk:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🇩🇪</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f1e9-1f1ea.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:de:</code></td><td></td></tr></tbody></table></div><p>Symbols</p><div class="table-container"><table><thead><tr><th><span class="github-emoji" style="display:inline;vertical-align:middle"><span>1⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0031-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:one:</code></th><th><span class="github-emoji" style="display:inline;vertical-align:middle"><span>2⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0032-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:two:</code></th><th><span class="github-emoji" style="display:inline;vertical-align:middle"><span>3⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0033-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:three:</code></th></tr></thead><tbody><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>4⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0034-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:four:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>5⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0035-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:five:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>6⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0036-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:six:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>7⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0037-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:seven:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>8⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0038-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:eight:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>9⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0039-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:nine:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🔟</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f51f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:keycap_ten:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🔢</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f522.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:1234:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>0⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0030-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:zero:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>#⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0023-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:hash:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🔣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f523.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:symbols:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>◀</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/25c0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:arrow_backward:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>⬇</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2b07.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:arrow_down:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>▶</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/25b6.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:arrow_forward:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>⬅</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2b05.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:arrow_left:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🔠</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f520.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:capital_abcd:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🔡</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f521.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:abcd:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🔤</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f524.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:abc:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>↙</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2199.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:arrow_lower_left:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>↘</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2198.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:arrow_lower_right:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>➡</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/27a1.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:arrow_right:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>⬆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2b06.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:arrow_up:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>↖</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2196.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:arrow_upper_left:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>↗</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2197.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:arrow_upper_right:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>⏬</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/23ec.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:arrow_double_down:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>⏫</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/23eb.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:arrow_double_up:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🔽</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f53d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:arrow_down_small:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>⤵</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2935.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:arrow_heading_down:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>⤴</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2934.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:arrow_heading_up:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>↩</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/21a9.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:leftwards_arrow_with_hook:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>↪</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/21aa.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:arrow_right_hook:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>↔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2194.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:left_right_arrow:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>↕</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2195.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:arrow_up_down:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🔼</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f53c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:arrow_up_small:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🔃</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f503.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:arrows_clockwise:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🔄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f504.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:arrows_counterclockwise:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>⏪</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/23ea.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:rewind:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>⏩</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/23e9.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:fast_forward:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>ℹ</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2139.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:information_source:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🆗</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f197.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:ok:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🔀</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f500.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:twisted_rightwards_arrows:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🔁</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f501.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:repeat:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🔂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f502.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:repeat_one:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🆕</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f195.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:new:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🔝</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f51d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:top:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🆙</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f199.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:up:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🆒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f192.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:cool:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🆓</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f193.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:free:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🆖</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f196.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:ng:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🎦</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3a6.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:cinema:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🈁</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f201.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:koko:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>📶</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4f6.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:signal_strength:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🈹</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f239.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:u5272:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🈴</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f234.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:u5408:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🈺</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f23a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:u55b6:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🈯</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f22f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:u6307:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🈷</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f237.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:u6708:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🈶</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f236.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:u6709:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🈵</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f235.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:u6e80:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🈚</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f21a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:u7121:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🈸</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f238.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:u7533:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🈳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f233.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:u7a7a:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🈲</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f232.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:u7981:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🈂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f202.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:sa:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🚻</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6bb.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:restroom:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🚹</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6b9.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:mens:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🚺</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6ba.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:womens:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🚼</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6bc.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:baby_symbol:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🚭</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6ad.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:no_smoking:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🅿</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f17f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:parking:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>♿</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/267f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:wheelchair:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🚇</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f687.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:metro:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🛄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6c4.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:baggage_claim:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🉑</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f251.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:accept:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🚾</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6be.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:wc:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🚰</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6b0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:potable_water:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🚮</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6ae.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:put_litter_in_its_place:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>㊙</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/3299.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:secret:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>㊗</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/3297.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:congratulations:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>Ⓜ</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/24c2.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:m:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🛂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6c2.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:passport_control:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🛅</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6c5.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:left_luggage:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🛃</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6c3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:customs:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🉐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f250.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:ideograph_advantage:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🆑</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f191.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:cl:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🆘</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f198.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:sos:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🆔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f194.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:id:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🚫</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6ab.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:no_entry_sign:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🔞</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f51e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:underage:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>📵</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4f5.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:no_mobile_phones:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🚯</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6af.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:do_not_litter:</code></td><td>:non-potable_water: <code>:non-potable_water:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🚳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6b3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:no_bicycles:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🚷</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6b7.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:no_pedestrians:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🚸</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6b8.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:children_crossing:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>⛔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26d4.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:no_entry:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>✳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2733.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:eight_spoked_asterisk:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>✴</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2734.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:eight_pointed_black_star:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>💟</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f49f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:heart_decoration:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🆚</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f19a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:vs:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>📳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4f3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:vibration_mode:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>📴</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4f4.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:mobile_phone_off:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>💹</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4b9.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:chart:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>💱</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4b1.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:currency_exchange:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>♈</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2648.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:aries:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>♉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2649.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:taurus:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>♊</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/264a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:gemini:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>♋</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/264b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:cancer:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>♌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/264c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:leo:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>♍</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/264d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:virgo:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>♎</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/264e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:libra:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>♏</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/264f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:scorpius:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>♐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2650.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:sagittarius:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>♑</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2651.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:capricorn:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>♒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2652.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:aquarius:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>♓</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2653.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:pisces:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>⛎</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26ce.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:ophiuchus:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🔯</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f52f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:six_pointed_star:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>❎</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/274e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:negative_squared_cross_mark:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🅰</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f170.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:a:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🅱</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f171.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:b:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🆎</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f18e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:ab:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🅾</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f17e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:o2:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>💠</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:diamond_shape_with_a_dot_inside:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>♻</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/267b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:recycle:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🔚</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f51a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:end:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🔛</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f51b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:on:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🔜</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f51c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:soon:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🕐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f550.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:clock1:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🕜</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f55c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:clock130:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🕙</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f559.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:clock10:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🕥</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f565.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:clock1030:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🕚</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f55a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:clock11:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🕦</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f566.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:clock1130:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🕛</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f55b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:clock12:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🕧</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f567.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:clock1230:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🕑</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f551.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:clock2:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🕝</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f55d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:clock230:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🕒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f552.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:clock3:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🕞</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f55e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:clock330:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🕓</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f553.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:clock4:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🕟</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f55f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:clock430:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🕔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f554.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:clock5:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🕠</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f560.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:clock530:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🕕</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f555.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:clock6:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🕡</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f561.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:clock630:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🕖</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f556.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:clock7:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🕢</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f562.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:clock730:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🕗</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f557.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:clock8:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🕣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f563.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:clock830:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🕘</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f558.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:clock9:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🕤</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f564.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:clock930:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>💲</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4b2.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:heavy_dollar_sign:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>©</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/00a9.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:copyright:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>®</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/00ae.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:registered:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>™</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2122.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:tm:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>❌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:x:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>❗</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2757.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:heavy_exclamation_mark:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>‼</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/203c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:bangbang:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>⁉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2049.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:interrobang:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>⭕</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2b55.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:o:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>✖</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2716.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:heavy_multiplication_x:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>➕</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2795.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:heavy_plus_sign:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>➖</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2796.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:heavy_minus_sign:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>➗</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2797.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:heavy_division_sign:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>💮</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4ae.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:white_flower:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>💯</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4af.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:100:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>✔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2714.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:heavy_check_mark:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>☑</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2611.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:ballot_box_with_check:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🔘</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f518.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:radio_button:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🔗</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f517.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:link:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>➰</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/27b0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:curly_loop:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>〰</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/3030.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:wavy_dash:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>〽</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/303d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:part_alternation_mark:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🔱</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f531.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:trident:</code></td><td>:black_square: <code>:black_square:</code></td><td>:white_square: <code>:white_square:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>✅</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:white_check_mark:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🔲</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f532.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:black_square_button:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🔳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f533.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:white_square_button:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>⚫</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26ab.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:black_circle:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>⚪</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26aa.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:white_circle:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🔴</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f534.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:red_circle:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🔵</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f535.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:large_blue_circle:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🔷</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f537.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:large_blue_diamond:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🔶</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f536.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:large_orange_diamond:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🔹</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f539.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:small_blue_diamond:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🔸</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f538.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:small_orange_diamond:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🔺</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f53a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:small_red_triangle:</code></td></tr><tr><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span>🔻</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f53b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:small_red_triangle_down:</code></td><td><span class="github-emoji" style="display:inline;vertical-align:middle"><span> </span><img src="https://github.githubassets.com/images/icons/emoji/shipit.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <code>:shipit:</code></td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> 查阅用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
            <tag> emoji </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dismap代码解析</title>
      <link href="/2023/02/20/dismap%E4%BB%A3%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
      <url>/2023/02/20/dismap%E4%BB%A3%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="dismap代码解析"><a href="#dismap代码解析" class="headerlink" title="dismap代码解析"></a>dismap代码解析</h2><p>对go不太熟悉，所以一些术语可能不太专业</p><p>main函数找了会儿才找到，编译如下：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yyp@yyp-virtual-machine:~/dismap$ <span class="built_in">cd</span> ./cmd/dismap</span><br><span class="line">yyp@yyp-virtual-machine:~/dismap/cmd/dismap$ go build</span><br></pre></td></tr></tbody></table></figure><p>开始调试：</p><p><em>dismap.go</em>文件：</p><p>打印banner，进入主函数<code>DisMap()</code></p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DisMap</span><span class="params">()</span></span> {</span><br><span class="line">configs.Banner()</span><br><span class="line">Args := flag.Flags()</span><br><span class="line">wg := &amp;sync.WaitGroup{}</span><br><span class="line">lock := &amp;sync.Mutex{}</span><br><span class="line"></span><br><span class="line">information()</span><br><span class="line">which(Args, wg, lock)</span><br><span class="line">logger.Info(<span class="string">"Identification completed and ended"</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><del>前面几个变量声明还不知道是干什么的</del></p><ul><li><p><code>Banner()</code>用来打印logo</p></li><li><p><code>Flags()</code>处理程序运行参数，如下：</p></li></ul><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20230221150952366.png" alt="image-20230220160249912"></p><ul><li>剩下两个是多线程相关</li></ul><p>跟进information()函数</p><p>这个函数是处理命令行参数的，不是关注的重点，看一遍过去了</p><p><code>which()</code>函数：</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">which</span><span class="params">(Args <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>{}, wg *sync.WaitGroup, lock *sync.Mutex)</span></span> {</span><br><span class="line">op := output.Open(Args)</span><br><span class="line"></span><br><span class="line">address := Args[<span class="string">"FlagNetwork"</span>].(<span class="type">string</span>)</span><br><span class="line"><span class="keyword">if</span> address != <span class="string">""</span> {</span><br><span class="line">operate.FlagNetwork(op, wg, lock, address, Args)</span><br><span class="line">output.Close(op)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">uri := Args[<span class="string">"FlagUrl"</span>].(<span class="type">string</span>)</span><br><span class="line"><span class="keyword">if</span> uri != <span class="string">""</span> {</span><br><span class="line">operate.FlagUrl(op, uri, Args)</span><br><span class="line">output.Close(op)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">file := Args[<span class="string">"FlagFile"</span>].(<span class="type">string</span>)</span><br><span class="line"><span class="keyword">if</span> file != <span class="string">""</span> {</span><br><span class="line">operate.FlagFile(op, wg, lock, file, Args)</span><br><span class="line">output.Close(op)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><code>output.Open()</code>是初始化那些文件之类的（最后指纹识别的结果是写入文件）</p><p>后面三个if，其实就是三种识别模式，分别是ip地址，URL，文件批量识别</p><p>这里用的是 ff14 wiki 作为测试样本，所以是第二个，进入<code>FlagUrl()</code></p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">FlagUrl</span><span class="params">(op *os.File, uri <span class="type">string</span>, Args <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>{})</span></span> {</span><br><span class="line">uri, scheme, host, port, err := parse.UriParse(uri)</span><br><span class="line"><span class="keyword">if</span> logger.DebugError(err) {</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> res <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>{}</span><br><span class="line"><span class="comment">//Args["FlagMode"] = scheme</span></span><br><span class="line"><span class="keyword">switch</span> scheme {</span><br><span class="line"><span class="keyword">case</span> <span class="string">"http"</span>:</span><br><span class="line">res = protocol.DiscoverTcp(host, port, Args)</span><br><span class="line"><span class="keyword">case</span> <span class="string">"https"</span>:</span><br><span class="line">res = protocol.DiscoverTls(host, port, Args)</span><br><span class="line">}</span><br><span class="line"><span class="comment">//Args["FlagMode"] = ""</span></span><br><span class="line">parse.VerboseParse(res)</span><br><span class="line">output.Write(res, op)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><code>UriParse()</code>是将url解析为赋值的那几个变量，其中http和https分别给port赋值80和443</p><p>下面的switch语句，根据是否使用TLS采用不同方式去获取url页面</p><p>例子是https，进入<code>DiscoverTls()</code></p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DiscoverTls</span><span class="params">(host <span class="type">string</span>, port <span class="type">int</span>, Args <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>{})</span></span> <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>{} {</span><br><span class="line">result := setResult(host, port, Args)</span><br><span class="line">b, err := get.TlsProtocol(host, port, Args[<span class="string">"FlagTimeout"</span>].(<span class="type">int</span>))</span><br><span class="line"><span class="keyword">if</span> logger.DebugError(err) {</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">}</span><br><span class="line">result[<span class="string">"type"</span>] = <span class="string">"tls"</span></span><br><span class="line">result[<span class="string">"status"</span>] = <span class="string">"open"</span></span><br><span class="line">result[<span class="string">"banner.byte"</span>] = b</span><br><span class="line">result[<span class="string">"banner.string"</span>] = parse.ByteToStringParse1(b)</span><br><span class="line"><span class="keyword">if</span> JudgeTls(result, Args) {</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><code>setResult()</code>用于初始化result</p><p>然后是<code>TlsProtocol()</code></p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TlsProtocol</span><span class="params">(host <span class="type">string</span>, port <span class="type">int</span>, timeout <span class="type">int</span>)</span></span> ([]<span class="type">byte</span>, <span class="type">error</span>) {</span><br><span class="line">conn, err := proxy.ConnProxyTls(host, port, timeout)</span><br><span class="line"><span class="keyword">if</span> logger.DebugError(err) {</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">}</span><br><span class="line">msg := <span class="string">"GET /test HTTP/1.1\r\n\r\n"</span></span><br><span class="line">_, err = conn.Write([]<span class="type">byte</span>(msg))</span><br><span class="line"><span class="keyword">if</span> logger.DebugError(err) {</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">}</span><br><span class="line">_ = conn.SetDeadline(time.Now().Add(time.Duration(<span class="number">2</span>) * time.Second))</span><br><span class="line">reply := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">256</span>)</span><br><span class="line">_, err = conn.Read(reply)</span><br><span class="line"><span class="keyword">var</span> buffer [<span class="number">256</span>]<span class="type">byte</span></span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &amp;&amp; bytes.Equal(reply[:], buffer[:]) == <span class="literal">false</span> {</span><br><span class="line"><span class="keyword">if</span> conn != <span class="literal">nil</span> {</span><br><span class="line">_ = conn.Close()</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> reply, <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">conn, err = proxy.ConnProxyTcp(host, port, timeout)</span><br><span class="line"><span class="keyword">if</span> logger.DebugError(err) {</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">}</span><br><span class="line">msg = <span class="string">"GET /test HTTP/1.1\r\n\r\n"</span></span><br><span class="line">_, err = conn.Write([]<span class="type">byte</span>(msg))</span><br><span class="line"><span class="keyword">if</span> logger.DebugError(err) {</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">}</span><br><span class="line">_ = conn.SetDeadline(time.Now().Add(time.Duration(timeout) * time.Second))</span><br><span class="line">reply = <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">256</span>)</span><br><span class="line">_, _ = conn.Read(reply)</span><br><span class="line"><span class="keyword">if</span> conn != <span class="literal">nil</span> {</span><br><span class="line">_ = conn.Close()</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> reply, err</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>草<span class="github-emoji" style="display:inline;vertical-align:middle"><span>😅</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f605.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>如果调试的话TLS链接会超时<span class="github-emoji" style="display:inline;vertical-align:middle"><span>⌚</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/231a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> </p><p><strong>第二天继续</strong></p><p>上面那个函数好像不重要，在函数入口打断点，然后看返回值：</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20230220160249912.png" alt="image-20230221150952366"></p><p>b如下：</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20230228135112292.png" alt="image-20230221151003339"></p><p>应该是测试连通性用的，比较函数里发送的GET请求是 <code>/test</code></p><p>往下是 <code>JudgeTls()</code> 函数，这个函数执行完就有指纹识别的结果了。</p><p>进入该函数，会在 <code>TlsHTTPS(result, Args)</code> 处卡很久，然后 <code>printSuccess("TLS/HTTPS", result)</code>出结果</p><p>跟进 <code>TlsHTTPS()</code></p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TlsHTTPS</span><span class="params">(result <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>{}, Args <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>{})</span></span> <span class="type">bool</span> {</span><br><span class="line"><span class="keyword">var</span> buff []<span class="type">byte</span></span><br><span class="line">buff, _ = result[<span class="string">"banner.byte"</span>].([]<span class="type">byte</span>)</span><br><span class="line">ok, err := regexp.Match(<span class="string">`^HTTP/\d.\d \d*`</span>, buff)<span class="comment">//正则，匹配开头部分</span></span><br><span class="line"><span class="keyword">if</span> logger.DebugError(err) {</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> ok {</span><br><span class="line">result[<span class="string">"protocol"</span>] = <span class="string">"https"</span></span><br><span class="line">httpResult, httpErr := httpIdentifyResult(result, Args)</span><br><span class="line"><span class="keyword">if</span> logger.DebugError(httpErr) {</span><br><span class="line">result[<span class="string">"banner.string"</span>] = <span class="string">"None"</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">}</span><br><span class="line">result[<span class="string">"banner.string"</span>] = httpResult[<span class="string">"http.title"</span>].(<span class="type">string</span>)</span><br><span class="line">u, err := url.Parse(httpResult[<span class="string">"http.target"</span>].(<span class="type">string</span>))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">result[<span class="string">"path"</span>] = <span class="string">""</span></span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">result[<span class="string">"path"</span>] = u.Path</span><br><span class="line">}</span><br><span class="line">r := httpResult[<span class="string">"http.result"</span>].(<span class="type">string</span>)</span><br><span class="line">c := fmt.Sprintf(<span class="string">"[%s]"</span>, logger.Purple(httpResult[<span class="string">"http.code"</span>].(<span class="type">string</span>)))</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(r) != <span class="number">0</span> {</span><br><span class="line">result[<span class="string">"identify.bool"</span>] = <span class="literal">true</span></span><br><span class="line">result[<span class="string">"identify.string"</span>] = fmt.Sprintf(<span class="string">"%s %s"</span>, c, r)</span><br><span class="line">result[<span class="string">"note"</span>] = httpResult[<span class="string">"http.target"</span>].(<span class="type">string</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">result[<span class="string">"identify.bool"</span>] = <span class="literal">true</span></span><br><span class="line">result[<span class="string">"identify.string"</span>] = c</span><br><span class="line">result[<span class="string">"note"</span>] = httpResult[<span class="string">"http.target"</span>].(<span class="type">string</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>关键函数<code>httpResult, httpErr := httpIdentifyResult(result, Args)</code></p><p>跟进：</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">httpIdentifyResult</span><span class="params">(result <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>{}, Args <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>{})</span></span> (<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>{}, <span class="type">error</span>) {</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    省略一些处理URL的函数，这里是URL参数为空则重新构造一个URL</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> httpType <span class="type">string</span></span><br><span class="line"><span class="keyword">var</span> httpCode <span class="type">string</span></span><br><span class="line"><span class="keyword">var</span> httpResult <span class="type">string</span></span><br><span class="line"><span class="keyword">var</span> httpUrl <span class="type">string</span></span><br><span class="line"><span class="keyword">var</span> httpTitle <span class="type">string</span></span><br><span class="line">r, err := identify(targetUrl, timeout)</span><br><span class="line"><span class="keyword">if</span> logger.DebugError(err) {</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span> _, results := <span class="keyword">range</span> r {</span><br><span class="line">httpType = results.Type</span><br><span class="line">httpCode = results.RespCode</span><br><span class="line">httpResult = results.Result</span><br><span class="line">httpUrl = results.Url</span><br><span class="line">httpTitle = results.Title</span><br><span class="line">}</span><br><span class="line"><span class="comment">/*处理返回值，省略*/</span></span><br><span class="line"><span class="keyword">return</span> res, <span class="literal">nil</span></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>关键在函数 <code>identify(targetUrl, timeout)</code> 中！！！</p><p>::</p><h2 id="重点实现函数"><a href="#重点实现函数" class="headerlink" title="重点实现函数"></a>重点实现函数</h2><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">identify</span><span class="params">(url <span class="type">string</span>, timeout <span class="type">int</span>)</span></span> ([]IdentifyResult, <span class="type">error</span>) {</span><br><span class="line"><span class="comment">/*省略变量声明*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//默认请求？返回值有header和iconhash</span></span><br><span class="line">R, err := defaultRequests(url, timeout)</span><br><span class="line"><span class="comment">/*省略一些变量赋值*/</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// start identify</span></span><br><span class="line"><span class="keyword">var</span> succes_type <span class="type">string</span></span><br><span class="line"><span class="keyword">var</span> identify_result <span class="type">string</span></span><br><span class="line"><span class="keyword">type</span> Identify_Result <span class="keyword">struct</span> {</span><br><span class="line">Name <span class="type">string</span></span><br><span class="line">Rank <span class="type">int</span></span><br><span class="line">Type <span class="type">string</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> IdentifyData []Identify_Result</span><br><span class="line"><span class="keyword">for</span> _, rule := <span class="keyword">range</span> configs.RuleData {</span><br><span class="line"><span class="keyword">if</span> rule.Http.ReqMethod != <span class="string">""</span> {</span><br><span class="line">r, err := customRequests(url, timeout, rule.Http.ReqMethod, rule.Http.ReqPath, rule.Http.ReqHeader, rule.Http.ReqBody)</span><br><span class="line"><span class="keyword">if</span> logger.DebugError(err) {</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, resp := <span class="keyword">range</span> r {</span><br><span class="line">CustomRespBody = resp.RespBody</span><br><span class="line">CustomRespHeader = resp.RespHeader</span><br><span class="line">CustomRespCode = resp.RespStatusCode</span><br><span class="line">CustomRespTitle = resp.RespTitle</span><br><span class="line">CustomTarget = resp.Url</span><br><span class="line">CustomFavicon = resp.faviconMd5</span><br><span class="line">}</span><br><span class="line">url = CustomTarget</span><br><span class="line">Favicon = CustomFavicon</span><br><span class="line">RespBody = CustomRespBody</span><br><span class="line">RespHeader = CustomRespHeader</span><br><span class="line">RespCode = CustomRespCode</span><br><span class="line">RespTitle = CustomRespTitle</span><br><span class="line"><span class="comment">// If the http request fails, then RespBody and RespHeader are both null</span></span><br><span class="line"><span class="comment">// At this time, it is considered that the url does not exist</span></span><br><span class="line"><span class="keyword">if</span> RespBody == RespHeader {</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> rule.Mode == <span class="string">""</span> {</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(regexp.MustCompile(<span class="string">"header"</span>).FindAllStringIndex(rule.Type, <span class="number">-1</span>)) == <span class="number">1</span> {</span><br><span class="line"><span class="keyword">if</span> checkHeader(url, RespHeader, rule.Rule.InHeader, rule.Name, RespTitle, RespCode) == <span class="literal">true</span> {</span><br><span class="line">IdentifyData = <span class="built_in">append</span>(IdentifyData, Identify_Result {Name: rule.Name, Rank: rule.Rank, Type: rule.Type})</span><br><span class="line">RequestRule = <span class="string">"CustomRequest"</span></span><br><span class="line">succes_type = rule.Type</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(regexp.MustCompile(<span class="string">"body"</span>).FindAllStringIndex(rule.Type, <span class="number">-1</span>)) == <span class="number">1</span> {</span><br><span class="line"><span class="keyword">if</span> checkBody(url, RespBody, rule.Rule.InBody, rule.Name, RespTitle, RespCode) == <span class="literal">true</span> {</span><br><span class="line">IdentifyData = <span class="built_in">append</span>(IdentifyData, Identify_Result {Name: rule.Name, Rank: rule.Rank, Type: rule.Type})</span><br><span class="line">succes_type = rule.Type</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(regexp.MustCompile(<span class="string">"ico"</span>).FindAllStringIndex(rule.Type, <span class="number">-1</span>)) == <span class="number">1</span> {</span><br><span class="line"><span class="keyword">if</span> checkFavicon(Favicon, rule.Rule.InIcoMd5) == <span class="literal">true</span> {</span><br><span class="line">IdentifyData = <span class="built_in">append</span>(IdentifyData, Identify_Result {Name: rule.Name, Rank: rule.Rank, Type: rule.Type})</span><br><span class="line">succes_type = rule.Type</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> rule.Mode == <span class="string">"or"</span> {</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(regexp.MustCompile(<span class="string">"header"</span>).FindAllStringIndex(rule.Type, <span class="number">-1</span>)) == <span class="number">1</span> {</span><br><span class="line"><span class="keyword">if</span> checkHeader(url, RespHeader, rule.Rule.InHeader, rule.Name, RespTitle, RespCode) == <span class="literal">true</span> {</span><br><span class="line">IdentifyData = <span class="built_in">append</span>(IdentifyData, Identify_Result {Name: rule.Name, Rank: rule.Rank, Type: rule.Type})</span><br><span class="line">succes_type = rule.Type</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(regexp.MustCompile(<span class="string">"body"</span>).FindAllStringIndex(rule.Type, <span class="number">-1</span>)) == <span class="number">1</span> {</span><br><span class="line"><span class="keyword">if</span> checkBody(url, RespBody, rule.Rule.InBody, rule.Name, RespTitle, RespCode) == <span class="literal">true</span> {</span><br><span class="line">IdentifyData = <span class="built_in">append</span>(IdentifyData, Identify_Result {Name: rule.Name, Rank: rule.Rank, Type: rule.Type})</span><br><span class="line">succes_type = rule.Type</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(regexp.MustCompile(<span class="string">"ico"</span>).FindAllStringIndex(rule.Type, <span class="number">-1</span>)) == <span class="number">1</span> {</span><br><span class="line"><span class="keyword">if</span> checkFavicon(Favicon, rule.Rule.InIcoMd5) == <span class="literal">true</span> {</span><br><span class="line">IdentifyData = <span class="built_in">append</span>(IdentifyData, Identify_Result {Name: rule.Name, Rank: rule.Rank, Type: rule.Type})</span><br><span class="line">succes_type = rule.Type</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> rule.Mode == <span class="string">"and"</span> {</span><br><span class="line">index := <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(regexp.MustCompile(<span class="string">"header"</span>).FindAllStringIndex(rule.Type, <span class="number">-1</span>)) == <span class="number">1</span> {</span><br><span class="line"><span class="keyword">if</span> checkHeader(url, RespHeader, rule.Rule.InHeader, rule.Name, RespTitle, RespCode) == <span class="literal">true</span> {</span><br><span class="line">index = index + <span class="number">1</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(regexp.MustCompile(<span class="string">"body"</span>).FindAllStringIndex(rule.Type, <span class="number">-1</span>)) == <span class="number">1</span> {</span><br><span class="line"><span class="keyword">if</span> checkBody(url, RespBody, rule.Rule.InBody, rule.Name, RespTitle, RespCode) == <span class="literal">true</span> {</span><br><span class="line">index = index + <span class="number">1</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(regexp.MustCompile(<span class="string">"ico"</span>).FindAllStringIndex(rule.Type, <span class="number">-1</span>)) == <span class="number">1</span> {</span><br><span class="line"><span class="keyword">if</span> checkFavicon(Favicon, rule.Rule.InIcoMd5) == <span class="literal">true</span> {</span><br><span class="line">index = index + <span class="number">1</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> index == <span class="number">2</span> {</span><br><span class="line">IdentifyData = <span class="built_in">append</span>(IdentifyData, Identify_Result {Name: rule.Name, Rank: rule.Rank, Type: rule.Type})</span><br><span class="line">RequestRule = <span class="string">"CustomRequest"</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> rule.Mode == <span class="string">"and|and"</span> {</span><br><span class="line">index := <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(regexp.MustCompile(<span class="string">"header"</span>).FindAllStringIndex(rule.Type, <span class="number">-1</span>)) == <span class="number">1</span> {</span><br><span class="line"><span class="keyword">if</span> checkHeader(url, RespHeader, rule.Rule.InHeader, rule.Name, RespTitle, RespCode) == <span class="literal">true</span> {</span><br><span class="line">index = index + <span class="number">1</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(regexp.MustCompile(<span class="string">"body"</span>).FindAllStringIndex(rule.Type, <span class="number">-1</span>)) == <span class="number">1</span> {</span><br><span class="line"><span class="keyword">if</span> checkBody(url, RespBody, rule.Rule.InBody, rule.Name, RespTitle, RespCode) == <span class="literal">true</span> {</span><br><span class="line">index = index + <span class="number">1</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(regexp.MustCompile(<span class="string">"ico"</span>).FindAllStringIndex(rule.Type, <span class="number">-1</span>)) == <span class="number">1</span> {</span><br><span class="line"><span class="keyword">if</span> checkFavicon(Favicon, rule.Rule.InIcoMd5) == <span class="literal">true</span> {</span><br><span class="line">index = index + <span class="number">1</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> index == <span class="number">3</span> {</span><br><span class="line">IdentifyData = <span class="built_in">append</span>(IdentifyData, Identify_Result {Name: rule.Name, Rank: rule.Rank, Type: rule.Type})</span><br><span class="line">RequestRule = <span class="string">"CustomRequest"</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> rule.Mode == <span class="string">"or|or"</span> {</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(regexp.MustCompile(<span class="string">"header"</span>).FindAllStringIndex(rule.Type, <span class="number">-1</span>)) == <span class="number">1</span> {</span><br><span class="line"><span class="keyword">if</span> checkHeader(url, RespHeader, rule.Rule.InHeader, rule.Name, RespTitle, RespCode) == <span class="literal">true</span> {</span><br><span class="line">IdentifyData = <span class="built_in">append</span>(IdentifyData, Identify_Result {Name: rule.Name, Rank: rule.Rank, Type: rule.Type})</span><br><span class="line">succes_type = rule.Type</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(regexp.MustCompile(<span class="string">"body"</span>).FindAllStringIndex(rule.Type, <span class="number">-1</span>)) == <span class="number">1</span> {</span><br><span class="line"><span class="keyword">if</span> checkBody(url, RespBody, rule.Rule.InBody, rule.Name, RespTitle, RespCode) == <span class="literal">true</span> {</span><br><span class="line">IdentifyData = <span class="built_in">append</span>(IdentifyData, Identify_Result {Name: rule.Name, Rank: rule.Rank, Type: rule.Type})</span><br><span class="line">succes_type = rule.Type</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(regexp.MustCompile(<span class="string">"ico"</span>).FindAllStringIndex(rule.Type, <span class="number">-1</span>)) == <span class="number">1</span> {</span><br><span class="line"><span class="keyword">if</span> checkFavicon(Favicon, rule.Rule.InIcoMd5) == <span class="literal">true</span> {</span><br><span class="line">IdentifyData = <span class="built_in">append</span>(IdentifyData, Identify_Result {Name: rule.Name, Rank: rule.Rank, Type: rule.Type})</span><br><span class="line">succes_type = rule.Type</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> rule.Mode == <span class="string">"and|or"</span> {</span><br><span class="line">grep := regexp.MustCompile(<span class="string">"(.*)\\|(.*)\\|(.*)"</span>)</span><br><span class="line">all_type := grep.FindStringSubmatch(rule.Type)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(regexp.MustCompile(<span class="string">"header"</span>).FindAllStringIndex(all_type[<span class="number">1</span>], <span class="number">-1</span>)) == <span class="number">1</span> {</span><br><span class="line"><span class="keyword">if</span> checkHeader(url, RespHeader, rule.Rule.InHeader, rule.Name, RespTitle, RespCode) == checkBody(url, RespBody, rule.Rule.InBody, rule.Name, RespTitle, RespCode) {</span><br><span class="line">IdentifyData = <span class="built_in">append</span>(IdentifyData, Identify_Result {Name: rule.Name, Rank: rule.Rank, Type: rule.Type})</span><br><span class="line">succes_type = rule.Type</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> checkHeader(url, RespHeader, rule.Rule.InHeader, rule.Name, RespTitle, RespCode) == checkFavicon(Favicon, rule.Rule.InIcoMd5) {</span><br><span class="line">IdentifyData = <span class="built_in">append</span>(IdentifyData, Identify_Result {Name: rule.Name, Rank: rule.Rank, Type: rule.Type})</span><br><span class="line">succes_type = rule.Type</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(regexp.MustCompile(<span class="string">"body"</span>).FindAllStringIndex(all_type[<span class="number">1</span>], <span class="number">-1</span>)) == <span class="number">1</span> {</span><br><span class="line"><span class="keyword">if</span> checkBody(url, RespBody, rule.Rule.InBody, rule.Name, RespTitle, RespCode) == checkHeader(url, RespHeader, rule.Rule.InHeader, rule.Name, RespTitle, RespCode) {</span><br><span class="line">IdentifyData = <span class="built_in">append</span>(IdentifyData, Identify_Result {Name: rule.Name, Rank: rule.Rank, Type: rule.Type})</span><br><span class="line">succes_type = rule.Type</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> checkBody(url, RespBody, rule.Rule.InBody, rule.Name, RespTitle, RespCode) == checkFavicon(Favicon, rule.Rule.InIcoMd5) {</span><br><span class="line">IdentifyData = <span class="built_in">append</span>(IdentifyData, Identify_Result {Name: rule.Name, Rank: rule.Rank, Type: rule.Type})</span><br><span class="line">succes_type = rule.Type</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(regexp.MustCompile(<span class="string">"ico"</span>).FindAllStringIndex(all_type[<span class="number">1</span>], <span class="number">-1</span>)) == <span class="number">1</span> {</span><br><span class="line"><span class="keyword">if</span> checkFavicon(Favicon, rule.Rule.InIcoMd5) == checkHeader(url, RespHeader, rule.Rule.InHeader, rule.Name, RespTitle, RespCode) {</span><br><span class="line">IdentifyData = <span class="built_in">append</span>(IdentifyData, Identify_Result {Name: rule.Name, Rank: rule.Rank, Type: rule.Type})</span><br><span class="line">succes_type = rule.Type</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> checkFavicon(Favicon, rule.Rule.InIcoMd5) == checkBody(url, RespBody, rule.Rule.InBody, rule.Name, RespTitle, RespCode) {</span><br><span class="line">IdentifyData = <span class="built_in">append</span>(IdentifyData, Identify_Result {Name: rule.Name, Rank: rule.Rank, Type: rule.Type})</span><br><span class="line">succes_type = rule.Type</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> rule.Mode == <span class="string">"or|and"</span> {</span><br><span class="line">grep := regexp.MustCompile(<span class="string">"(.*)\\|(.*)\\|(.*)"</span>)</span><br><span class="line">all_type := grep.FindStringSubmatch(rule.Type)</span><br><span class="line">fmt.Println(all_type)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(regexp.MustCompile(<span class="string">"header"</span>).FindAllStringIndex(all_type[<span class="number">3</span>], <span class="number">-1</span>)) == <span class="number">1</span> {</span><br><span class="line"><span class="keyword">if</span> checkHeader(url, RespHeader, rule.Rule.InHeader, rule.Name, RespTitle, RespCode) == checkBody(url, RespBody, rule.Rule.InBody, rule.Name, RespTitle, RespCode) {</span><br><span class="line">IdentifyData = <span class="built_in">append</span>(IdentifyData, Identify_Result {Name: rule.Name, Rank: rule.Rank, Type: rule.Type})</span><br><span class="line">succes_type = rule.Type</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> checkHeader(url, RespHeader, rule.Rule.InHeader, rule.Name, RespTitle, RespCode) == checkFavicon(Favicon, rule.Rule.InIcoMd5) {</span><br><span class="line">IdentifyData = <span class="built_in">append</span>(IdentifyData, Identify_Result {Name: rule.Name, Rank: rule.Rank, Type: rule.Type})</span><br><span class="line">succes_type = rule.Type</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(regexp.MustCompile(<span class="string">"body"</span>).FindAllStringIndex(all_type[<span class="number">3</span>], <span class="number">-1</span>)) == <span class="number">1</span> {</span><br><span class="line"><span class="keyword">if</span> checkBody(url, RespBody, rule.Rule.InBody, rule.Name, RespTitle, RespCode) == checkHeader(url, RespHeader, rule.Rule.InHeader, rule.Name, RespTitle, RespCode) {</span><br><span class="line">IdentifyData = <span class="built_in">append</span>(IdentifyData, Identify_Result {Name: rule.Name, Rank: rule.Rank, Type: rule.Type})</span><br><span class="line">succes_type = rule.Type</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> checkBody(url, RespBody, rule.Rule.InBody, rule.Name, RespTitle, RespCode) == checkFavicon(Favicon, rule.Rule.InIcoMd5) {</span><br><span class="line">IdentifyData = <span class="built_in">append</span>(IdentifyData, Identify_Result {Name: rule.Name, Rank: rule.Rank, Type: rule.Type})</span><br><span class="line">succes_type = rule.Type</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(regexp.MustCompile(<span class="string">"ico"</span>).FindAllStringIndex(all_type[<span class="number">3</span>], <span class="number">-1</span>)) == <span class="number">1</span> {</span><br><span class="line"><span class="keyword">if</span> checkFavicon(Favicon, rule.Rule.InIcoMd5) == checkHeader(url, RespHeader, rule.Rule.InHeader, rule.Name, RespTitle, RespCode) {</span><br><span class="line">IdentifyData = <span class="built_in">append</span>(IdentifyData, Identify_Result {Name: rule.Name, Rank: rule.Rank, Type: rule.Type})</span><br><span class="line">succes_type = rule.Type</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> checkFavicon(Favicon, rule.Rule.InIcoMd5) == checkBody(url, RespBody, rule.Rule.InBody, rule.Name, RespTitle, RespCode) {</span><br><span class="line">IdentifyData = <span class="built_in">append</span>(IdentifyData, Identify_Result {Name: rule.Name, Rank: rule.Rank, Type: rule.Type})</span><br><span class="line">succes_type = rule.Type</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">} <span class="keyword">else</span> { <span class="comment">// Default Request Result</span></span><br><span class="line">url = DefaultTarget</span><br><span class="line">Favicon = DefaultFavicon</span><br><span class="line">RespBody = DefaultRespBody</span><br><span class="line">RespHeader = DefaultRespHeader</span><br><span class="line">RespCode = DefaultRespCode</span><br><span class="line">RespTitle = DefaultRespTitle</span><br><span class="line"><span class="comment">// If the http request fails, then RespBody and RespHeader are both null</span></span><br><span class="line"><span class="comment">// At this time, it is considered that the url does not exist</span></span><br><span class="line"><span class="keyword">if</span> RespBody == RespHeader {</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> rule.Mode == <span class="string">""</span> {</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(regexp.MustCompile(<span class="string">"header"</span>).FindAllStringIndex(rule.Type, <span class="number">-1</span>)) == <span class="number">1</span> {</span><br><span class="line"><span class="keyword">if</span> checkHeader(url, RespHeader, rule.Rule.InHeader, rule.Name, RespTitle, RespCode) == <span class="literal">true</span> {</span><br><span class="line">IdentifyData = <span class="built_in">append</span>(IdentifyData, Identify_Result {Name: rule.Name, Rank: rule.Rank, Type: rule.Type})</span><br><span class="line">RequestRule = <span class="string">"DefaultRequest"</span></span><br><span class="line">succes_type = rule.Type</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(regexp.MustCompile(<span class="string">"body"</span>).FindAllStringIndex(rule.Type, <span class="number">-1</span>)) == <span class="number">1</span> {</span><br><span class="line"><span class="keyword">if</span> checkBody(url, RespBody, rule.Rule.InBody, rule.Name, RespTitle, RespCode) == <span class="literal">true</span> {</span><br><span class="line">IdentifyData = <span class="built_in">append</span>(IdentifyData, Identify_Result {Name: rule.Name, Rank: rule.Rank, Type: rule.Type})</span><br><span class="line">RequestRule = <span class="string">"DefaultRequest"</span></span><br><span class="line">succes_type = rule.Type</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(regexp.MustCompile(<span class="string">"ico"</span>).FindAllStringIndex(rule.Type, <span class="number">-1</span>)) == <span class="number">1</span> {</span><br><span class="line"><span class="keyword">if</span> checkFavicon(Favicon, rule.Rule.InIcoMd5) == <span class="literal">true</span> {</span><br><span class="line">IdentifyData = <span class="built_in">append</span>(IdentifyData, Identify_Result {Name: rule.Name, Rank: rule.Rank, Type: rule.Type})</span><br><span class="line">RequestRule = <span class="string">"DefaultRequest"</span></span><br><span class="line">succes_type = rule.Type</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> rule.Mode == <span class="string">"or"</span> {</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(regexp.MustCompile(<span class="string">"header"</span>).FindAllStringIndex(rule.Type, <span class="number">-1</span>)) == <span class="number">1</span> {</span><br><span class="line"><span class="keyword">if</span> checkHeader(url, RespHeader, rule.Rule.InHeader, rule.Name, RespTitle, RespCode) == <span class="literal">true</span> {</span><br><span class="line">IdentifyData = <span class="built_in">append</span>(IdentifyData, Identify_Result {Name: rule.Name, Rank: rule.Rank, Type: rule.Type})</span><br><span class="line">RequestRule = <span class="string">"DefaultRequest"</span></span><br><span class="line">succes_type = rule.Type</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(regexp.MustCompile(<span class="string">"body"</span>).FindAllStringIndex(rule.Type, <span class="number">-1</span>)) == <span class="number">1</span> {</span><br><span class="line"><span class="keyword">if</span> checkBody(url, RespBody, rule.Rule.InBody, rule.Name, RespTitle, RespCode) == <span class="literal">true</span> {</span><br><span class="line">IdentifyData = <span class="built_in">append</span>(IdentifyData, Identify_Result {Name: rule.Name, Rank: rule.Rank, Type: rule.Type})</span><br><span class="line">RequestRule = <span class="string">"DefaultRequest"</span></span><br><span class="line">succes_type = rule.Type</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(regexp.MustCompile(<span class="string">"ico"</span>).FindAllStringIndex(rule.Type, <span class="number">-1</span>)) == <span class="number">1</span> {</span><br><span class="line"><span class="keyword">if</span> checkFavicon(Favicon, rule.Rule.InIcoMd5) == <span class="literal">true</span> {</span><br><span class="line">IdentifyData = <span class="built_in">append</span>(IdentifyData, Identify_Result {Name: rule.Name, Rank: rule.Rank, Type: rule.Type})</span><br><span class="line">RequestRule = <span class="string">"DefaultRequest"</span></span><br><span class="line">succes_type = rule.Type</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> rule.Mode == <span class="string">"and"</span> {</span><br><span class="line">index := <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(regexp.MustCompile(<span class="string">"header"</span>).FindAllStringIndex(rule.Type, <span class="number">-1</span>)) == <span class="number">1</span> {</span><br><span class="line"><span class="keyword">if</span> checkHeader(url, RespHeader, rule.Rule.InHeader, rule.Name, RespTitle, RespCode) == <span class="literal">true</span> {</span><br><span class="line">index = index + <span class="number">1</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(regexp.MustCompile(<span class="string">"body"</span>).FindAllStringIndex(rule.Type, <span class="number">-1</span>)) == <span class="number">1</span> {</span><br><span class="line"><span class="keyword">if</span> checkBody(url, RespBody, rule.Rule.InBody, rule.Name, RespTitle, RespCode) == <span class="literal">true</span> {</span><br><span class="line">index = index + <span class="number">1</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(regexp.MustCompile(<span class="string">"ico"</span>).FindAllStringIndex(rule.Type, <span class="number">-1</span>)) == <span class="number">1</span> {</span><br><span class="line"><span class="keyword">if</span> checkFavicon(Favicon, rule.Rule.InIcoMd5) == <span class="literal">true</span> {</span><br><span class="line">index = index + <span class="number">1</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> index == <span class="number">2</span> {</span><br><span class="line">IdentifyData = <span class="built_in">append</span>(IdentifyData, Identify_Result {Name: rule.Name, Rank: rule.Rank, Type: rule.Type})</span><br><span class="line">RequestRule = <span class="string">"DefaultRequest"</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> rule.Mode == <span class="string">"and|and"</span> {</span><br><span class="line">index := <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(regexp.MustCompile(<span class="string">"header"</span>).FindAllStringIndex(rule.Type, <span class="number">-1</span>)) == <span class="number">1</span> {</span><br><span class="line"><span class="keyword">if</span> checkHeader(url, RespHeader, rule.Rule.InHeader, rule.Name, RespTitle, RespCode) == <span class="literal">true</span> {</span><br><span class="line">index = index + <span class="number">1</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(regexp.MustCompile(<span class="string">"body"</span>).FindAllStringIndex(rule.Type, <span class="number">-1</span>)) == <span class="number">1</span> {</span><br><span class="line"><span class="keyword">if</span> checkBody(url, RespBody, rule.Rule.InBody, rule.Name, RespTitle, RespCode) == <span class="literal">true</span> {</span><br><span class="line">index = index + <span class="number">1</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(regexp.MustCompile(<span class="string">"ico"</span>).FindAllStringIndex(rule.Type, <span class="number">-1</span>)) == <span class="number">1</span> {</span><br><span class="line"><span class="keyword">if</span> checkFavicon(Favicon, rule.Rule.InIcoMd5) == <span class="literal">true</span> {</span><br><span class="line">index = index + <span class="number">1</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> index == <span class="number">3</span> {</span><br><span class="line">IdentifyData = <span class="built_in">append</span>(IdentifyData, Identify_Result {Name: rule.Name, Rank: rule.Rank, Type: rule.Type})</span><br><span class="line">RequestRule = <span class="string">"DefaultRequest"</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> rule.Mode == <span class="string">"or|or"</span> {</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(regexp.MustCompile(<span class="string">"header"</span>).FindAllStringIndex(rule.Type, <span class="number">-1</span>)) == <span class="number">1</span> {</span><br><span class="line"><span class="keyword">if</span> checkHeader(url, RespHeader, rule.Rule.InHeader, rule.Name, RespTitle, RespCode) == <span class="literal">true</span> {</span><br><span class="line">IdentifyData = <span class="built_in">append</span>(IdentifyData, Identify_Result {Name: rule.Name, Rank: rule.Rank, Type: rule.Type})</span><br><span class="line">RequestRule = <span class="string">"DefaultRequest"</span></span><br><span class="line">succes_type = rule.Type</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(regexp.MustCompile(<span class="string">"body"</span>).FindAllStringIndex(rule.Type, <span class="number">-1</span>)) == <span class="number">1</span> {</span><br><span class="line"><span class="keyword">if</span> checkBody(url, RespBody, rule.Rule.InBody, rule.Name, RespTitle, RespCode) == <span class="literal">true</span> {</span><br><span class="line">IdentifyData = <span class="built_in">append</span>(IdentifyData, Identify_Result {Name: rule.Name, Rank: rule.Rank, Type: rule.Type})</span><br><span class="line">RequestRule = <span class="string">"DefaultRequest"</span></span><br><span class="line">succes_type = rule.Type</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(regexp.MustCompile(<span class="string">"ico"</span>).FindAllStringIndex(rule.Type, <span class="number">-1</span>)) == <span class="number">1</span> {</span><br><span class="line"><span class="keyword">if</span> checkFavicon(Favicon, rule.Rule.InIcoMd5) == <span class="literal">true</span> {</span><br><span class="line">IdentifyData = <span class="built_in">append</span>(IdentifyData, Identify_Result {Name: rule.Name, Rank: rule.Rank, Type: rule.Type})</span><br><span class="line">RequestRule = <span class="string">"DefaultRequest"</span></span><br><span class="line">succes_type = rule.Type</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> rule.Mode == <span class="string">"and|or"</span> {</span><br><span class="line">grep := regexp.MustCompile(<span class="string">"(.*)\\|(.*)\\|(.*)"</span>)</span><br><span class="line">all_type := grep.FindStringSubmatch(rule.Type)</span><br><span class="line">fmt.Println(all_type)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(regexp.MustCompile(<span class="string">"header"</span>).FindAllStringIndex(all_type[<span class="number">1</span>], <span class="number">-1</span>)) == <span class="number">1</span> {</span><br><span class="line"><span class="keyword">if</span> checkHeader(url, RespHeader, rule.Rule.InHeader, rule.Name, RespTitle, RespCode) == checkBody(url, RespBody, rule.Rule.InBody, rule.Name, RespTitle, RespCode) {</span><br><span class="line">IdentifyData = <span class="built_in">append</span>(IdentifyData, Identify_Result {Name: rule.Name, Rank: rule.Rank, Type: rule.Type})</span><br><span class="line">RequestRule = <span class="string">"DefaultRequest"</span></span><br><span class="line">succes_type = rule.Type</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> checkHeader(url, RespHeader, rule.Rule.InHeader, rule.Name, RespTitle, RespCode) == checkFavicon(Favicon, rule.Rule.InIcoMd5) {</span><br><span class="line">IdentifyData = <span class="built_in">append</span>(IdentifyData, Identify_Result {Name: rule.Name, Rank: rule.Rank, Type: rule.Type})</span><br><span class="line">RequestRule = <span class="string">"DefaultRequest"</span></span><br><span class="line">succes_type = rule.Type</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(regexp.MustCompile(<span class="string">"body"</span>).FindAllStringIndex(all_type[<span class="number">1</span>], <span class="number">-1</span>)) == <span class="number">1</span> {</span><br><span class="line"><span class="keyword">if</span> checkBody(url, RespBody, rule.Rule.InBody, rule.Name, RespTitle, RespCode) == checkHeader(url, RespHeader, rule.Rule.InHeader, rule.Name, RespTitle, RespCode) {</span><br><span class="line">IdentifyData = <span class="built_in">append</span>(IdentifyData, Identify_Result {Name: rule.Name, Rank: rule.Rank, Type: rule.Type})</span><br><span class="line">RequestRule = <span class="string">"DefaultRequest"</span></span><br><span class="line">succes_type = rule.Type</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> checkBody(url, RespBody, rule.Rule.InBody, rule.Name, RespTitle, RespCode) == checkFavicon(Favicon, rule.Rule.InIcoMd5) {</span><br><span class="line">IdentifyData = <span class="built_in">append</span>(IdentifyData, Identify_Result {Name: rule.Name, Rank: rule.Rank, Type: rule.Type})</span><br><span class="line">RequestRule = <span class="string">"DefaultRequest"</span></span><br><span class="line">succes_type = rule.Type</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(regexp.MustCompile(<span class="string">"ico"</span>).FindAllStringIndex(all_type[<span class="number">1</span>], <span class="number">-1</span>)) == <span class="number">1</span> {</span><br><span class="line"><span class="keyword">if</span> checkFavicon(Favicon, rule.Rule.InIcoMd5) == checkHeader(url, RespHeader, rule.Rule.InHeader, rule.Name, RespTitle, RespCode) {</span><br><span class="line">IdentifyData = <span class="built_in">append</span>(IdentifyData, Identify_Result {Name: rule.Name, Rank: rule.Rank, Type: rule.Type})</span><br><span class="line">RequestRule = <span class="string">"DefaultRequest"</span></span><br><span class="line">succes_type = rule.Type</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> checkFavicon(Favicon, rule.Rule.InIcoMd5) == checkBody(url, RespBody, rule.Rule.InBody, rule.Name, RespTitle, RespCode) {</span><br><span class="line">IdentifyData = <span class="built_in">append</span>(IdentifyData, Identify_Result {Name: rule.Name, Rank: rule.Rank, Type: rule.Type})</span><br><span class="line">RequestRule = <span class="string">"DefaultRequest"</span></span><br><span class="line">succes_type = rule.Type</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> rule.Mode == <span class="string">"or|and"</span> {</span><br><span class="line">grep := regexp.MustCompile(<span class="string">"(.*)\\|(.*)\\|(.*)"</span>)</span><br><span class="line">all_type := grep.FindStringSubmatch(rule.Type)</span><br><span class="line">fmt.Println(all_type)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(regexp.MustCompile(<span class="string">"header"</span>).FindAllStringIndex(all_type[<span class="number">3</span>], <span class="number">-1</span>)) == <span class="number">1</span> {</span><br><span class="line"><span class="keyword">if</span> checkHeader(url, RespHeader, rule.Rule.InHeader, rule.Name, RespTitle, RespCode) == checkBody(url, RespBody, rule.Rule.InBody, rule.Name, RespTitle, RespCode) {</span><br><span class="line">IdentifyData = <span class="built_in">append</span>(IdentifyData, Identify_Result {Name: rule.Name, Rank: rule.Rank, Type: rule.Type})</span><br><span class="line">RequestRule = <span class="string">"DefaultRequest"</span></span><br><span class="line">succes_type = rule.Type</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> checkHeader(url, RespHeader, rule.Rule.InHeader, rule.Name, RespTitle, RespCode) == checkFavicon(Favicon, rule.Rule.InIcoMd5) {</span><br><span class="line">IdentifyData = <span class="built_in">append</span>(IdentifyData, Identify_Result {Name: rule.Name, Rank: rule.Rank, Type: rule.Type})</span><br><span class="line">RequestRule = <span class="string">"DefaultRequest"</span></span><br><span class="line">succes_type = rule.Type</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(regexp.MustCompile(<span class="string">"body"</span>).FindAllStringIndex(all_type[<span class="number">3</span>], <span class="number">-1</span>)) == <span class="number">1</span> {</span><br><span class="line"><span class="keyword">if</span> checkBody(url, RespBody, rule.Rule.InBody, rule.Name, RespTitle, RespCode) == checkHeader(url, RespHeader, rule.Rule.InHeader, rule.Name, RespTitle, RespCode) {</span><br><span class="line">IdentifyData = <span class="built_in">append</span>(IdentifyData, Identify_Result {Name: rule.Name, Rank: rule.Rank, Type: rule.Type})</span><br><span class="line">RequestRule = <span class="string">"DefaultRequest"</span></span><br><span class="line">succes_type = rule.Type</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> checkBody(url, RespBody, rule.Rule.InBody, rule.Name, RespTitle, RespCode) == checkFavicon(Favicon, rule.Rule.InIcoMd5) {</span><br><span class="line">IdentifyData = <span class="built_in">append</span>(IdentifyData, Identify_Result {Name: rule.Name, Rank: rule.Rank, Type: rule.Type})</span><br><span class="line">RequestRule = <span class="string">"DefaultRequest"</span></span><br><span class="line">succes_type = rule.Type</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(regexp.MustCompile(<span class="string">"ico"</span>).FindAllStringIndex(all_type[<span class="number">3</span>], <span class="number">-1</span>)) == <span class="number">1</span> {</span><br><span class="line"><span class="keyword">if</span> checkFavicon(Favicon, rule.Rule.InIcoMd5) == checkHeader(url, RespHeader, rule.Rule.InHeader, rule.Name, RespTitle, RespCode) {</span><br><span class="line">IdentifyData = <span class="built_in">append</span>(IdentifyData, Identify_Result {Name: rule.Name, Rank: rule.Rank, Type: rule.Type})</span><br><span class="line">RequestRule = <span class="string">"DefaultRequest"</span></span><br><span class="line">succes_type = rule.Type</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> checkFavicon(Favicon, rule.Rule.InIcoMd5) == checkBody(url, RespBody, rule.Rule.InBody, rule.Name, RespTitle, RespCode) {</span><br><span class="line">IdentifyData = <span class="built_in">append</span>(IdentifyData, Identify_Result {Name: rule.Name, Rank: rule.Rank, Type: rule.Type})</span><br><span class="line">RequestRule = <span class="string">"DefaultRequest"</span></span><br><span class="line">succes_type = rule.Type</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> RequestRule == <span class="string">"DefaultRequest"</span> {</span><br><span class="line">RespBody = DefaultRespBody</span><br><span class="line">RespHeader = DefaultRespHeader</span><br><span class="line">RespCode = DefaultRespCode</span><br><span class="line">RespTitle = DefaultRespTitle</span><br><span class="line">url = DefaultTarget</span><br><span class="line">} <span class="keyword">else</span> <span class="keyword">if</span> RequestRule == <span class="string">"CustomRequest"</span> {</span><br><span class="line">url = CustomTarget</span><br><span class="line">RespBody = CustomRespBody</span><br><span class="line">RespHeader = CustomRespHeader</span><br><span class="line">RespCode = CustomRespCode</span><br><span class="line">RespTitle = CustomRespTitle</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span> _, rs := <span class="keyword">range</span> IdentifyData {</span><br><span class="line"><span class="keyword">switch</span> rs.Rank {</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">identify_result += <span class="string">"["</span> + logger.LightYellow(rs.Name) + <span class="string">"]"</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">identify_result += <span class="string">"["</span> + logger.LightYellow(rs.Name) + <span class="string">"]"</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">identify_result += <span class="string">"["</span> + logger.LightRed(rs.Name) + <span class="string">"]"</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">r := strings.ReplaceAll(identify_result, <span class="string">"]["</span>, <span class="string">"] ["</span>)</span><br><span class="line">res := []IdentifyResult{{succes_type, RespCode, r,  url, RespTitle}}</span><br><span class="line"><span class="keyword">return</span> res, <span class="literal">nil</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>真的多，建议配合注释直接看代码</p><p>在FlagUrl函数中，区分了http和https，</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20230221151003339-16769634044521.png" alt="image-20230228135112292"></p><p>但是在<code>DiscoverTls</code>里，请求web页面的函数<code>TlsProtocol</code></p><p>在<code>proxy.ConnProxyTls</code>建立Tls连接后，如果出错的话会再建立了一个非Tls连接<code>proxy.ConnProxyTcp</code>，为什么，会有什么样的情况导致这个错误发生</p>]]></content>
      
      
      <categories>
          
          <category> 本科毕设 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 指纹识别 </tag>
            
            <tag> dismap </tag>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VScode launch.json的使用</title>
      <link href="/2023/02/19/VScode-launch-json%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/02/19/VScode-launch-json%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="VScode-launch-json的使用"><a href="#VScode-launch-json的使用" class="headerlink" title="VScode launch.json的使用"></a>VScode launch.json的使用</h2><p>今天在调试tide finger的代码，之前没写过python，配置一下python的调试环境。</p><p>用的是vscode+ubuntu+remote ssh环境</p><p>打开要调试的py文件，然后点左边的调试按钮：</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20230219134946278.png" alt="image-20230219134946278"></p><p>那个小虫子</p><p>然后点创建launch.json文件，有时可能会默认创建：<br>文件差不多如下：</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">{</span></span><br><span class="line">    <span class="comment">// 使用 IntelliSense 了解相关属性。 </span></span><br><span class="line">    <span class="comment">// 悬停以查看现有属性的描述。</span></span><br><span class="line">    <span class="comment">// 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span></span><br><span class="line">    <span class="attr">"version"</span><span class="punctuation">:</span> <span class="string">"0.2.0"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"configurations"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">{</span></span><br><span class="line">            <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"Python: 当前文件"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"type"</span><span class="punctuation">:</span> <span class="string">"python"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"request"</span><span class="punctuation">:</span> <span class="string">"launch"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"program"</span><span class="punctuation">:</span> <span class="string">"${file}"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"console"</span><span class="punctuation">:</span> <span class="string">"integratedTerminal"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"justMyCode"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"args"</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">"-u"</span><span class="punctuation">,</span> <span class="string">"https://ff14.huijiwiki.com/wiki/%E9%A6%96%E9%A1%B5"</span><span class="punctuation">,</span></span><br><span class="line">                     <span class="string">"-d"</span><span class="punctuation">,</span> <span class="string">"1"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">}</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure><p>上面的链接是官方文档，这里我就加了args参数，默认没有，调试的时候执行的命令就不会带参数，添加之后调试情况如下：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yyp@yyp-virtual-machine:~/TideFinger$  <span class="built_in">cd</span> /home/yyp/TideFinger ; /usr/bin/env /bin/python3 /home/yyp/.vscode-server/extensions/ms-python.python-2023.2.0/pythonFiles/lib/python/debugpy/adapter/../../debugpy/launcher 49445 -- /home/yyp/TideFinger/python3/TideFinger.py -u https://ff14.huijiwiki.com/wiki/%E9%A6%96%E9%A1%B5 -d 1 </span><br></pre></td></tr></tbody></table></figure><p>带了参数了</p><p>调试过程的几个按钮：</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20230219140207195.png" alt="image-20230219135700574"></p><p>分别是继续，单步跳过，单步调试，单步跳出，重启和停止，其他的好理解，下面解释一下中间三个</p><p>单步跳过，执行当前语句，不进入函数内部</p><p>单步调试，进入函数内部</p><p>单步跳出，离开函数</p><p>调试过程想进一个函数进不了：</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20230219140049062.png" alt="image-20230219140049062"></p><p>上面这个getopt是py库函数，然后下面给了提示：</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20230219135700574.png" alt="image-20230219140207195"></p><p>launch.json文件中<code>justMyCode</code>属性默认是true，所以不会跳到其他代码去。</p>]]></content>
      
      
      <categories>
          
          <category> 技术问题记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VScode </tag>
            
            <tag> debug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tide-Finger代码解析</title>
      <link href="/2023/02/18/Tide-Finger%E4%BB%A3%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
      <url>/2023/02/18/Tide-Finger%E4%BB%A3%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="Tide-Finger代码解析"><a href="#Tide-Finger代码解析" class="headerlink" title="Tide-Finger代码解析"></a>Tide-Finger代码解析</h2><h3 id="对cms-finger-db的结构"><a href="#对cms-finger-db的结构" class="headerlink" title="对cms-finger.db的结构"></a>对cms-finger.db的结构</h3><p>用Firefox的插件打开这个文件：</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20230219102757932.png" alt="image-20230218160750463"></p><p>可以看到有三个表：cms，fofa_back，tide</p><p><strong>对CMS表：</strong></p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20230218160750463.png" alt="image-20230219102757932"></p><p>每一项由finger_id，cms_name，path，match_pattern，option，hit组成</p><p>path是分析的静态文件的网页路径，match_pattern是匹配模式，有md5和keyword两种方式，hit是指纹命中次数。</p><p><strong>对fofa_back表：</strong></p><p>里面的东西比较杂，有服务器，操作系统，开发语言的指纹，都是关键字或正则匹配，还有路由器信息等。</p><p>对tide表，好像都是cms信息</p><p>系统调试：</p><p>遇到了一些问题，在命令行正常执行py，对ff14 wiki进行扫描，可以正常工作，但是在vscode中执行时，提示找不到对应数据库表：</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20230219143327531.png" alt="image-20230219143327531"></p><p>网上搜了一下，说是要改设置，让terminal从当前文件目录启动，而不是项目根目录</p><p>弄了一下没用。</p><p>解决方法是重新打开工作目录，之前是在tide finger目录下，现在改成了python3目录：</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20230219145351343-16767896324321.png" alt="image-20230219145351343"></p><p>正式开始调试：</p><p>从main函数开始：</p><p>先是解析命令行参数，然后处理代理相关，直到运行到这条函数：</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20230219152030844.png" alt="image-20230219145624541"></p><p>这句是初始化cms对象，然后下一句是运行Cmsscanner</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        header, body, title = self.get_info()</span><br><span class="line">        <span class="keyword">for</span> _<span class="built_in">id</span> <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">int</span>(count()),<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                self.handle(_<span class="built_in">id</span>, header, body, title)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="keyword">return</span> self.finger</span><br></pre></td></tr></tbody></table></figure><p>get_info函数如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_info</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="string">"""获取web的信息"""</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = requests.get(url=self.target, headers=agent,</span><br><span class="line">                         timeout=request_timeout, verify=<span class="literal">False</span>)</span><br><span class="line">        content = r.text</span><br><span class="line">        <span class="keyword">try</span>:        <span class="comment">#beautifulsoup，获取title标签的文本，.strip()去除首位空格</span></span><br><span class="line">            title = BS(content, <span class="string">'lxml'</span>).title.text.strip()</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">str</span>(r.headers), content, title.strip(<span class="string">'\n'</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">str</span>(r.headers), content, <span class="string">''</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></tbody></table></figure><p>用target构造了一个get请求，得到了返回页面，存放在content中，然后使用<code>BeautifulSoup</code>组件进行<code>lxml</code>格式解析，将返回页面分成header，body，title三部分返回</p><p>回到run()函数，接下去是一个for循环，以<code>_id</code>为序号循环调用handle函数，如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">handle</span>(<span class="params">self, _<span class="built_in">id</span>, header, body, title</span>):</span><br><span class="line">        <span class="string">"""取出数据库的key进行匹配"""</span></span><br><span class="line">        name, key = check(_<span class="built_in">id</span>)</span><br><span class="line">        <span class="comment"># 满足一个条件即可的情况</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">'||'</span> <span class="keyword">in</span> key <span class="keyword">and</span> <span class="string">'&amp;&amp;'</span> <span class="keyword">not</span> <span class="keyword">in</span> key <span class="keyword">and</span> <span class="string">'('</span> <span class="keyword">not</span> <span class="keyword">in</span> key:</span><br><span class="line">            <span class="keyword">for</span> rule <span class="keyword">in</span> key.split(<span class="string">'||'</span>):</span><br><span class="line">                <span class="keyword">if</span> self.check_rule(rule, header, body, title):</span><br><span class="line">                    self.finger.append(name)</span><br><span class="line">                    <span class="comment"># print '%s[+] %s   %s%s' % (G, self.target, name, W)</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        <span class="comment"># 只有一个条件的情况</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="string">'||'</span> <span class="keyword">not</span> <span class="keyword">in</span> key <span class="keyword">and</span> <span class="string">'&amp;&amp;'</span> <span class="keyword">not</span> <span class="keyword">in</span> key <span class="keyword">and</span> <span class="string">'('</span> <span class="keyword">not</span> <span class="keyword">in</span> key:</span><br><span class="line">            <span class="keyword">if</span> self.check_rule(key, header, body, title):</span><br><span class="line">                self.finger.append(name)</span><br><span class="line">                <span class="comment"># print '%s[+] %s   %s%s' % (G, self.target, name, W)</span></span><br><span class="line">        <span class="comment"># 需要同时满足条件的情况</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="string">'&amp;&amp;'</span> <span class="keyword">in</span> key <span class="keyword">and</span> <span class="string">'||'</span> <span class="keyword">not</span> <span class="keyword">in</span> key <span class="keyword">and</span> <span class="string">'('</span> <span class="keyword">not</span> <span class="keyword">in</span> key:</span><br><span class="line">            num = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> rule <span class="keyword">in</span> key.split(<span class="string">'&amp;&amp;'</span>):</span><br><span class="line">                <span class="keyword">if</span> self.check_rule(rule, header, body, title):</span><br><span class="line">                    num += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> num == <span class="built_in">len</span>(key.split(<span class="string">'&amp;&amp;'</span>)):</span><br><span class="line">                self.finger.append(name)</span><br><span class="line">                <span class="comment"># print '%s[+] %s   %s%s' % (G, self.target, name, W)</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 与条件下存在并条件: 1||2||(3&amp;&amp;4)</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">'&amp;&amp;'</span> <span class="keyword">in</span> re.findall(rbracket, key)[<span class="number">0</span>]:</span><br><span class="line">                <span class="keyword">for</span> rule <span class="keyword">in</span> key.split(<span class="string">'||'</span>):</span><br><span class="line">                    <span class="keyword">if</span> <span class="string">'&amp;&amp;'</span> <span class="keyword">in</span> rule:</span><br><span class="line">                        num = <span class="number">0</span></span><br><span class="line">                        <span class="keyword">for</span> _rule <span class="keyword">in</span> rule.split(<span class="string">'&amp;&amp;'</span>):</span><br><span class="line">                            <span class="keyword">if</span> self.check_rule(_rule, header, body, title):</span><br><span class="line">                                num += <span class="number">1</span></span><br><span class="line">                        <span class="keyword">if</span> num == <span class="built_in">len</span>(rule.split(<span class="string">'&amp;&amp;'</span>)):</span><br><span class="line">                            self.finger.append(name)</span><br><span class="line">                            <span class="comment"># print '%s[+] %s   %s%s' % (G, self.target, name, W)</span></span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="keyword">if</span> self.check_rule(rule, header, body, title):</span><br><span class="line">                            self.finger.append(name)</span><br><span class="line">                            <span class="comment"># print '%s[+] %s   %s%s' % (G, self.target, name, W)</span></span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 并条件下存在与条件： 1&amp;&amp;2&amp;&amp;(3||4)</span></span><br><span class="line">                <span class="keyword">for</span> rule <span class="keyword">in</span> key.split(<span class="string">'&amp;&amp;'</span>):</span><br><span class="line">                    num = <span class="number">0</span></span><br><span class="line">                    <span class="keyword">if</span> <span class="string">'||'</span> <span class="keyword">in</span> rule:</span><br><span class="line">                        <span class="keyword">for</span> _rule <span class="keyword">in</span> rule.split(<span class="string">'||'</span>):</span><br><span class="line">                            <span class="keyword">if</span> self.check_rule(_rule, title, body, header):</span><br><span class="line">                                num += <span class="number">1</span></span><br><span class="line">                                <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="keyword">if</span> self.check_rule(rule, title, body, header):</span><br><span class="line">                            num += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> num == <span class="built_in">len</span>(key.split(<span class="string">'&amp;&amp;'</span>)):</span><br><span class="line">                    self.finger.append(name)</span><br><span class="line">                    <span class="comment"># print '%s[+] %s   %s%s' % (G, self.target, name, W)</span></span><br></pre></td></tr></tbody></table></figure><p>开头调用了check函数，得到name和key，check函数就是用<code>-id</code>查询数据库，得到其中一条记录的name和key。比如：</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20230219145624541.png" alt="image-20230219152030844"></p><p>然后按照key的逻辑组成不同，划分为几种不同的情况进行分析，比如上面这种有或没有与的情况，就是第一种，调用<code>check_rule()</code>函数：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">check_rule</span>(<span class="params">self, key, header, body, title</span>):</span><br><span class="line">    <span class="string">"""指纹识别"""</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'title="'</span> <span class="keyword">in</span> key:</span><br><span class="line">            <span class="keyword">if</span> re.findall(rtitle, key)[<span class="number">0</span>].lower() <span class="keyword">in</span> title.lower():</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="string">'body="'</span> <span class="keyword">in</span> key:</span><br><span class="line">            <span class="keyword">if</span> re.findall(rbody, key)[<span class="number">0</span>] <span class="keyword">in</span> body: <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> re.findall(rheader, key)[<span class="number">0</span>] <span class="keyword">in</span> header: <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></tbody></table></figure><p>三种情况，根据key的内容对title，body和header进行关键词检索</p><p>然后全部搜索完就会得到fofa数据库中的所有信息，存储到banner变量中：</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20230219183355748.png" alt="image-20230219152920480"></p><p>然后调用wappalyzer，不知道是tide自己写的还是直接找的wappalyzer的代码。。。</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20230219152920480.png" alt="image-20230219183355748"></p><p>进入useWappalyzer函数：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">useWappalyzer</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        wappalyzer = Wappalyzer.latest()</span><br><span class="line">        webpage = WebPage.new_from_url(url)</span><br><span class="line">        webprints = wappalyzer.analyze(webpage)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(webprints) &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">list</span>(webprints)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> {}</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br></pre></td></tr></tbody></table></figure><p>跟踪进去，发现wappalyzer作者在代码中写了注释：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Python Wappalyzer driver.</span><br><span class="line"></span><br><span class="line">   Consider the following exemples.</span><br><span class="line">   </span><br><span class="line">   Here <span class="keyword">is</span> how you can use the latest technologies file <span class="keyword">from</span> AliasIO/wappalyzer repository. </span><br><span class="line">   </span><br><span class="line">   .. python::</span><br><span class="line"></span><br><span class="line">       <span class="keyword">from</span> Wappalyzer <span class="keyword">import</span> Wappalyzer</span><br><span class="line">       wappalyzer=Wappalyzer.latest(update=<span class="literal">True</span>)</span><br><span class="line">       <span class="comment"># Create webpage</span></span><br><span class="line">       webpage=WebPage.new_from_url(<span class="string">'http://example.com'</span>)</span><br><span class="line">       <span class="comment"># analyze</span></span><br><span class="line">       results = wappalyzer.analyze_with_categories(webpage)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   Here <span class="keyword">is</span> how you can custom request <span class="keyword">and</span> headers arguments:</span><br><span class="line">   </span><br><span class="line">   .. python::</span><br><span class="line"></span><br><span class="line">       <span class="keyword">import</span> requests</span><br><span class="line">       <span class="keyword">from</span> Wappalyzer <span class="keyword">import</span> Wappalyzer, WebPage</span><br><span class="line">       wappalyzer = Wappalyzer.latest()</span><br><span class="line">       webpage = WebPage.new_from_url(<span class="string">'http://exemple.com'</span>, headers={<span class="string">'User-Agent'</span>: <span class="string">'Custom user agent'</span>})</span><br><span class="line">       wappalyzer.analyze_with_categories(webpage)</span><br></pre></td></tr></tbody></table></figure><p>发现Tide作者就是用上面的示例直接使用了wappalyzer的代码。</p><p>接下来研究一下这个源码，继续跟踪</p><p>这个<code>latest()</code>函数的作用就是更新<code>technologies.json</code></p><p>然后跳到<code>_init_</code>函数，categories字典存的是指纹类型和对应优先级，technologies存的是不同组件的指纹，根据wappalyzer在github上的<a href="https://github.com/wappalyzer/wappalyzer/blob/master/README.md">readme</a>，一些字段的定义如下：</p><p>必须属性：</p><div class="table-container"><table><thead><tr><th>字段</th><th>描述</th></tr></thead><tbody><tr><td>cats</td><td>一个或多个category ID</td></tr><tr><td>website</td><td>应用网站的URL</td></tr></tbody></table></div><p>可选属性：</p><div class="table-container"><table><thead><tr><th>字段</th><th>描述</th></tr></thead><tbody><tr><td>description</td><td>对该项技术的简单描述</td></tr><tr><td>icon</td><td>应用的icon文件名</td></tr><tr><td>cpe</td><td>CPE 是一种结构化的技术命名方案</td></tr><tr><td>saas</td><td>布尔值，表示该项技术是否是软件即服务(SaaS)，也就是托管或基于云的</td></tr><tr><td>oss</td><td>技术有开源认证</td></tr><tr><td>pricing</td><td>技术的价格，花费(字面意思)</td></tr><tr><td>implies</td><td>一种应用的出现意味着另一种技术的出现，比如WordPress意味着PHP</td></tr><tr><td>requires</td><td>与implies类似，但仅在识别出所需技术时才运行检测。适用于特定 CMS 的主题。</td></tr><tr><td>requiresCategory</td><td>类似于requires;仅当已识别出所需类别中的技术时，才会运行检测。</td></tr><tr><td>excludes</td><td>与implies相反。一个应用程序的存在可以排除另一个应用程序的存在。</td></tr></tbody></table></div><p>匹配模式（太多了不翻译了）：</p><p>见<a href="https://github.com/wappalyzer/wappalyzer/blob/master/README.md">readme</a></p><p>不知道为啥给latest函数加 <code>update=True</code>之后就寄了，这里不关心这个，那就用他原来的json，下一条语句是</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpage = WebPage.new_from_url(url)</span><br></pre></td></tr></tbody></table></figure><p>从函数的注释可以看出，这是用URL去请求网页对象</p><p><code>new_from_url()</code>中调用了<code>new_from_response()</code>，后者返回网页的：响应url，页面文本，和响应头</p><p>执行完所有类方法后，回到<code>_init_</code>，这里是使用<code>BeautifulSoup</code>对得到的网页文件进行解析并返回，然后对得到的webpage执行analyze函数</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webprints = wappalyzer.analyze(webpage)</span><br></pre></td></tr></tbody></table></figure><p>注释说这个函数是得到一个所用技术的集合，代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">analyze</span>(<span class="params">self, webpage:WebPage</span>) -&gt; <span class="type">Set</span>[<span class="built_in">str</span>]:</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Return a set of technology that can be detected on the web page.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param webpage: The Webpage to analyze</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    detected_technologies = <span class="built_in">set</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> tech_name, technology <span class="keyword">in</span> <span class="built_in">list</span>(self.technologies.items()):</span><br><span class="line">        <span class="keyword">if</span> self._has_technology(technology, webpage):</span><br><span class="line">            detected_technologies.add(tech_name)</span><br><span class="line"></span><br><span class="line">    detected_technologies.update(self._get_implied_technologies(detected_technologies))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> detected_technologies</span><br></pre></td></tr></tbody></table></figure><p>主要功能是这个函数：<code>self._has_technology(technology, webpage)</code></p><p>就是检索数据库，对符合条件的组件加到<code>detected_technologies</code>中，然后之前给了一个implied字段的解释，下面那个</p><p><code>detected_technologies.update(self._get_implied_technologies(detected_technologies))</code></p><p>就是对检测到的技术进行implied索引，看是否有遗漏</p><p>回到main函数</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    update = <span class="literal">False</span></span><br><span class="line">    webanalyzer_banner = webanalyzer.check(target_url,update)</span><br><span class="line">    <span class="keyword">for</span> webanalyzer_banner_ <span class="keyword">in</span> webanalyzer_banner:</span><br><span class="line">        banner.append(webanalyzer_banner_)</span><br></pre></td></tr></tbody></table></figure><p>这一段不知道是在干嘛，但是看起来也没做什么</p><p>然后是对wappalyzer和tide查到的指纹进行去重</p><p>接下来两个if，是如果没有查到cms信息，且启用了目录查询模式，则调用<code>finger_query()</code></p><p>finger_query()中调用了WhatCms类:</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">finger_query</span>(<span class="params">url</span>):</span><br><span class="line">    whatcms=WhatCms(url,<span class="string">'cms_finger.db'</span>)</span><br><span class="line">    whatcms.run()</span><br><span class="line">    finger_dic = whatcms.get_result()</span><br><span class="line">    <span class="keyword">return</span> finger_dic</span><br></pre></td></tr></tbody></table></figure><p>这里查询的不是Tide表而是cms表，然后是多线程查表，线程函数如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">find_cms_with_file</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        根据cms.txt检测cms</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> self.is_finish:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> self.g_index &gt;= <span class="built_in">len</span>(self.cms):</span><br><span class="line">                self.lock.acquire()</span><br><span class="line">                self.is_finish = <span class="literal">True</span></span><br><span class="line">                self.info[<span class="string">'cms_name'</span>] = <span class="string">"Not Found"</span></span><br><span class="line">                self.info[<span class="string">'path'</span>] = <span class="string">"nothing"</span></span><br><span class="line">                self.info[<span class="string">'match_pattern'</span>] = <span class="string">"nothing"</span></span><br><span class="line">                self.lock.release()</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            self.lock.acquire()</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                eachline = self.cms[self.g_index]</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            self.g_index += <span class="number">1</span></span><br><span class="line">            self.lock.release()</span><br><span class="line"></span><br><span class="line">            finger_id,cms_name,path,match_pattern,options,hit = eachline[<span class="number">0</span>],eachline[<span class="number">1</span>],eachline[<span class="number">2</span>],eachline[<span class="number">3</span>],eachline[<span class="number">4</span>],eachline[<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">            url = self.target + path</span><br><span class="line">            <span class="comment"># print self.g_index,url</span></span><br><span class="line">            response_html,response_content = WhatCms.request_url(url)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> options == <span class="string">"md5"</span>:</span><br><span class="line">                <span class="keyword">if</span> match_pattern == getMD5(response_content):</span><br><span class="line">                    self.lock.acquire()</span><br><span class="line">                    self.is_finish = <span class="literal">True</span></span><br><span class="line">                    self.info[<span class="string">'finger_id'</span>]= finger_id</span><br><span class="line">                    self.info[<span class="string">'cms_name'</span>]=cms_name</span><br><span class="line">                    self.info[<span class="string">'path'</span>] = path</span><br><span class="line">                    self.info[<span class="string">'match_pattern'</span>]=match_pattern</span><br><span class="line">                    self.info[<span class="string">'options'</span>]=options</span><br><span class="line">                    self.info[<span class="string">'hit'</span>]=hit</span><br><span class="line">                    self.lock.release()</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> options == <span class="string">"keyword"</span>:</span><br><span class="line">                <span class="keyword">if</span> match_pattern.lower() <span class="keyword">in</span> response_html.lower():</span><br><span class="line">                    self.lock.acquire()</span><br><span class="line">                    self.is_finish = <span class="literal">True</span></span><br><span class="line">                    self.info[<span class="string">'finger_id'</span>]= finger_id</span><br><span class="line">                    self.info[<span class="string">'cms_name'</span>]=cms_name</span><br><span class="line">                    self.info[<span class="string">'path'</span>] = path</span><br><span class="line">                    self.info[<span class="string">'match_pattern'</span>]=match_pattern</span><br><span class="line">                    self.info[<span class="string">'options'</span>]=options</span><br><span class="line">                    self.info[<span class="string">'hit'</span>]=hit</span><br><span class="line">                    self.lock.release()</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">elif</span> options == <span class="string">"regx"</span>:</span><br><span class="line">                r = re.search(match_pattern, response_html)</span><br><span class="line">                <span class="keyword">if</span> r:</span><br><span class="line">                    self.lock.acquire()</span><br><span class="line">                    self.is_finish = <span class="literal">True</span></span><br><span class="line">                    self.info[<span class="string">'finger_id'</span>]= finger_id</span><br><span class="line">                    self.info[<span class="string">'cms_name'</span>]=cms_name</span><br><span class="line">                    self.info[<span class="string">'path'</span>] = path</span><br><span class="line">                    self.info[<span class="string">'match_pattern'</span>]=match_pattern</span><br><span class="line">                    self.info[<span class="string">'options'</span>]=options</span><br><span class="line">                    self.info[<span class="string">'hit'</span>]=hit</span><br><span class="line">                    self.lock.release()</span><br><span class="line">                    <span class="keyword">break</span></span><br></pre></td></tr></tbody></table></figure><p>逻辑还是比较清晰的，就三种模式，MD5，关键字，正则，然后如果匹配了就把对应信息导入到self，这里因为代码用的是多线程，50个线程不好调试。</p><p>差不多就这样了，最后就有个统计时间的。还是比较清晰的</p>]]></content>
      
      
      <categories>
          
          <category> 本科毕设 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> 指纹识别 </tag>
            
            <tag> Tide </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu虚拟机+vscode+remote ssh的golang开发环境搭建</title>
      <link href="/2023/02/18/ubuntu%E8%99%9A%E6%8B%9F%E6%9C%BA-vscode-remote-ssh%E7%9A%84golang%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2023/02/18/ubuntu%E8%99%9A%E6%8B%9F%E6%9C%BA-vscode-remote-ssh%E7%9A%84golang%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="ubuntu虚拟机-vscode-remote-ssh的golang开发环境搭建"><a href="#ubuntu虚拟机-vscode-remote-ssh的golang开发环境搭建" class="headerlink" title="ubuntu虚拟机+vscode+remote ssh的golang开发环境搭建"></a>ubuntu虚拟机+vscode+remote ssh的golang开发环境搭建</h2><p>首先，在Ubuntu上搭建golang环境很简单。</p><p>在主机安装好vscode后，下载remote ssh插件：</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20230218143756602.png" alt="image-20230218143609537"></p><p>然后配置虚拟机ip和用户，和ssh一样：</p><p>ssh yyp@192.168.15.150</p><p>配置一下免密登录，首先主机打开terminal，输入ssh-keygen</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20230218143609537.png" alt="image-20230218143756602"></p><p>之前已经配置过了就会提示这个，然后去上面那个.ssh目录：</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20230218144554869.png" alt="image-20230218143833612"></p><p>把 <code>id_rsa.pub</code>文件复制到虚拟机中，然后将这个文件复制到home目录下的.ssh文件夹中：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">yyp@yyp-virtual-machine:~$ <span class="built_in">mv</span> ./id_rsa.pub .ssh</span><br><span class="line">yyp@yyp-virtual-machine:~$ <span class="built_in">cd</span> .ssh</span><br><span class="line">yyp@yyp-virtual-machine:~/.ssh$ <span class="built_in">ls</span></span><br><span class="line">id_rsa.pub</span><br><span class="line">yyp@yyp-virtual-machine:~/.ssh$ <span class="built_in">cat</span> id_rsa.pub &gt;&gt; authorized_keys</span><br><span class="line">yyp@yyp-virtual-machine:~/.ssh$ sudo <span class="built_in">chmod</span> 600 authorized_keys </span><br><span class="line">yyp@yyp-virtual-machine:~/.ssh$ service sshd restart</span><br></pre></td></tr></tbody></table></figure><p>就可以用vscode直接连接了。</p><p>用vscode打开一个go文件，右下角会提示安装go的其他插件，这里没截到图。</p><p>不知道为什么，按照网上的说法，配置了go环境的代理，还是开全局的梯子，都安装不了，最后是按照如下方法：</p><p>首先go环境的代理确实要配置，在虚拟机中输入如下命令：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yyp@yyp-virtual-machine:~$ go <span class="built_in">env</span> -w GOPROXY=https://goproxy.io,direct</span><br><span class="line">yyp@yyp-virtual-machine:~$ go <span class="built_in">env</span> -w GOPRIVATE=*.corp.example.com</span><br></pre></td></tr></tbody></table></figure><p>然后这时在vscode中install all还是失败，但是下面输出会给出安装插件用的命令，将他们复制到虚拟机的terminal中，就可以正常安装了：</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20230218143833612.png" alt="image-20230218144554869"></p>]]></content>
      
      
      <categories>
          
          <category> 技术问题记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang </tag>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TideFinger:Web指纹识别技术研究与优化实现</title>
      <link href="/2023/02/11/TideFinger-Web%E6%8C%87%E7%BA%B9%E8%AF%86%E5%88%AB%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6%E4%B8%8E%E4%BC%98%E5%8C%96%E5%AE%9E%E7%8E%B0/"/>
      <url>/2023/02/11/TideFinger-Web%E6%8C%87%E7%BA%B9%E8%AF%86%E5%88%AB%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6%E4%B8%8E%E4%BC%98%E5%8C%96%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<div align="center"><img src="/2023/02/11/TideFinger-Web%E6%8C%87%E7%BA%B9%E8%AF%86%E5%88%AB%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6%E4%B8%8E%E4%BC%98%E5%8C%96%E5%AE%9E%E7%8E%B0/logo.png" width="30%"></div><p><strong>本文作者：Tide安全团队重剑无锋，转载请申明出处。<code>https://github.com/TideSec/TideFinger</code></strong></p><p><strong>本文通过分析web指纹的检测对象、检测方法、检测原理及常用工具，设计了一个简易的指纹搜集脚本来协助发现新指纹，并提取了多个开源指纹识别工具的规则库并进行了规则重组，开发了一个简单快捷的指纹识别小工具TideFinger，并实现了一套在线的指纹识别平台“潮汐指纹”，希望能为大家带来方便。</strong></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在web渗透过程中，Web指纹识别是信息收集环节中一个比较重要的步骤，通过一些开源的工具、平台或者手工检测CMS系统是公开的CMS程序还是二次开发至关重要，能准确的获取CMS类型、Web服务组件类型及版本信息可以帮助安全工程师快速有效的去验证已知漏洞。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在指纹识别的学习过程中，借用了很多开源的工具和指纹库，如fofa、WhatWeb、w11scan、WebEye、御剑等等，在此感谢各种大佬的无私奉献。本文并无技术上的创新和突破，只是把一些指纹库重新进行了整合和梳理并进行了开源。</span><br></pre></td></tr></tbody></table></figure><p>tips：文末有福利~我们将搜集到的一些指纹工具、指纹库等资料打包供大家下载~</p><h1 id="常见指纹检测的对象"><a href="#常见指纹检测的对象" class="headerlink" title="常见指纹检测的对象"></a>常见指纹检测的对象</h1><p>1、CMS信息：比如大汉CMS、织梦、帝国CMS、phpcms、ecshop等；</p><p>2、前端技术：比如HTML5、jquery、bootstrap、pure、ace等；</p><p>3、Web服务器：比如Apache、lighttpd, Nginx, IIS等；</p><p>4、应用服务器：比如Tomcat、Jboss、weblogic、websphere等；</p><p>5、开发语言：比如PHP、Java、Ruby、Python、C#等；</p><p>6、操作系统信息：比如linux、win2k8、win7、kali、centos等；</p><p>7、CDN信息：是否使用CDN，如cloudflare、360cdn、365cyd、yunjiasu等；</p><p>8、WAF信息：是否使用waf，如Topsec、Jiasule、Yundun等；</p><p>9、IP及域名信息：IP和域名注册信息、服务商信息等；</p><p>10、端口信息：有些软件或平台还会探测服务器开放的常见端口。</p><h1 id="常见的指纹识别方式"><a href="#常见的指纹识别方式" class="headerlink" title="常见的指纹识别方式"></a>常见的指纹识别方式</h1><p>1、特定文件的MD5</p><p>一些网站的特定图片文件、js文件、CSS等静态文件，如favicon.ico(网站图标)、css、logo.ico、js等文件一般不会修改，通过爬虫对这些文件进行抓取并比对md5值，如果和规则库中的Md5一致则说明是同一CMS。这种方式速度比较快，误报率相对低一些，但也不排除有些二次开发的CMS会修改这些文件。</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/003.png"></p><p>2、正常页面或错误网页中包含的关键字</p><p>先访问首页或特定页面如robots.txt等，通过正则的方式去匹配某些关键字，如Powered by Discuz、dedecms等。</p><p>或者可以构造错误页面，根据报错信息来判断使用的CMS或者中间件信息，比较常见的如tomcat的报错页面。</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/004.png"></p><p>3、请求头信息的关键字匹配</p><p>根据网站response返回头信息进行关键字匹配，whatweb和Wappalyzer就是通过banner信息来快速识别指纹，之前fofa的web指纹库很多都是使用的这种方法，效率非常高，基本请求一次就可以，但搜集这些规则可能会耗时很长。而且这些banner信息有些很容易被改掉。</p><p>根据response header一般有以下几种识别方式：</p><ul><li>查看http响应报头的X-Powered-By字段来识别；</li><li>根据Cookies来进行判断，比如一些waf会在返回头中包含一些信息，如360wzws、Safedog、yunsuo等；</li><li>根据header中的Server信息来判断，如DVRDVS-Webs、yunjiasu-nginx、Mod_Security、nginx-wallarm等；</li><li>根据WWW-Authenticate进行判断，一些路由交换设备可能存在这个字段，如NETCORE、huawei、h3c等设备。</li></ul><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/001.png"></p><p>4、部分URL中包含的关键字，比如wp-includes、dede等URL关键特征</p><p>通过规则库去探测是否有相应目录，或者根据爬虫结果对链接url进行分析，或者对robots.txt文件中目录进行检测等等方式，通过url地址来判别是否使用了某CMS，比如wordpress默认存在wp-includes和wp-admin目录，织梦默认管理后台为dede目录，solr平台可能使用/solr目录，weblogic可能使用wls-wsat目录等。</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/002.png"></p><p>5、开发语言的识别</p><p>web开发语言一般常见的有PHP、jsp、aspx、asp等，常见的识别方式有：</p><ul><li>通过爬虫获取动态链接进行直接判断是比较简便的方法。</li></ul><p>asp判别规则如下<code>&lt;a[^&gt;]*?href=('|")[^http][^&gt;]*?\.asp(\?|\#|\1)</code>，其他语言可替换相应asp即可。</p><ul><li>通过<code>X-Powered-By</code>进行识别</li></ul><p>比较常见的有<code>X-Powered-By: ASP.NET</code>或者<code>X-Powered-By: PHP/7.1.8</code></p><ul><li>通过<code>Set-Cookie</code>进行识别</li></ul><p>这种方法比较常见也很快捷，比如<code>Set-Cookie</code>中包含<code>PHPSSIONID</code>说明是php、包含<code>JSESSIONID</code>说明是java、包含<code>ASP.NET_SessionId</code>说明是aspx等。</p><h1 id="指纹识别工具"><a href="#指纹识别工具" class="headerlink" title="指纹识别工具"></a>指纹识别工具</h1><p>在研究指纹识别技术的时候，不可避免的分析了大量指纹识别工具，在此将自己用过的几个感觉不错的工具和平台介绍一下。</p><h2 id="国外指纹识别工具"><a href="#国外指纹识别工具" class="headerlink" title="国外指纹识别工具"></a>国外指纹识别工具</h2><h3 id="WhatWeb（推荐指数★★★★★）"><a href="#WhatWeb（推荐指数★★★★★）" class="headerlink" title="WhatWeb（推荐指数★★★★★）"></a>WhatWeb（推荐指数★★★★★）</h3><p>下载地址：<code>https://github.com/urbanadventurer/WhatWeb</code></p><p>Whatweb 是一个开源的网站指纹识别软件，拥有超过1700+个插件，它能识别的指纹包括 cms 类型、博客平台、网站流量分析软件、javascript 库、网站服务器，还可以识别版本号、邮箱地址、账户 id、web 框架模块等。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Whatweb 是基于 ruby 语言开发，因此可以安装在具备 ruby 环境的系统中，目前支持 Windows/Mac OSX/Linux。</span><br><span class="line"></span><br><span class="line">在debian/ubuntu系统下可直接`apt-get install whatweb`,kali已自带。</span><br></pre></td></tr></tbody></table></figure><p>使用非常简单whatweb <a href="http://www.tidesec.net即可，也可以加参数-v显示更详细的信息。">http://www.tidesec.net即可，也可以加参数-v显示更详细的信息。</a></p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/005.png"></p><h3 id="Wapplyzer（推荐指数★★★★）"><a href="#Wapplyzer（推荐指数★★★★）" class="headerlink" title="Wapplyzer（推荐指数★★★★）"></a>Wapplyzer（推荐指数★★★★）</h3><p>下载地址：<code>https://github.com/AliasIO/Wappalyzer</code></p><p>Wappalyzer 是一个实用的跨平台网站分析工具，用于帮助开发者、研究者和设计者检测网页使用的是什么技术，以更好地衡量自己的项目中该使用什么技术。Wappalyzer 的功能和 BuiltWith 类似，可检测内容管理系统（CMS），电子商务平台、Web服务器、JavaScript框架和已安装的分析工具等。</p><p>Wappalyzer可直接在chrome或火狐的应用商城直接搜索安装。Wappalyzer目前可识别65个大类的1216个应用，查看可检测的应用程序列表：<code>https://wappalyzer.com/applications</code></p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/007.png"></p><h3 id="Whatruns（推荐指数★★★★）"><a href="#Whatruns（推荐指数★★★★）" class="headerlink" title="Whatruns（推荐指数★★★★）"></a>Whatruns（推荐指数★★★★）</h3><p>Whatruns是为chrome开发的一款web指纹识别程序，还可以显示托管的CDN、wordpress插件、wordpress字体等，拥有丰富的插件支持。</p><p>跟Wappalyzer安装类似，Whatruns可直接在chrome应用商城直接搜索安装。</p><p>安装完成后，通过插件图标来获取服务的详细运行信息，效果如下。有时候信息会比Wapplyzer还详细一些，但有时候获取速度稍慢。</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/006.png"></p><h3 id="Plecost（推荐指数★★★）"><a href="#Plecost（推荐指数★★★）" class="headerlink" title="Plecost（推荐指数★★★）"></a>Plecost（推荐指数★★★）</h3><p>下载地址：<code>https://github.com/iniqua/plecost</code></p><p>Plecost是Wordpress博客引擎的漏洞指纹识别和漏洞查找器，能识别Wordpress版本并能查找到cve，不过访问不了google的话可能有些功能就受限了。Plecost基于python架构，利用了Beautiful Soup来解析html、xml文件识别网站使用的插件及版本。</p><p>使用也比较方便<code>plecost  -i /usr/share/plecost/wp_plugin_list.txt  http://www.freebuf.com</code></p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/010.png"></p><h3 id="BlindElephant（推荐指数★★）"><a href="#BlindElephant（推荐指数★★）" class="headerlink" title="BlindElephant（推荐指数★★）"></a>BlindElephant（推荐指数★★）</h3><p>下载地址：<code>https://github.com/lokifer/BlindElephant</code></p><p>BlindElephant是一款Web应用程序指纹识别工具。该工具可以读取目标网站的特定静态文件，计算其对应的哈希值，然后和预先计算出的哈希值做对比，从而判断目标网站的类型和版本号。目前，该工具支持15种常见的Web应用程序的几百个版本。同时，它还提供WordPress和Joomla的各种插件。该工具还允许用户自己扩展，添加更多的版本支持。</p><p>不过该软件最新更新是在2013年，插件库应该算比较旧的了。</p><p>下载及安装可参考<code>https://github.com/lokifer/BlindElephant</code>，kali中已经内置。</p><p>使用命令：<code>BlindElephant.py http://www.freebuf.com wordpress</code></p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/012.png"></p><h2 id="国内指纹识别工具"><a href="#国内指纹识别工具" class="headerlink" title="国内指纹识别工具"></a>国内指纹识别工具</h2><h3 id="御剑web指纹识别程序"><a href="#御剑web指纹识别程序" class="headerlink" title="御剑web指纹识别程序"></a>御剑web指纹识别程序</h3><p>下载地址：<code>https://www.webshell.cc/4697.html</code></p><p>御剑web指纹识别程序是一款CMS指纹识别小工具，该程序由.NET 2.0框架开发，配置灵活、支持自定义关键字和正则匹配两种模式、使用起来简洁、体验良好。在指纹命中方面表现不错、识别速度很快、但目前比较明显的缺陷是指纹的配置库偏少。</p><p>windows下图形界面，比较亲民，扫描速度略慢，指纹库略少，可手工更新。</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/016.png"></p><h3 id="Test404轻量WEB指纹识别"><a href="#Test404轻量WEB指纹识别" class="headerlink" title="Test404轻量WEB指纹识别"></a>Test404轻量WEB指纹识别</h3><p>下载地址：<code>https://www.test404.com/post-1618.html</code></p><p>Test404轻量WEB指纹识别程序是一款CMS指纹识别小工具，配置灵活、支持自行添加字典、使用起来简洁、体验良好。在指纹命中方面表现不错、识别速度很快。可手动更新指纹识别库，而且该软件在2019.04月刚刚更新了一版。</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/019.png"></p><h3 id="w11scan分布式WEB指纹识别平台"><a href="#w11scan分布式WEB指纹识别平台" class="headerlink" title="w11scan分布式WEB指纹识别平台"></a>w11scan分布式WEB指纹识别平台</h3><p>w11scan是一款分布式的WEB指纹识别系统（包括CMS识别、js框架、组件容器、代码语言、WAF等等），管理员可以在WEB端新增/修改指纹，建立批量的扫描任务，并且支持多种搜索语法。</p><p>安装和下载可参考：<code>https://github.com/w-digital-scanner/w11scan</code></p><p>手工安装稍微复杂，不过作者提供了docker部署，方便很多，使用了Mongodb，内置了1800多条常见的指纹，可以识别多达538种常见CMS，当然也可以手工添加指纹。</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/018.png"></p><h3 id="Dayu指纹识别工具"><a href="#Dayu指纹识别工具" class="headerlink" title="Dayu指纹识别工具"></a>Dayu指纹识别工具</h3><p>下载地址：<code>https://github.com/Ms0x0/Dayu</code></p><p>“大禹”为一款c/s结构jar文件工具，只需本地安装java环境，加参数-u即可，具体设置参数可参考github介绍。</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/015.png"></p><h3 id="WebEye"><a href="#WebEye" class="headerlink" title="WebEye"></a>WebEye</h3><p>下载地址：<code>https://github.com/zerokeeper/WebEye/</code></p><p>WebEye可快速简单地识别WEB服务器类型、CMS类型、WAF类型、WHOIS信息、以及语言框架，使用异步实现指纹的快速识别。</p><p>识别速度比较快，不过指纹库不是很多，指纹库不是基于md5之类的，而是类似于fofa通过http头信息、关键字等进行快速识别。</p><p>作者对指纹进行了分类，如摄像头、waf、cdn、网络设备等，很多指纹都是精心搜集的。</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/017.png"></p><h3 id="WTF-Scan"><a href="#WTF-Scan" class="headerlink" title="WTF_Scan"></a>WTF_Scan</h3><p>下载地址：<code>https://github.com/dyboy2017/WTF_Scan</code></p><p>WTF团队出品的指纹识别平台，包括的功能也相对比较多，除了指纹识别外，还有DNS解析、子域名、CDN、端口扫描、敏感目录等。</p><p>不过就单独说指纹规则来说，不算很多，可以自己添加完善，在<code>WTF_Scan/wtf/app/api/cms/cms.txt</code>文件中进行指纹修改。</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/022.png"></p><h3 id="Webfinger"><a href="#Webfinger" class="headerlink" title="Webfinger"></a>Webfinger</h3><p>基于fofa的规则库进行快速检索，大约2000+条指纹数据，位于lib/web.db可自行添加修改。</p><p>下载地址：<code>https://github.com/se55i0n/Webfinger</code></p><p>类似的还有个CMSCAN<code>https://github.com/cuijianxiong/cmscan/</code></p><h3 id="FingerPrint"><a href="#FingerPrint" class="headerlink" title="FingerPrint"></a>FingerPrint</h3><p>好像是百度的一个MM用perl写的一款工具，调用Wappalyzer模块进行指纹识别。</p><p>下载地址：<code>https://github.com/tanjiti/FingerPrint</code></p><h2 id="在线指纹识别"><a href="#在线指纹识别" class="headerlink" title="在线指纹识别"></a>在线指纹识别</h2><h3 id="云悉指纹识别"><a href="#云悉指纹识别" class="headerlink" title="云悉指纹识别"></a>云悉指纹识别</h3><p><code>http://www.yunsee.cn/</code></p><p>指纹库很强大，速度也很快，我们前端还仿了下云悉的界面，免费服务，还能提供api接口！</p><p>如果指纹能开源就好了，哈哈~~</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/023.png"></p><h3 id="bugscaner指纹识别"><a href="#bugscaner指纹识别" class="headerlink" title="bugscaner指纹识别"></a>bugscaner指纹识别</h3><p><code>http://whatweb.bugscaner.com/look/</code></p><p>目前好像指纹比较少，很多都识别不出来了。</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/008.png"></p><h3 id="whatweb-net"><a href="#whatweb-net" class="headerlink" title="whatweb.net"></a>whatweb.net</h3><p><code>https://whatweb.net/</code></p><p>之前功能还不错，现在好像只能查看到header信息了。</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/014.png"></p><h1 id="TideFinger"><a href="#TideFinger" class="headerlink" title="TideFinger"></a>TideFinger</h1><p>上面介绍了那么多超级工具，都不好意思写自己做的小破烂东西了…大佬们可以关掉本页面了…</p><p>通过对各种识别对象、识别方法、识别工具的分析，发现大家的指纹库各式各样，识别方式也是各有千秋，传统的md5、url路径的方式居多，识别header信息的也是不少，但没有一个能集众家之长的小工具。</p><p>于是我们就做了一个小工具TideFinger</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/TideSec/TideFinger</span><br></pre></td></tr></tbody></table></figure><h2 id="指纹库整理"><a href="#指纹库整理" class="headerlink" title="指纹库整理"></a>指纹库整理</h2><p>我们搜集了上面所有的指纹软件，从中提取了指纹库，进行了统一的格式化处理并进行去重，最终得到了一个大约2078条的传统指纹库。本来想把fofa的库也合并进来，发现格式差异有些大，便保持了fofa指纹库，并把WebEye的部分指纹和fofa指纹进行了合并。这样就保留了两个指纹库，其中cms指纹库为传统的md5、url库，大约2078条指纹，可通过关键字、md5、正则进行匹配，fofa库为2119指纹，主要对Header、url信息进行匹配。</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/024.png"></p><h2 id="指纹库优化"><a href="#指纹库优化" class="headerlink" title="指纹库优化"></a>指纹库优化</h2><p>在对指纹库整理去重后，对每个指纹进行了命中率的标识，当匹配到某个指纹时该指纹命中率会加1，而在使用指纹时会从优先使用命中率高的指纹。</p><p>然后我们从互联网中爬取了10W个域名进行了命中率测试，然后对一些误报率比较高的指纹进行了重新优化，得到了一份相对更高效的指纹库。</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/020.png"></p><h2 id="未知指纹发现"><a href="#未知指纹发现" class="headerlink" title="未知指纹发现"></a>未知指纹发现</h2><p>目前新指纹的识别基本还是靠人工发现然后分析规则再进行添加，所以各平台都有提交指纹的功能，但是我们没有这种资源，只能另想办法。</p><p>于是想到了一个比较笨的方法：从网站中爬取一些静态文件，如png、ico、jpg、css、js等，提取url地址、文件名、计算md5写入数据库，这样再爬下一个网站，一旦发现有相同的md5，就把新的url也加入到那条记录中，并把hint值加1，这样爬取10W个站点后，就能得到一个比较客观的不同网站使用相同md5文件的数据了。</p><p>获取链接代码部分</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">excludeext = ['.png', '.ico', '.gif','.svg', '.jpeg','js','css','xml','txt']</span><br><span class="line"></span><br><span class="line">def getPageLinks(url):</span><br><span class="line"></span><br><span class="line">    try:</span><br><span class="line">        headers = requests_headers()</span><br><span class="line">        </span><br><span class="line">        content = requests.get(url, timeout=5, headers=headers, verify=False).text.encode('utf-8')</span><br><span class="line">        links = []</span><br><span class="line">        tags = ['a', 'A', 'link', 'script', 'area', 'iframe', 'form']  # img</span><br><span class="line">        tos = ['href', 'src', 'action']</span><br><span class="line">        if url[-1:] == '/':</span><br><span class="line">            url = url[:-1]</span><br><span class="line">        try:</span><br><span class="line">            for tag in tags:</span><br><span class="line">                for to in tos:</span><br><span class="line">                    link1 = re.findall(r'&lt;%s.*?%s="(.*?)"' % (tag, to), str(content))</span><br><span class="line">                    link2 = re.findall(r'&lt;%s.*?%s=\'(.*?)\'' % (tag, to), str(content))</span><br><span class="line">                    for i in link1:</span><br><span class="line">                        links.append(i)</span><br><span class="line"></span><br><span class="line">                    for i in link2:</span><br><span class="line">                        if i not in links:</span><br><span class="line">                            links.append(i)</span><br><span class="line"></span><br><span class="line">        except Exception, e:</span><br><span class="line">            print e</span><br><span class="line">            print '[!] Get link error'</span><br><span class="line">            pass</span><br><span class="line">        return links</span><br><span class="line">    except:</span><br><span class="line">        return [] </span><br></pre></td></tr></tbody></table></figure><p>有兴趣的可以查看具体代码<code>https://github.com/TideSec/TideFinger/blob/master/count_file_md5.py</code>文件。</p><p>爬取的结果如下：</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/021.png"></p><p>当然了，里面肯定很多都属于误报，比如上图中第一个其实是个500错误页面，所以出现的比较多，第二个是政府网站最下边那个常见的“纠错”的js，所以用的也比较多…</p><p>经过一些分析整理也发现了一些小众的CMS和建站系统的指纹，比如三一网络建站系统的<code>newsxx.php</code>，比如大汉JCM的<code>jhelper_tool_style.css</code>等等，后续会持续把这些新的指纹丰富到指纹库中去。</p><h2 id="指纹识别脚本"><a href="#指纹识别脚本" class="headerlink" title="指纹识别脚本"></a>指纹识别脚本</h2><p>有了指纹库之后，识别脚本就相对比较简单了，已有的一些也都比较成熟了，直接使用了webfinger和whatcms的部分代码并进行了整合优化，于是就有了TideFinger。</p><p>1、功能逻辑都比较简单，先用fofa库去匹配，然后获取一定banner，如果banner中识别除了cms，则返回结果，如果未识别到cms，则会调用cms规则库进行匹配各规则。</p><p>2、脚本支持代理模式，当设置了-p参数，且<code>proxys_ips.txt</code>文件包含代理地址时，脚本会随机调用代理地址进行扫描，以避免被封ip，不过这样的话效率可能会低一些。毕竟搜集的免费代理质量还是差一些，速度会慢很多。有钱人可以找收费代理池，然后每个规则都用不同代理去请求，这样肯定不会被封！</p><p>代理地址的搜集可以使用我修改的另一个代理池<code>https://github.com/TideSec/Proxy_Pool</code>，提供了自动化的代理ip抓取+评估+存储+展示+接口调用。</p><p>3、经测试，一般网站把所有指纹跑一遍大约需要30秒时间，个别的网站响应比较慢的可能耗时更长一些，可以通过设置网站超时时间进行控制。</p><p>安装python2依赖库</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pip install lxml</span><br><span class="line">pip install requests</span><br><span class="line">pip install bs4</span><br><span class="line"></span><br><span class="line">说明：sqlite3库在Python 2.5.x 以上版本默认自带了该模块，如提示sqlite3出错请自行排查。</span><br></pre></td></tr></tbody></table></figure><p>执行脚本</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ python TideFinger.py</span><br><span class="line"></span><br><span class="line">    Usage: python TideFinger.py -u http://www.123.com [-p 1] [-m 50] [-t 5]</span><br><span class="line"></span><br><span class="line">    -u: 待检测目标URL地址</span><br><span class="line">    -p: 指定该选项为1后，说明启用代理检测，请确保代理文件名为proxys_ips.txt,每行一条代理，格式如: 124.225.223.101:80</span><br><span class="line">    -m: 指纹匹配的线程数，不指定时默认为50</span><br><span class="line">    -t: 网站响应超时时间，默认为5秒</span><br></pre></td></tr></tbody></table></figure><p>指纹识别界面如下：</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/011.png"></p><h2 id="指纹识别平台"><a href="#指纹识别平台" class="headerlink" title="指纹识别平台"></a>指纹识别平台</h2><p>在有了指纹库和识别脚本之后，我们想继续完善下这个功能，于是又加入了其他一些功能，有了这个在线指纹查询平台<a href="http://finger.tidesec.net"><code>http://finger.tidesec.net</code></a>。</p><p>开始想加的很多，但后来在速度和时间方面不得不进行了一定的取舍，于是就有了目前如下的功能。</p><p>1、网站信息：网站标题、状态码、302跳转信息等；</p><p>2、IP地址信息：IP归属地、IP服务商信息、GPS信息；</p><p>3、CDN识别：对目标是否使用CDN进行检测，但目前CDN识别指纹还不多，对部分识别出使用CDN的目标还会列出来CNAME；</p><p>4、中间件识别：主要通过http头信息中的XPB、server等字段获取中间件信息，如nginx、iis、tomcat等；</p><p>5、更多banner：主要是调用了whatweb和Wapplyzer进行更多banner信息的获取，如jquery、bootstrap等；</p><p>6、操作系统识别：识别比较简单，通过ttl值和文件大小写是否敏感…用nmap去识别的话速度太慢…</p><p>7、本来还加入了子域名发现、端口扫描和waf探测等等，但发现耗时相对较长，而且比较容易被封IP，所以又去掉了。</p><p>团队没有专门做前端的，看云悉界面比较美观，所以就参考了云悉和WTF_Scan的界面布局，大佬不要打我们…使用了TP5框架，因为平台的功能都比较low，以防被喷就不放源码了。</p><p>大家可以试用下，给我们提提意见<a href="http://finger.tidesec.net">http://finger.tidesec.net</a></p><p>注册需要验证码，关注下我们公众号回复“潮汐指纹”即可<del>被逼拉流量O(∩_∩)O哈哈</del></p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/013.png"></p><h1 id="待解决的问题"><a href="#待解决的问题" class="headerlink" title="待解决的问题"></a>待解决的问题</h1><p>1、指纹库的继续完善：这是个旷日持久的工作，希望能坚持下去，我们也会持续的开源最新指纹库，希望大家手头有好的资源也可以贡献出来。</p><p>2、代理问题：虽然集成了代理功能，但经实际使用来看，搜集的免费代理质量还是差一些，速度会慢很多。</p><p>3、IP会被封：有的网站防护对目录枚举或一些路径非常敏感，会封IP地址；</p><p>4、下一步尝试对http头进行语义分析，从海量网站中提取分析header的共性，更高效的发现未知指纹；</p><p>5、因为穷，所以目前还是单节点进行指纹的识别，如果是第三步进入常规目录检测的方式的话可能速度会比较慢。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>在指纹库搜集和脚本开发过程中，查阅了大量资料，下面列举的可能不全，在此一并感谢这些无私奉献的安全研究者。</p><p><a href="https://www.freebuf.com/articles/2555.html">https://www.freebuf.com/articles/2555.html</a></p><p><a href="https://blog.51cto.com/simeon/2115190">https://blog.51cto.com/simeon/2115190</a></p><p><a href="https://www.freebuf.com/news/137497.html">https://www.freebuf.com/news/137497.html</a></p><p><a href="https://www.freebuf.com/articles/web/129939.html">https://www.freebuf.com/articles/web/129939.html</a></p><p><a href="https://www.freebuf.com/sectool/135216.html">https://www.freebuf.com/sectool/135216.html</a></p><p><a href="https://www.test404.com/post-1299.html?wafcloud=1">https://www.test404.com/post-1299.html?wafcloud=1</a></p><p><a href="https://github.com/se55i0n/Webfinger">https://github.com/se55i0n/Webfinger</a></p><p><a href="https://github.com/tanjiti/FingerPrint">https://github.com/tanjiti/FingerPrint</a></p><p><a href="https://github.com/dyboy2017/WTF_Scan">https://github.com/dyboy2017/WTF_Scan</a></p><p><a href="https://github.com/zerokeeper/WebEye/">https://github.com/zerokeeper/WebEye/</a></p><p><a href="https://github.com/Ms0x0/Dayu">https://github.com/Ms0x0/Dayu</a></p><p><a href="https://github.com/w-digital-scanner/w11scan">https://github.com/w-digital-scanner/w11scan</a></p><p><a href="https://www.webshell.cc/4697.html">https://www.webshell.cc/4697.html</a></p><p><a href="https://github.com/lokifer/BlindElephant">https://github.com/lokifer/BlindElephant</a></p><p><a href="https://github.com/iniqua/plecost">https://github.com/iniqua/plecost</a></p><p><a href="https://github.com/AliasIO/Wappalyzer">https://github.com/AliasIO/Wappalyzer</a></p><p><a href="https://github.com/urbanadventurer/WhatWeb">https://github.com/urbanadventurer/WhatWeb</a></p><h1 id="小福利"><a href="#小福利" class="headerlink" title="小福利"></a>小福利</h1><p>1、指纹检测工具下载</p><p>我们把上面的13款<strong>指纹识别工具</strong>和搜集到的一些<strong>论文资料</strong>进行了汇总打包，大家可以直接下载。</p><p><code>下载地址：https://pan.baidu.com/s/190K34cwjAWDUMLtR8EWvNA 提取码：5y4o 解压密码www.tidesec.net</code></p><p>后续如有更新，会在我们公众号<code>TideSec安全团队</code>上提供下载，回复“指纹工具”即可获取最新指纹识别工具下载地址。</p><p>2、指纹库下载</p><p>我们在GitHub上提供的是2019年4月的指纹库（还未进行大量的命中率测试），后续我们还会优化调整命中策略、未知指纹识别方法，持续更新优化指纹库。</p><p>最新指纹库的下载请关注我们公众号<code>TideSec安全团队</code>，回复“指纹库”即可获取最新指纹库下载地址。</p><h1 id="关注我们"><a href="#关注我们" class="headerlink" title="关注我们"></a>关注我们</h1><p><strong>TideSec安全团队：</strong></p><p>Tide安全团队正式成立于2019年1月，是以互联网攻防技术研究为目标的安全团队，目前聚集了十多位专业的安全攻防技术研究人员，专注于网络攻防、Web安全、移动终端、安全开发、IoT/物联网/工控安全等方向。</p><p>想了解更多Tide安全团队，请关注团队官网: <a href="http://www.TideSec.net">http://www.TideSec.net</a> 或关注公众号：</p><div align="center"><img src="/2023/02/11/TideFinger-Web%E6%8C%87%E7%BA%B9%E8%AF%86%E5%88%AB%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6%E4%B8%8E%E4%BC%98%E5%8C%96%E5%AE%9E%E7%8E%B0/ewm.png" width="30%"></div><p><strong>和我联系：</strong></p><div align="center"><img src="/2023/02/11/TideFinger-Web%E6%8C%87%E7%BA%B9%E8%AF%86%E5%88%AB%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6%E4%B8%8E%E4%BC%98%E5%8C%96%E5%AE%9E%E7%8E%B0/zjwf.png" width="30%"></div><p>​    </p>]]></content>
      
      
      <categories>
          
          <category> 本科毕设 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> 指纹识别 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毕业设计参考文章</title>
      <link href="/2023/02/11/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0/"/>
      <url>/2023/02/11/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="毕业设计参考文章"><a href="#毕业设计参考文章" class="headerlink" title="毕业设计参考文章"></a>毕业设计参考文章</h2><p><a href="https://blog.csdn.net/javalingyu/article/details/124758153">什么是分布式微服务架构？三分钟彻底弄懂什么是分布式和微服务</a></p><p>笔记：</p><p>每个服务运行在其独立的进程中，服务和服务间采用轻量级的通信机制互相沟通（通常是基于 HTTP 的 RESTful API）每个服务都围绕着具体业务进行构建，并且能够被独立地部署到生产环境、类生产环境等。另外，应尽量避免统一的、集中式的服务管理机制，对具体的一个服务而言，应根据业务上下文，选择合适的语言、工具对其进行构建。</p><p><a href="https://go-zero.dev/cn/">go-zero</a></p><p><a href="https://www.oracle.com/cn/content-management/what-is-cms/">什么是CMS</a></p><p><a href="https://baike.baidu.com/item/%E5%86%85%E5%AE%B9%E5%88%86%E5%8F%91%E7%BD%91%E7%BB%9C/4034265">什么是CDN</a></p><p><a href="https://github.com/TideSec/TideFinger/blob/master/Web%E6%8C%87%E7%BA%B9%E8%AF%86%E5%88%AB%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6%E4%B8%8E%E4%BC%98%E5%8C%96%E5%AE%9E%E7%8E%B0.md"><strong>Web指纹识别技术研究与优化实现</strong></a></p>]]></content>
      
      
      <categories>
          
          <category> 本科毕设 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> 指纹识别 </tag>
            
            <tag> golang </tag>
            
            <tag> 云原生 </tag>
            
            <tag> 微服务 </tag>
            
            <tag> 毕业设计 </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Web指纹识别的安全检测技术研究与应用</title>
      <link href="/2023/01/31/%E5%9F%BA%E4%BA%8EWeb%E6%8C%87%E7%BA%B9%E8%AF%86%E5%88%AB%E7%9A%84%E5%AE%89%E5%85%A8%E6%A3%80%E6%B5%8B%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6%E4%B8%8E%E5%BA%94%E7%94%A8/"/>
      <url>/2023/01/31/%E5%9F%BA%E4%BA%8EWeb%E6%8C%87%E7%BA%B9%E8%AF%86%E5%88%AB%E7%9A%84%E5%AE%89%E5%85%A8%E6%A3%80%E6%B5%8B%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6%E4%B8%8E%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="基于Web指纹识别的安全检测技术研究与应用"><a href="#基于Web指纹识别的安全检测技术研究与应用" class="headerlink" title="基于Web指纹识别的安全检测技术研究与应用"></a>基于Web指纹识别的安全检测技术研究与应用</h2><h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><p>本文针对传统的 Web 安全检测技术识别效率低的问题，通过融合 <a href="https://zhuanlan.zhihu.com/p/78798251">k-means</a> 和<a href="https://zhuanlan.zhihu.com/p/144855223">GBDT</a>对 Web 指纹识别算法进行改进，并将 Docker 虚拟化技术与 POC 框架结合简化 Web 漏洞的验证过程，最终得到了一种识别准确率高、识别耗时少的 Web 安全检测技术。</p><h3 id="第一章-绪论"><a href="#第一章-绪论" class="headerlink" title="第一章 绪论"></a>第一章 绪论</h3><h4 id="1-1-研究背景与意义"><a href="#1-1-研究背景与意义" class="headerlink" title="1.1 研究背景与意义"></a>1.1 研究背景与意义</h4><p>略</p><h4 id="1-2-Web安全检测技术研究现状"><a href="#1-2-Web安全检测技术研究现状" class="headerlink" title="1.2 Web安全检测技术研究现状"></a>1.2 Web安全检测技术研究现状</h4><p>都是一个套路，其他研究存在的问题</p><h4 id="1-3-本文的主要研究内容"><a href="#1-3-本文的主要研究内容" class="headerlink" title="1.3 本文的主要研究内容"></a>1.3 本文的主要研究内容</h4><p>研究的主要内容:</p><p>（1） Web信息抓取技术研究</p><p>研究实用于抓取Web服务组件特征信息的网络爬虫技术，主要是用Scrapy抓取，用BeautifulSoup解析</p><p>（2） Web漏洞挖掘技术的研究与改进</p><p>在抓取出可靠的Web特征信息后，通过引入聚类算法，选取<a href="https://baike.baidu.com/item/%E4%BD%99%E5%BC%A6%E7%9B%B8%E4%BC%BC%E5%BA%A6/17509249">余弦测度</a>作为k-means聚类的相似性度量函数。通过计算与Web指纹库之间的相似性度量，选取相似性度量高的Web服务组件作为最后的类型识别结果。</p><p>在得到Web应用系统的类型后，融入GBDT算法获得其响应的具体版本，然后扫描漏洞库。</p><p>（3） Web漏洞验证技术的研究与改进</p><p>对现有框架进行优化。</p><p>（4） Web安全检测系统的设计与实现</p><p>把上面的整合起来</p><h3 id="第二章-Web安全检测技术概述"><a href="#第二章-Web安全检测技术概述" class="headerlink" title="第二章 Web安全检测技术概述"></a>第二章 Web安全检测技术概述</h3><h4 id="2-1-Web信息抓取与解析技术"><a href="#2-1-Web信息抓取与解析技术" class="headerlink" title="2.1 Web信息抓取与解析技术"></a>2.1 Web信息抓取与解析技术</h4><p>介绍Scrapy和BeautifulSoup技术</p><h4 id="2-2-Web漏洞挖掘与验证技术"><a href="#2-2-Web漏洞挖掘与验证技术" class="headerlink" title="2.2 Web漏洞挖掘与验证技术"></a>2.2 Web漏洞挖掘与验证技术</h4><p>对挖掘到的漏洞进行验证，可以减少误报率</p><h5 id="2-2-1-Web指纹识别技术"><a href="#2-2-1-Web指纹识别技术" class="headerlink" title="2.2.1 Web指纹识别技术"></a>2.2.1 Web指纹识别技术</h5><p>Web 指纹识别算法就是将获得的 Web 特征信息构造 Web 指纹库，然后通过匹配算法进行指纹库遍历匹配，选取匹配率最高的指纹所对应的 Web 应用系统作为最后的识别结果。</p><p>指纹识别大致算法如下：</p><p>其中，集合 $S=\{s_1,s_2,\cdots,s_n\}$ 表示已知指纹库，$s_r$ 表示从目标Web应用程序爬取到的指纹信息，$w_i=f_w(s_i,s_r)$  表示相似度，$c_i=f_c(w_i,W)$ 表示 $s_i$ 是 $s_r$ 的最佳匹配的置信度，集合 M 是所有置信度最大的匹配集合。</p><p> <img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/1.jpg" alt="image-20230203154515150"></p><h5 id="2-2-2-Docker虚拟化技术"><a href="#2-2-2-Docker虚拟化技术" class="headerlink" title="2.2.2 Docker虚拟化技术"></a>2.2.2 Docker虚拟化技术</h5><p>简单介绍</p><h3 id="第三章-基于K-means的Web指纹识别算法"><a href="#第三章-基于K-means的Web指纹识别算法" class="headerlink" title="第三章 基于K-means的Web指纹识别算法"></a>第三章 基于K-means的Web指纹识别算法</h3><h4 id="3-1-K-means聚类模型和梯度提升决策树"><a href="#3-1-K-means聚类模型和梯度提升决策树" class="headerlink" title="3.1 K-means聚类模型和梯度提升决策树"></a>3.1 K-means聚类模型和梯度提升决策树</h4><h5 id="3-1-1-K-means聚类模型"><a href="#3-1-1-K-means聚类模型" class="headerlink" title="3.1.1 K-means聚类模型"></a>3.1.1 K-means聚类模型</h5><p>大体来说，作用就是将一大片离散的点（这些离散的点在n维空间中又在某些点呈现聚集）有点“大杂居，小聚居”的感觉。最终可以得到某一web指纹特征的几种类型。</p><p>算法步骤如下：</p><ol><li>让给定的样本集 $X=\{x_1,x_2,\dots,x_i\}$ ，其中 k 为给定聚类数，$x_i$是第i个样本的d维特征向量；并在样本集X中选择k个初始聚类中心，并将它们标记为$\{c_1,c_2,\dots,c_K\}$；</li><li>根据相似度度量函数计算出它们与聚类中心的相似度，对于给定样本集的 n 个样本，并根据相似度将其划分为K个聚类$\{C_1,C_2,\dots,C_k\}$；</li><li>计算每个集群作为一个新的集群中心的平均值；</li><li>计算聚类准则函数；</li></ol><script type="math/tex; mode=display">\begin{eqnarray}J=\sum^{K}_{j=1}\sum_{x_i\in C_i}d(x_i, c_i)\end{eqnarray}</script><p>​        在上述表达式中，$d(x_i,c_i)$表示的是相似性度量函数，$c$ 指的是聚类中心；</p><ol><li>倘若出现聚类准则函数收敛，则算法终止；不然，就将步骤2到步骤4重复（到最大迭代次数）。</li><li>当聚类准则函数收敛时，$J$ 值最小，聚类效果最好。</li></ol><font color="red">几个问题：</font><p>K值，即给定聚类数要怎么选取，在迭代前也不知道某个或者某类特征有几种指纹</p><h5 id="3-1-2-梯度提升决策树（GBDT）"><a href="#3-1-2-梯度提升决策树（GBDT）" class="headerlink" title="3.1.2 梯度提升决策树（GBDT）"></a>3.1.2 梯度提升决策树（GBDT）</h5><p>有点过于抽象了，暂时先留在这里</p><h4 id="3-2-特征的选取及数据处理"><a href="#3-2-特征的选取及数据处理" class="headerlink" title="3.2 特征的选取及数据处理"></a>3.2 特征的选取及数据处理</h4><h5 id="3-2-1-特征的选取"><a href="#3-2-1-特征的选取" class="headerlink" title="3.2.1 特征的选取"></a>3.2.1 特征的选取</h5><p>（1）HTTP头顺序</p><p>主流Web服务器类型可由头部域的相对顺序准确识别。</p><p>（2）状态码定义</p><p>对于已知的Web服务器类型，其版本可由特定HTTP请求的响应状态码定义准确识别。</p><p>（3）URL</p><p>URL中的字符串可能会暴露CMS等信息。</p><p>（4）HTML Meta</p><p>meta字段包含了一些版权之类的重要信息。</p><p>（5）HTML内容</p><p>可以通过正则表达式匹配找到相应内容，如”powered by wordpresss”等</p><p>（6）特定文件MD5</p><p>hashicon等，引用js库也不怎么变</p><p>（7）JS地址</p><p>通过提取网页HTML引用的JS地址，可以判断该网页采用了哪一种Web技术，例如常用的jQuery、BootStrap等。</p><p>（8）JS运行变量</p><p>JS文件改了名字，可能就检测不到，可以将网页进行动态渲染，就可以得到JS运行环境中的变量。</p><p><img src="https://jiaotache-blog.oss-cn-hangzhou.aliyuncs.com/img/2.jpg" alt="image-20230214145301904"></p>]]></content>
      
      
      <categories>
          
          <category> 本科毕设 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> 指纹识别 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web指纹识别原理与防范方法</title>
      <link href="/2023/01/28/web%E6%8C%87%E7%BA%B9%E8%AF%86%E5%88%AB/"/>
      <url>/2023/01/28/web%E6%8C%87%E7%BA%B9%E8%AF%86%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h2 id="Web指纹识别原理与防范方法"><a href="#Web指纹识别原理与防范方法" class="headerlink" title="Web指纹识别原理与防范方法"></a>Web指纹识别原理与防范方法</h2><h3 id="1-引言"><a href="#1-引言" class="headerlink" title="1. 引言"></a>1. 引言</h3><p>​        现在的web渗透，乱扫很可能触发Waf(web应用防护系统)的防护机制。网络上大部分的Web站点，都是基于已有的开源的web网址进行二次开发而成的，通过web网址识别技术，可以快速识别出web站点的开源系统类型，就可以快速找到该网站系统已公布的漏洞。目前比较流行的是web网站指纹识别技术。</p><h3 id="2-Web指纹识别原理"><a href="#2-Web指纹识别原理" class="headerlink" title="2. Web指纹识别原理"></a>2. Web指纹识别原理</h3><h4 id="2-1指纹识别技术"><a href="#2-1指纹识别技术" class="headerlink" title="2.1指纹识别技术"></a>2.1指纹识别技术</h4><p>能用特征标识的计算机对象：比如服务器、操作系统、中间件、数据库、web系统等。这些都可以称为组件，组件是网络空间的基本构成单位，指纹是组件上能标识对象类型的一段特征信息。</p><p>不同组件指纹能说明当前服务名称和版本的特征。</p><h4 id="2-2-HTML内容分析"><a href="#2-2-HTML内容分析" class="headerlink" title="2.2 HTML内容分析"></a>2.2 HTML内容分析</h4><p>HTML源码中有很多能体现出Web网站的唯一性特征。重点需要分析head、body里面的内容</p><p>​    (1) 特殊的HTML文本</p><p>​    版权信息是一个重要的特征，比如Discuz！论坛等，免费版本都要求保留版权信息。</p><p>​    (2) 特殊的id、class信息</p><p>​    很多开源的web源码在命名标签的id或class时候，一般会采用与其标识有关联的全名或简写。</p><p>例如：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">id</span>=<span class="string">"wordpress-org"</span> <span class="attr">class</span>=<span class="string">"home pagetemplate-default page page-id-1019 page-home"</span> &gt;</span></span><br></pre></td></tr></tbody></table></figure><p>这里的 id 就表名此 Web 站点采用是 wordpress 源码。</p><p>​    (3) 特殊的link、script标签</p><p>例如，在</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://js/bootstrap.min.js"</span>&gt;</span> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>中，可以知道此站点使用了 Bootstrap(<font color="#39C5BB"> Bootstrap是Twitter推出的一个用于前端开发的开源工具包</font>)。还有其它的一些 jQuery(<font color="#39C5BB"> jQuery是一个快速、简洁的<a href="https://baike.baidu.com/item/JavaScript/321142?fromModule=lemma_inlink">JavaScript</a>框架</font>) 也可以根据名字匹配出来。</p><p>​    (4) <a href="https://baike.baidu.com/item/META%E6%A0%87%E7%AD%BE/733434?fr=aladdin">meta标签</a>特征</p><p>META标签用来描述一个HTML网页文档的属性，例如作者、日期和时间、网页描述、关键词、页面刷新等。</p><h4 id="2-3-URL特征"><a href="#2-3-URL特征" class="headerlink" title="2.3 URL特征"></a>2.3 URL特征</h4><p>​    URL特征主要包括URL路径特征、默认错误页面、<a href="https://baike.baidu.com/item/robots%E5%8D%8F%E8%AE%AE/2483797?fromtitle=robots.txt&amp;fromid=9518761&amp;fr=aladdin">robots.txt</a>文件以及一些其他特殊文件</p><p>URL路径特征：</p><p>成熟的商业或开源网站一般会以特定简写命名文件目录，即他们的网页文件路径有固定格式，如WordPress 具有如下的常见路径：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">readme.html</span><br><span class="line">wp-content/uploads/</span><br><span class="line">wp-admin</span><br><span class="line">...</span><br></pre></td></tr></tbody></table></figure><p>默认错误页面：</p><p>不同网站的错误处理页面具有不同的特征，很有可能含有当前网站的一些标志信息，这样可以通过故意输入错误信息，得到一个错误页面，从而判断此站点属于哪一种开源网站类型。比如 Apache的默认 404 错误页面。</p><p>robots.txt文件：</p><p>不同站点的这个文件不同，如果部署后没有删除，可以利用此文件来判别站点的类型。</p><p>其他特殊文件：</p><p>一些特殊静态文件，如html、js、css、image等，尤其是favicon.ico（<font color="#39c5bb">网页图标</font>）以及logo文件，可以通过计算其md5值进行判别。</p><h4 id="2-4-HTTP响应头"><a href="#2-4-HTTP响应头" class="headerlink" title="2.4 HTTP响应头"></a>2.4 HTTP响应头</h4><p>请求响应主体内容或头信息的关键字匹配方法可以寻找网站的 css 、js 代码的命名规则（<font color="#39c5bb">不同版本的css、js的接口函数命名可能不同？</font>）也可以找关键字，以及 head cookie 等。</p><p>Response Header的很多字段中就有服务器信息，不同网站会有额外的特殊返回字段。</p><h4 id="2-5其他特征"><a href="#2-5其他特征" class="headerlink" title="2.5其他特征"></a>2.5其他特征</h4><p>网站系统部署到服务器后，一般都会使用到数据库系统，可以通过开放的端口来辅助判断站点特征，比如：MS SQL Server 的 1433 端口、MySql 的3306 端口、Oracle 的 1521 端口、MongoDB 的 27017端口等。</p><p>一些应用程序、组件和数据库服务会有一些特殊的指纹，一般情况下不会进行更改。不同操作系统实现通信协议的细节不一样，可以鉴别服务器操作系统。</p><p>有些站点有ssh证书，ssh证书也能辅助进行站点特征判别。</p><h3 id="Web指纹识别的防范"><a href="#Web指纹识别的防范" class="headerlink" title="Web指纹识别的防范"></a>Web指纹识别的防范</h3><p>与毕设关系不大且没含金量，略</p>]]></content>
      
      
      <categories>
          
          <category> 本科毕设 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> 指纹识别 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
